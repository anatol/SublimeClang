('ACCESSX_MAX_DESCRIPTORS\tmacro', 'ACCESSX_MAX_DESCRIPTORS')
('ACCESSX_MAX_TABLESIZE\tmacro', 'ACCESSX_MAX_TABLESIZE')
('ARG_MAX\tmacro', 'ARG_MAX')
('BADSIG\tmacro', 'BADSIG')
('BC_BASE_MAX\tmacro', 'BC_BASE_MAX')
('BC_DIM_MAX\tmacro', 'BC_DIM_MAX')
('BC_SCALE_MAX\tmacro', 'BC_SCALE_MAX')
('BC_STRING_MAX\tmacro', 'BC_STRING_MAX')
('BIG_ENDIAN\tmacro', 'BIG_ENDIAN')
('BUFSIZ\tmacro', 'BUFSIZ')
('BUS_ADRALN\tmacro', 'BUS_ADRALN')
('BUS_ADRERR\tmacro', 'BUS_ADRERR')
('BUS_NOOP\tmacro', 'BUS_NOOP')
('BUS_OBJERR\tmacro', 'BUS_OBJERR')
('BYTE_ORDER\tmacro', 'BYTE_ORDER')
('CAST_USER_ADDR_T\tmacro', 'CAST_USER_ADDR_T')
('CHARCLASS_NAME_MAX\tmacro', 'CHARCLASS_NAME_MAX')
('CHAR_BIT\tmacro', 'CHAR_BIT')
('CHAR_MAX\tmacro', 'CHAR_MAX')
('CHAR_MIN\tmacro', 'CHAR_MIN')
('CHILD_MAX\tmacro', 'CHILD_MAX')
('CLD_CONTINUED\tmacro', 'CLD_CONTINUED')
('CLD_DUMPED\tmacro', 'CLD_DUMPED')
('CLD_EXITED\tmacro', 'CLD_EXITED')
('CLD_KILLED\tmacro', 'CLD_KILLED')
('CLD_NOOP\tmacro', 'CLD_NOOP')
('CLD_STOPPED\tmacro', 'CLD_STOPPED')
('CLD_TRAPPED\tmacro', 'CLD_TRAPPED')
('CLK_TCK\tmacro', 'CLK_TCK')
('CLOCKS_PER_SEC\tmacro', 'CLOCKS_PER_SEC')
('COLL_WEIGHTS_MAX\tmacro', 'COLL_WEIGHTS_MAX')
('CXA_RUNTIME_CXA_EXCEPTION_RETHROW\tmacro', 'CXA_RUNTIME_CXA_EXCEPTION_RETHROW')
('CXA_RUNTIME_CXA_EXCEPTION_RETHROW_ENABLED\tmacro', 'CXA_RUNTIME_CXA_EXCEPTION_RETHROW_ENABLED')
('CXA_RUNTIME_CXA_EXCEPTION_THROW\tmacro', 'CXA_RUNTIME_CXA_EXCEPTION_THROW')
('CXA_RUNTIME_CXA_EXCEPTION_THROW_ENABLED\tmacro', 'CXA_RUNTIME_CXA_EXCEPTION_THROW_ENABLED')
('CXA_RUNTIME_STABILITY\tmacro', 'CXA_RUNTIME_STABILITY')
('CXA_RUNTIME_TYPEDEFS\tmacro', 'CXA_RUNTIME_TYPEDEFS')
('EOF\tmacro', 'EOF')
('EQUIV_CLASS_MAX\tmacro', 'EQUIV_CLASS_MAX')
('EXIT_FAILURE\tmacro', 'EXIT_FAILURE')
('EXIT_SUCCESS\tmacro', 'EXIT_SUCCESS')
('EXPR_NEST_MAX\tmacro', 'EXPR_NEST_MAX')
('FD_CLR\tmacro', 'FD_CLR')
('FD_COPY\tmacro', 'FD_COPY')
('FD_ISSET\tmacro', 'FD_ISSET')
('FD_SET\tmacro', 'FD_SET')
('FD_SETSIZE\tmacro', 'FD_SETSIZE')
('FD_ZERO\tmacro', 'FD_ZERO')
('FILE\ttypedef', 'FILE')
('FILENAME_MAX\tmacro', 'FILENAME_MAX')
('FOPEN_MAX\tmacro', 'FOPEN_MAX')
('FPE_FLTDIV\tmacro', 'FPE_FLTDIV')
('FPE_FLTINV\tmacro', 'FPE_FLTINV')
('FPE_FLTOVF\tmacro', 'FPE_FLTOVF')
('FPE_FLTRES\tmacro', 'FPE_FLTRES')
('FPE_FLTSUB\tmacro', 'FPE_FLTSUB')
('FPE_FLTUND\tmacro', 'FPE_FLTUND')
('FPE_INTDIV\tmacro', 'FPE_INTDIV')
('FPE_INTOVF\tmacro', 'FPE_INTOVF')
('FPE_NOOP\tmacro', 'FPE_NOOP')
('FP_CHOP\tmacro', 'FP_CHOP')
('FP_PREC_24B\tmacro', 'FP_PREC_24B')
('FP_PREC_53B\tmacro', 'FP_PREC_53B')
('FP_PREC_64B\tmacro', 'FP_PREC_64B')
('FP_RND_DOWN\tmacro', 'FP_RND_DOWN')
('FP_RND_NEAR\tmacro', 'FP_RND_NEAR')
('FP_RND_UP\tmacro', 'FP_RND_UP')
('FP_STATE_BYTES\tmacro', 'FP_STATE_BYTES')
('F_LOCK\tmacro', 'F_LOCK')
('F_OK\tmacro', 'F_OK')
('F_TEST\tmacro', 'F_TEST')
('F_TLOCK\tmacro', 'F_TLOCK')
('F_ULOCK\tmacro', 'F_ULOCK')
('GID_MAX\tmacro', 'GID_MAX')
('HTONL\tmacro', 'HTONL')
('HTONS\tmacro', 'HTONS')
('I386_MCONTEXT_SIZE\tmacro', 'I386_MCONTEXT_SIZE')
('ILL_BADSTK\tmacro', 'ILL_BADSTK')
('ILL_COPROC\tmacro', 'ILL_COPROC')
('ILL_ILLADR\tmacro', 'ILL_ILLADR')
('ILL_ILLOPC\tmacro', 'ILL_ILLOPC')
('ILL_ILLOPN\tmacro', 'ILL_ILLOPN')
('ILL_ILLTRP\tmacro', 'ILL_ILLTRP')
('ILL_NOOP\tmacro', 'ILL_NOOP')
('ILL_PRVOPC\tmacro', 'ILL_PRVOPC')
('ILL_PRVREG\tmacro', 'ILL_PRVREG')
('INT16_C\tmacro', 'INT16_C')
('INT16_MAX\tmacro', 'INT16_MAX')
('INT16_MIN\tmacro', 'INT16_MIN')
('INT32_C\tmacro', 'INT32_C')
('INT32_MAX\tmacro', 'INT32_MAX')
('INT32_MIN\tmacro', 'INT32_MIN')
('INT64_C\tmacro', 'INT64_C')
('INT64_MAX\tmacro', 'INT64_MAX')
('INT64_MIN\tmacro', 'INT64_MIN')
('INT8_C\tmacro', 'INT8_C')
('INT8_MAX\tmacro', 'INT8_MAX')
('INT8_MIN\tmacro', 'INT8_MIN')
('INTMAX_C\tmacro', 'INTMAX_C')
('INTMAX_MAX\tmacro', 'INTMAX_MAX')
('INTMAX_MIN\tmacro', 'INTMAX_MIN')
('INTPTR_MAX\tmacro', 'INTPTR_MAX')
('INTPTR_MIN\tmacro', 'INTPTR_MIN')
('INT_FAST16_MAX\tmacro', 'INT_FAST16_MAX')
('INT_FAST16_MIN\tmacro', 'INT_FAST16_MIN')
('INT_FAST32_MAX\tmacro', 'INT_FAST32_MAX')
('INT_FAST32_MIN\tmacro', 'INT_FAST32_MIN')
('INT_FAST64_MAX\tmacro', 'INT_FAST64_MAX')
('INT_FAST64_MIN\tmacro', 'INT_FAST64_MIN')
('INT_FAST8_MAX\tmacro', 'INT_FAST8_MAX')
('INT_FAST8_MIN\tmacro', 'INT_FAST8_MIN')
('INT_LEAST16_MAX\tmacro', 'INT_LEAST16_MAX')
('INT_LEAST16_MIN\tmacro', 'INT_LEAST16_MIN')
('INT_LEAST32_MAX\tmacro', 'INT_LEAST32_MAX')
('INT_LEAST32_MIN\tmacro', 'INT_LEAST32_MIN')
('INT_LEAST64_MAX\tmacro', 'INT_LEAST64_MAX')
('INT_LEAST64_MIN\tmacro', 'INT_LEAST64_MIN')
('INT_LEAST8_MAX\tmacro', 'INT_LEAST8_MAX')
('INT_LEAST8_MIN\tmacro', 'INT_LEAST8_MIN')
('INT_MAX\tmacro', 'INT_MAX')
('INT_MIN\tmacro', 'INT_MIN')
('IOPOL_DEFAULT\tmacro', 'IOPOL_DEFAULT')
('IOPOL_NORMAL\tmacro', 'IOPOL_NORMAL')
('IOPOL_PASSIVE\tmacro', 'IOPOL_PASSIVE')
('IOPOL_SCOPE_PROCESS\tmacro', 'IOPOL_SCOPE_PROCESS')
('IOPOL_SCOPE_THREAD\tmacro', 'IOPOL_SCOPE_THREAD')
('IOPOL_THROTTLE\tmacro', 'IOPOL_THROTTLE')
('IOPOL_TYPE_DISK\tmacro', 'IOPOL_TYPE_DISK')
('IOV_MAX\tmacro', 'IOV_MAX')
('LC_ALL\tmacro', 'LC_ALL')
('LC_COLLATE\tmacro', 'LC_COLLATE')
('LC_CTYPE\tmacro', 'LC_CTYPE')
('LC_MESSAGES\tmacro', 'LC_MESSAGES')
('LC_MONETARY\tmacro', 'LC_MONETARY')
('LC_NUMERIC\tmacro', 'LC_NUMERIC')
('LC_TIME\tmacro', 'LC_TIME')
('LINE_MAX\tmacro', 'LINE_MAX')
('LINK_MAX\tmacro', 'LINK_MAX')
('LITTLE_ENDIAN\tmacro', 'LITTLE_ENDIAN')
('LLONG_MAX\tmacro', 'LLONG_MAX')
('LLONG_MIN\tmacro', 'LLONG_MIN')
('LONG_BIT\tmacro', 'LONG_BIT')
('LONG_MAX\tmacro', 'LONG_MAX')
('LONG_MIN\tmacro', 'LONG_MIN')
('L_INCR\tmacro', 'L_INCR')
('L_SET\tmacro', 'L_SET')
('L_XTND\tmacro', 'L_XTND')
('L_ctermid\tmacro', 'L_ctermid')
('L_tmpnam\tmacro', 'L_tmpnam')
('MAX_CANON\tmacro', 'MAX_CANON')
('MAX_INPUT\tmacro', 'MAX_INPUT')
('MB_CUR_MAX\tmacro', 'MB_CUR_MAX')
('MB_LEN_MAX\tmacro', 'MB_LEN_MAX')
('MINSIGSTKSZ\tmacro', 'MINSIGSTKSZ')
('NAME_MAX\tmacro', 'NAME_MAX')
('NGROUPS_MAX\tmacro', 'NGROUPS_MAX')
('NL_ARGMAX\tmacro', 'NL_ARGMAX')
('NL_LANGMAX\tmacro', 'NL_LANGMAX')
('NL_MSGMAX\tmacro', 'NL_MSGMAX')
('NL_NMAX\tmacro', 'NL_NMAX')
('NL_SETMAX\tmacro', 'NL_SETMAX')
('NL_TEXTMAX\tmacro', 'NL_TEXTMAX')
('NSIG\tmacro', 'NSIG')
('NTOHL\tmacro', 'NTOHL')
('NTOHS\tmacro', 'NTOHS')
('NULL\tmacro', 'NULL')
('NZERO\tmacro', 'NZERO')
('OBJC_NEW_PROPERTIES\tmacro', 'OBJC_NEW_PROPERTIES')
('OFF_MAX\tmacro', 'OFF_MAX')
('OFF_MIN\tmacro', 'OFF_MIN')
('OPEN_MAX\tmacro', 'OPEN_MAX')
('PASS_MAX\tmacro', 'PASS_MAX')
('PATH_MAX\tmacro', 'PATH_MAX')
('PDP_ENDIAN\tmacro', 'PDP_ENDIAN')
('PIPE_BUF\tmacro', 'PIPE_BUF')
('POLL_ERR\tmacro', 'POLL_ERR')
('POLL_HUP\tmacro', 'POLL_HUP')
('POLL_IN\tmacro', 'POLL_IN')
('POLL_MSG\tmacro', 'POLL_MSG')
('POLL_OUT\tmacro', 'POLL_OUT')
('POLL_PRI\tmacro', 'POLL_PRI')
('PRIO_DARWIN_BG\tmacro', 'PRIO_DARWIN_BG')
('PRIO_DARWIN_NONUI\tmacro', 'PRIO_DARWIN_NONUI')
('PRIO_DARWIN_PROCESS\tmacro', 'PRIO_DARWIN_PROCESS')
('PRIO_DARWIN_THREAD\tmacro', 'PRIO_DARWIN_THREAD')
('PRIO_MAX\tmacro', 'PRIO_MAX')
('PRIO_MIN\tmacro', 'PRIO_MIN')
('PRIO_PGRP\tmacro', 'PRIO_PGRP')
('PRIO_PROCESS\tmacro', 'PRIO_PROCESS')
('PRIO_USER\tmacro', 'PRIO_USER')
('PTHREAD_CANCELED\tmacro', 'PTHREAD_CANCELED')
('PTHREAD_CANCEL_ASYNCHRONOUS\tmacro', 'PTHREAD_CANCEL_ASYNCHRONOUS')
('PTHREAD_CANCEL_DEFERRED\tmacro', 'PTHREAD_CANCEL_DEFERRED')
('PTHREAD_CANCEL_DISABLE\tmacro', 'PTHREAD_CANCEL_DISABLE')
('PTHREAD_CANCEL_ENABLE\tmacro', 'PTHREAD_CANCEL_ENABLE')
('PTHREAD_COND_INITIALIZER\tmacro', 'PTHREAD_COND_INITIALIZER')
('PTHREAD_CREATE_DETACHED\tmacro', 'PTHREAD_CREATE_DETACHED')
('PTHREAD_CREATE_JOINABLE\tmacro', 'PTHREAD_CREATE_JOINABLE')
('PTHREAD_DESTRUCTOR_ITERATIONS\tmacro', 'PTHREAD_DESTRUCTOR_ITERATIONS')
('PTHREAD_ERRORCHECK_MUTEX_INITIALIZER\tmacro', 'PTHREAD_ERRORCHECK_MUTEX_INITIALIZER')
('PTHREAD_EXPLICIT_SCHED\tmacro', 'PTHREAD_EXPLICIT_SCHED')
('PTHREAD_INHERIT_SCHED\tmacro', 'PTHREAD_INHERIT_SCHED')
('PTHREAD_KEYS_MAX\tmacro', 'PTHREAD_KEYS_MAX')
('PTHREAD_MUTEX_DEFAULT\tmacro', 'PTHREAD_MUTEX_DEFAULT')
('PTHREAD_MUTEX_ERRORCHECK\tmacro', 'PTHREAD_MUTEX_ERRORCHECK')
('PTHREAD_MUTEX_INITIALIZER\tmacro', 'PTHREAD_MUTEX_INITIALIZER')
('PTHREAD_MUTEX_NORMAL\tmacro', 'PTHREAD_MUTEX_NORMAL')
('PTHREAD_MUTEX_RECURSIVE\tmacro', 'PTHREAD_MUTEX_RECURSIVE')
('PTHREAD_ONCE_INIT\tmacro', 'PTHREAD_ONCE_INIT')
('PTHREAD_PRIO_INHERIT\tmacro', 'PTHREAD_PRIO_INHERIT')
('PTHREAD_PRIO_NONE\tmacro', 'PTHREAD_PRIO_NONE')
('PTHREAD_PRIO_PROTECT\tmacro', 'PTHREAD_PRIO_PROTECT')
('PTHREAD_PROCESS_PRIVATE\tmacro', 'PTHREAD_PROCESS_PRIVATE')
('PTHREAD_PROCESS_SHARED\tmacro', 'PTHREAD_PROCESS_SHARED')
('PTHREAD_RECURSIVE_MUTEX_INITIALIZER\tmacro', 'PTHREAD_RECURSIVE_MUTEX_INITIALIZER')
('PTHREAD_RWLOCK_INITIALIZER\tmacro', 'PTHREAD_RWLOCK_INITIALIZER')
('PTHREAD_SCOPE_PROCESS\tmacro', 'PTHREAD_SCOPE_PROCESS')
('PTHREAD_SCOPE_SYSTEM\tmacro', 'PTHREAD_SCOPE_SYSTEM')
('PTHREAD_STACK_MIN\tmacro', 'PTHREAD_STACK_MIN')
('PTRDIFF_MAX\tmacro', 'PTRDIFF_MAX')
('PTRDIFF_MIN\tmacro', 'PTRDIFF_MIN')
('P_ALL\tidtype_t', 'P_ALL')
('P_PGID\tidtype_t', 'P_PGID')
('P_PID\tidtype_t', 'P_PID')
('P_tmpdir\tmacro', 'P_tmpdir')
('QUAD_MAX\tmacro', 'QUAD_MAX')
('QUAD_MIN\tmacro', 'QUAD_MIN')
('RAND_MAX\tmacro', 'RAND_MAX')
('RE_DUP_MAX\tmacro', 'RE_DUP_MAX')
('RLIMIT_AS\tmacro', 'RLIMIT_AS')
('RLIMIT_CORE\tmacro', 'RLIMIT_CORE')
('RLIMIT_CPU\tmacro', 'RLIMIT_CPU')
('RLIMIT_DATA\tmacro', 'RLIMIT_DATA')
('RLIMIT_FSIZE\tmacro', 'RLIMIT_FSIZE')
('RLIMIT_MEMLOCK\tmacro', 'RLIMIT_MEMLOCK')
('RLIMIT_NOFILE\tmacro', 'RLIMIT_NOFILE')
('RLIMIT_NPROC\tmacro', 'RLIMIT_NPROC')
('RLIMIT_RSS\tmacro', 'RLIMIT_RSS')
('RLIMIT_STACK\tmacro', 'RLIMIT_STACK')
('RLIM_INFINITY\tmacro', 'RLIM_INFINITY')
('RLIM_NLIMITS\tmacro', 'RLIM_NLIMITS')
('RLIM_SAVED_CUR\tmacro', 'RLIM_SAVED_CUR')
('RLIM_SAVED_MAX\tmacro', 'RLIM_SAVED_MAX')
('RUSAGE_CHILDREN\tmacro', 'RUSAGE_CHILDREN')
('RUSAGE_SELF\tmacro', 'RUSAGE_SELF')
('R_OK\tmacro', 'R_OK')
('SA_64REGSET\tmacro', 'SA_64REGSET')
('SA_NOCLDSTOP\tmacro', 'SA_NOCLDSTOP')
('SA_NOCLDWAIT\tmacro', 'SA_NOCLDWAIT')
('SA_NODEFER\tmacro', 'SA_NODEFER')
('SA_ONSTACK\tmacro', 'SA_ONSTACK')
('SA_RESETHAND\tmacro', 'SA_RESETHAND')
('SA_RESTART\tmacro', 'SA_RESTART')
('SA_SIGINFO\tmacro', 'SA_SIGINFO')
('SA_USERSPACE_MASK\tmacro', 'SA_USERSPACE_MASK')
('SA_USERTRAMP\tmacro', 'SA_USERTRAMP')
('SCHAR_MAX\tmacro', 'SCHAR_MAX')
('SCHAR_MIN\tmacro', 'SCHAR_MIN')
('SCHED_FIFO\tmacro', 'SCHED_FIFO')
('SCHED_OTHER\tmacro', 'SCHED_OTHER')
('SCHED_RR\tmacro', 'SCHED_RR')
('SEEK_CUR\tmacro', 'SEEK_CUR')
('SEEK_END\tmacro', 'SEEK_END')
('SEEK_SET\tmacro', 'SEEK_SET')
('SEGV_ACCERR\tmacro', 'SEGV_ACCERR')
('SEGV_MAPERR\tmacro', 'SEGV_MAPERR')
('SEGV_NOOP\tmacro', 'SEGV_NOOP')
('SHRT_MAX\tmacro', 'SHRT_MAX')
('SHRT_MIN\tmacro', 'SHRT_MIN')
('SIGABRT\tmacro', 'SIGABRT')
('SIGALRM\tmacro', 'SIGALRM')
('SIGBUS\tmacro', 'SIGBUS')
('SIGCHLD\tmacro', 'SIGCHLD')
('SIGCONT\tmacro', 'SIGCONT')
('SIGEMT\tmacro', 'SIGEMT')
('SIGEV_NONE\tmacro', 'SIGEV_NONE')
('SIGEV_SIGNAL\tmacro', 'SIGEV_SIGNAL')
('SIGEV_THREAD\tmacro', 'SIGEV_THREAD')
('SIGFPE\tmacro', 'SIGFPE')
('SIGHUP\tmacro', 'SIGHUP')
('SIGILL\tmacro', 'SIGILL')
('SIGINFO\tmacro', 'SIGINFO')
('SIGINT\tmacro', 'SIGINT')
('SIGIO\tmacro', 'SIGIO')
('SIGIOT\tmacro', 'SIGIOT')
('SIGKILL\tmacro', 'SIGKILL')
('SIGPIPE\tmacro', 'SIGPIPE')
('SIGPROF\tmacro', 'SIGPROF')
('SIGQUIT\tmacro', 'SIGQUIT')
('SIGSEGV\tmacro', 'SIGSEGV')
('SIGSTKSZ\tmacro', 'SIGSTKSZ')
('SIGSTOP\tmacro', 'SIGSTOP')
('SIGSYS\tmacro', 'SIGSYS')
('SIGTERM\tmacro', 'SIGTERM')
('SIGTRAP\tmacro', 'SIGTRAP')
('SIGTSTP\tmacro', 'SIGTSTP')
('SIGTTIN\tmacro', 'SIGTTIN')
('SIGTTOU\tmacro', 'SIGTTOU')
('SIGURG\tmacro', 'SIGURG')
('SIGUSR1\tmacro', 'SIGUSR1')
('SIGUSR2\tmacro', 'SIGUSR2')
('SIGVTALRM\tmacro', 'SIGVTALRM')
('SIGWINCH\tmacro', 'SIGWINCH')
('SIGXCPU\tmacro', 'SIGXCPU')
('SIGXFSZ\tmacro', 'SIGXFSZ')
('SIG_ATOMIC_MAX\tmacro', 'SIG_ATOMIC_MAX')
('SIG_ATOMIC_MIN\tmacro', 'SIG_ATOMIC_MIN')
('SIG_BLOCK\tmacro', 'SIG_BLOCK')
('SIG_DFL\tmacro', 'SIG_DFL')
('SIG_ERR\tmacro', 'SIG_ERR')
('SIG_HOLD\tmacro', 'SIG_HOLD')
('SIG_IGN\tmacro', 'SIG_IGN')
('SIG_SETMASK\tmacro', 'SIG_SETMASK')
('SIG_UNBLOCK\tmacro', 'SIG_UNBLOCK')
('SIZE_MAX\tmacro', 'SIZE_MAX')
('SIZE_T_MAX\tmacro', 'SIZE_T_MAX')
('SI_ASYNCIO\tmacro', 'SI_ASYNCIO')
('SI_MESGQ\tmacro', 'SI_MESGQ')
('SI_QUEUE\tmacro', 'SI_QUEUE')
('SI_TIMER\tmacro', 'SI_TIMER')
('SI_USER\tmacro', 'SI_USER')
('SSIZE_MAX\tmacro', 'SSIZE_MAX')
('SS_DISABLE\tmacro', 'SS_DISABLE')
('SS_ONSTACK\tmacro', 'SS_ONSTACK')
('STDC_HEADERS\tmacro', 'STDC_HEADERS')
('STDERR_FILENO\tmacro', 'STDERR_FILENO')
('STDIN_FILENO\tmacro', 'STDIN_FILENO')
('STDOUT_FILENO\tmacro', 'STDOUT_FILENO')
('SV_INTERRUPT\tmacro', 'SV_INTERRUPT')
('SV_NOCLDSTOP\tmacro', 'SV_NOCLDSTOP')
('SV_NODEFER\tmacro', 'SV_NODEFER')
('SV_ONSTACK\tmacro', 'SV_ONSTACK')
('SV_RESETHAND\tmacro', 'SV_RESETHAND')
('SV_SIGINFO\tmacro', 'SV_SIGINFO')
('TMP_MAX\tmacro', 'TMP_MAX')
('TRAP_BRKPT\tmacro', 'TRAP_BRKPT')
('TRAP_TRACE\tmacro', 'TRAP_TRACE')
('Test\tnamespace', 'Test')
('UCHAR_MAX\tmacro', 'UCHAR_MAX')
('UID_MAX\tmacro', 'UID_MAX')
('UINT16_C\tmacro', 'UINT16_C')
('UINT16_MAX\tmacro', 'UINT16_MAX')
('UINT32_C\tmacro', 'UINT32_C')
('UINT32_MAX\tmacro', 'UINT32_MAX')
('UINT64_C\tmacro', 'UINT64_C')
('UINT64_MAX\tmacro', 'UINT64_MAX')
('UINT8_C\tmacro', 'UINT8_C')
('UINT8_MAX\tmacro', 'UINT8_MAX')
('UINTMAX_C\tmacro', 'UINTMAX_C')
('UINTMAX_MAX\tmacro', 'UINTMAX_MAX')
('UINTPTR_MAX\tmacro', 'UINTPTR_MAX')
('UINT_FAST16_MAX\tmacro', 'UINT_FAST16_MAX')
('UINT_FAST32_MAX\tmacro', 'UINT_FAST32_MAX')
('UINT_FAST64_MAX\tmacro', 'UINT_FAST64_MAX')
('UINT_FAST8_MAX\tmacro', 'UINT_FAST8_MAX')
('UINT_LEAST16_MAX\tmacro', 'UINT_LEAST16_MAX')
('UINT_LEAST32_MAX\tmacro', 'UINT_LEAST32_MAX')
('UINT_LEAST64_MAX\tmacro', 'UINT_LEAST64_MAX')
('UINT_LEAST8_MAX\tmacro', 'UINT_LEAST8_MAX')
('UINT_MAX\tmacro', 'UINT_MAX')
('ULLONG_MAX\tmacro', 'ULLONG_MAX')
('ULONG_MAX\tmacro', 'ULONG_MAX')
('UQUAD_MAX\tmacro', 'UQUAD_MAX')
('USER_ADDR_NULL\tmacro', 'USER_ADDR_NULL')
('USHRT_MAX\tmacro', 'USHRT_MAX')
('WAIT_ANY\tmacro', 'WAIT_ANY')
('WAIT_MYPGRP\tmacro', 'WAIT_MYPGRP')
('WCHAR_MAX\tmacro', 'WCHAR_MAX')
('WCHAR_MIN\tmacro', 'WCHAR_MIN')
('WCONTINUED\tmacro', 'WCONTINUED')
('WCOREDUMP\tmacro', 'WCOREDUMP')
('WCOREFLAG\tmacro', 'WCOREFLAG')
('WEOF\tmacro', 'WEOF')
('WEXITED\tmacro', 'WEXITED')
('WEXITSTATUS\tmacro', 'WEXITSTATUS')
('WIFCONTINUED\tmacro', 'WIFCONTINUED')
('WIFEXITED\tmacro', 'WIFEXITED')
('WIFSIGNALED\tmacro', 'WIFSIGNALED')
('WIFSTOPPED\tmacro', 'WIFSTOPPED')
('WINT_MAX\tmacro', 'WINT_MAX')
('WINT_MIN\tmacro', 'WINT_MIN')
('WNOHANG\tmacro', 'WNOHANG')
('WNOWAIT\tmacro', 'WNOWAIT')
('WORD_BIT\tmacro', 'WORD_BIT')
('WSTOPPED\tmacro', 'WSTOPPED')
('WSTOPSIG\tmacro', 'WSTOPSIG')
('WTERMSIG\tmacro', 'WTERMSIG')
('WUNTRACED\tmacro', 'WUNTRACED')
('W_EXITCODE\tmacro', 'W_EXITCODE')
('W_OK\tmacro', 'W_OK')
('W_STOPCODE\tmacro', 'W_STOPCODE')
('X_OK\tmacro', 'X_OK')
('_ACCESS_EXTENDED_MASK\tmacro', '_ACCESS_EXTENDED_MASK')
('_ALGOBASE_H\tmacro', '_ALGOBASE_H')
('_ALGO_H\tmacro', '_ALGO_H')
('_ALLOCATOR_H\tmacro', '_ALLOCATOR_H')
('_ALLOCA_H_\tmacro', '_ALLOCA_H_')
('_APPEND_OK\tmacro', '_APPEND_OK')
('_Atomic_word\ttypedef', '_Atomic_word')
('_BASIC_STRING_H\tmacro', '_BASIC_STRING_H')
('_BASIC_STRING_TCC\tmacro', '_BASIC_STRING_TCC')
('_BSD_I386__TYPES_H_\tmacro', '_BSD_I386__TYPES_H_')
('_BSD_MACHINE_ENDIAN_H_\tmacro', '_BSD_MACHINE_ENDIAN_H_')
('_BSD_MACHINE_SIGNAL_H_\tmacro', '_BSD_MACHINE_SIGNAL_H_')
('_BSD_MACHINE_TYPES_H_\tmacro', '_BSD_MACHINE_TYPES_H_')
('_BSD_MACHINE__TYPES_H_\tmacro', '_BSD_MACHINE__TYPES_H_')
('_BVECTOR_H\tmacro', '_BVECTOR_H')
('_CACHED_RUNES\tmacro', '_CACHED_RUNES')
('_CDEFS_H_\tmacro', '_CDEFS_H_')
('_CHAR_TRAITS_H\tmacro', '_CHAR_TRAITS_H')
('_CHOWN_OK\tmacro', '_CHOWN_OK')
('_CLOCK_T\tmacro', '_CLOCK_T')
('_CONCEPT_CHECK_H\tmacro', '_CONCEPT_CHECK_H')
('_CPP_TYPE_TRAITS_H\tmacro', '_CPP_TYPE_TRAITS_H')
('_CRMASK\tmacro', '_CRMASK')
('_CS_DARWIN_USER_CACHE_DIR\tmacro', '_CS_DARWIN_USER_CACHE_DIR')
('_CS_DARWIN_USER_DIR\tmacro', '_CS_DARWIN_USER_DIR')
('_CS_DARWIN_USER_TEMP_DIR\tmacro', '_CS_DARWIN_USER_TEMP_DIR')
('_CS_PATH\tmacro', '_CS_PATH')
('_CS_POSIX_V6_ILP32_OFF32_CFLAGS\tmacro', '_CS_POSIX_V6_ILP32_OFF32_CFLAGS')
('_CS_POSIX_V6_ILP32_OFF32_LDFLAGS\tmacro', '_CS_POSIX_V6_ILP32_OFF32_LDFLAGS')
('_CS_POSIX_V6_ILP32_OFF32_LIBS\tmacro', '_CS_POSIX_V6_ILP32_OFF32_LIBS')
('_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS\tmacro', '_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS')
('_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS\tmacro', '_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS')
('_CS_POSIX_V6_ILP32_OFFBIG_LIBS\tmacro', '_CS_POSIX_V6_ILP32_OFFBIG_LIBS')
('_CS_POSIX_V6_LP64_OFF64_CFLAGS\tmacro', '_CS_POSIX_V6_LP64_OFF64_CFLAGS')
('_CS_POSIX_V6_LP64_OFF64_LDFLAGS\tmacro', '_CS_POSIX_V6_LP64_OFF64_LDFLAGS')
('_CS_POSIX_V6_LP64_OFF64_LIBS\tmacro', '_CS_POSIX_V6_LP64_OFF64_LIBS')
('_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS\tmacro', '_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS')
('_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS\tmacro', '_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS')
('_CS_POSIX_V6_LPBIG_OFFBIG_LIBS\tmacro', '_CS_POSIX_V6_LPBIG_OFFBIG_LIBS')
('_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS\tmacro', '_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS')
('_CS_XBS5_ILP32_OFF32_CFLAGS\tmacro', '_CS_XBS5_ILP32_OFF32_CFLAGS')
('_CS_XBS5_ILP32_OFF32_LDFLAGS\tmacro', '_CS_XBS5_ILP32_OFF32_LDFLAGS')
('_CS_XBS5_ILP32_OFF32_LIBS\tmacro', '_CS_XBS5_ILP32_OFF32_LIBS')
('_CS_XBS5_ILP32_OFF32_LINTFLAGS\tmacro', '_CS_XBS5_ILP32_OFF32_LINTFLAGS')
('_CS_XBS5_ILP32_OFFBIG_CFLAGS\tmacro', '_CS_XBS5_ILP32_OFFBIG_CFLAGS')
('_CS_XBS5_ILP32_OFFBIG_LDFLAGS\tmacro', '_CS_XBS5_ILP32_OFFBIG_LDFLAGS')
('_CS_XBS5_ILP32_OFFBIG_LIBS\tmacro', '_CS_XBS5_ILP32_OFFBIG_LIBS')
('_CS_XBS5_ILP32_OFFBIG_LINTFLAGS\tmacro', '_CS_XBS5_ILP32_OFFBIG_LINTFLAGS')
('_CS_XBS5_LP64_OFF64_CFLAGS\tmacro', '_CS_XBS5_LP64_OFF64_CFLAGS')
('_CS_XBS5_LP64_OFF64_LDFLAGS\tmacro', '_CS_XBS5_LP64_OFF64_LDFLAGS')
('_CS_XBS5_LP64_OFF64_LIBS\tmacro', '_CS_XBS5_LP64_OFF64_LIBS')
('_CS_XBS5_LP64_OFF64_LINTFLAGS\tmacro', '_CS_XBS5_LP64_OFF64_LINTFLAGS')
('_CS_XBS5_LPBIG_OFFBIG_CFLAGS\tmacro', '_CS_XBS5_LPBIG_OFFBIG_CFLAGS')
('_CS_XBS5_LPBIG_OFFBIG_LDFLAGS\tmacro', '_CS_XBS5_LPBIG_OFFBIG_LDFLAGS')
('_CS_XBS5_LPBIG_OFFBIG_LIBS\tmacro', '_CS_XBS5_LPBIG_OFFBIG_LIBS')
('_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS\tmacro', '_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS')
('_CTYPE_A\tmacro', '_CTYPE_A')
('_CTYPE_B\tmacro', '_CTYPE_B')
('_CTYPE_C\tmacro', '_CTYPE_C')
('_CTYPE_D\tmacro', '_CTYPE_D')
('_CTYPE_G\tmacro', '_CTYPE_G')
('_CTYPE_H_\tmacro', '_CTYPE_H_')
('_CTYPE_I\tmacro', '_CTYPE_I')
('_CTYPE_L\tmacro', '_CTYPE_L')
('_CTYPE_P\tmacro', '_CTYPE_P')
('_CTYPE_Q\tmacro', '_CTYPE_Q')
('_CTYPE_R\tmacro', '_CTYPE_R')
('_CTYPE_S\tmacro', '_CTYPE_S')
('_CTYPE_SW0\tmacro', '_CTYPE_SW0')
('_CTYPE_SW1\tmacro', '_CTYPE_SW1')
('_CTYPE_SW2\tmacro', '_CTYPE_SW2')
('_CTYPE_SW3\tmacro', '_CTYPE_SW3')
('_CTYPE_SWM\tmacro', '_CTYPE_SWM')
('_CTYPE_SWS\tmacro', '_CTYPE_SWS')
('_CTYPE_T\tmacro', '_CTYPE_T')
('_CTYPE_U\tmacro', '_CTYPE_U')
('_CTYPE_X\tmacro', '_CTYPE_X')
('_CT_RUNE_T\tmacro', '_CT_RUNE_T')
('_CXXCONFIG\tmacro', '_CXXCONFIG')
('_CXX_ALLOCATOR_H\tmacro', '_CXX_ALLOCATOR_H')
('_C_IO_STDIO_H\tmacro', '_C_IO_STDIO_H')
('_C_LOCALE_H\tmacro', '_C_LOCALE_H')
('_CurrentRuneLocale\t_RuneLocale *', '_CurrentRuneLocale')
('_DARWIN_FEATURE_64_BIT_INODE\tmacro', '_DARWIN_FEATURE_64_BIT_INODE')
('_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE\tmacro', '_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE')
('_DARWIN_FEATURE_UNIX_CONFORMANCE\tmacro', '_DARWIN_FEATURE_UNIX_CONFORMANCE')
('_DELETE_OK\tmacro', '_DELETE_OK')
('_DEV_T\tmacro', '_DEV_T')
('_DTRACE_CXA_RUNTIME_H\tmacro', '_DTRACE_CXA_RUNTIME_H')
('_DefaultRuneLocale\t_RuneLocale', '_DefaultRuneLocale')
('_EXCEPTION_DEFINES_H\tmacro', '_EXCEPTION_DEFINES_H')
('_EXECUTE_OK\tmacro', '_EXECUTE_OK')
('_EXT_TYPE_TRAITS\tmacro', '_EXT_TYPE_TRAITS')
('_Exit(int)\tvoid', '_Exit(${1:int})')
('_FD_SET\tmacro', '_FD_SET')
('_FORTIFY_SOURCE\tmacro', '_FORTIFY_SOURCE')
('_FSTDIO\tmacro', '_FSTDIO')
('_FUNCTEXCEPT_H\tmacro', '_FUNCTEXCEPT_H')
('_FUNCTION_H\tmacro', '_FUNCTION_H')
('_GID_T\tmacro', '_GID_T')
('_GLIBCXX_ALGORITHM\tmacro', '_GLIBCXX_ALGORITHM')
('_GLIBCXX_ATOMICITY_H\tmacro', '_GLIBCXX_ATOMICITY_H')
('_GLIBCXX_ATOMIC_BUILTINS\tmacro', '_GLIBCXX_ATOMIC_BUILTINS')
('_GLIBCXX_ATOMIC_WORD_H\tmacro', '_GLIBCXX_ATOMIC_WORD_H')
('_GLIBCXX_BEGIN_LDBL_NAMESPACE\tmacro', '_GLIBCXX_BEGIN_LDBL_NAMESPACE')
('_GLIBCXX_BEGIN_NAMESPACE\tmacro', '_GLIBCXX_BEGIN_NAMESPACE')
('_GLIBCXX_BEGIN_NESTED_NAMESPACE\tmacro', '_GLIBCXX_BEGIN_NESTED_NAMESPACE')
('_GLIBCXX_CCTYPE\tmacro', '_GLIBCXX_CCTYPE')
('_GLIBCXX_CLIMITS\tmacro', '_GLIBCXX_CLIMITS')
('_GLIBCXX_CLOCALE\tmacro', '_GLIBCXX_CLOCALE')
('_GLIBCXX_CPU_DEFINES\tmacro', '_GLIBCXX_CPU_DEFINES')
('_GLIBCXX_CSTDARG\tmacro', '_GLIBCXX_CSTDARG')
('_GLIBCXX_CSTDDEF\tmacro', '_GLIBCXX_CSTDDEF')
('_GLIBCXX_CSTDIO\tmacro', '_GLIBCXX_CSTDIO')
('_GLIBCXX_CSTDLIB\tmacro', '_GLIBCXX_CSTDLIB')
('_GLIBCXX_CSTRING\tmacro', '_GLIBCXX_CSTRING')
('_GLIBCXX_CTIME\tmacro', '_GLIBCXX_CTIME')
('_GLIBCXX_CWCHAR\tmacro', '_GLIBCXX_CWCHAR')
('_GLIBCXX_DEBUG_ASSERT\tmacro', '_GLIBCXX_DEBUG_ASSERT')
('_GLIBCXX_DEBUG_MACRO_SWITCH_H\tmacro', '_GLIBCXX_DEBUG_MACRO_SWITCH_H')
('_GLIBCXX_DEBUG_ONLY\tmacro', '_GLIBCXX_DEBUG_ONLY')
('_GLIBCXX_DEBUG_PEDASSERT\tmacro', '_GLIBCXX_DEBUG_PEDASSERT')
('_GLIBCXX_END_LDBL_NAMESPACE\tmacro', '_GLIBCXX_END_LDBL_NAMESPACE')
('_GLIBCXX_END_NAMESPACE\tmacro', '_GLIBCXX_END_NAMESPACE')
('_GLIBCXX_END_NESTED_NAMESPACE\tmacro', '_GLIBCXX_END_NESTED_NAMESPACE')
('_GLIBCXX_EXT\tmacro', '_GLIBCXX_EXT')
('_GLIBCXX_EXTERN_TEMPLATE\tmacro', '_GLIBCXX_EXTERN_TEMPLATE')
('_GLIBCXX_FAST_MATH\tmacro', '_GLIBCXX_FAST_MATH')
('_GLIBCXX_GCC_GTHR_H\tmacro', '_GLIBCXX_GCC_GTHR_H')
('_GLIBCXX_GCC_GTHR_POSIX_H\tmacro', '_GLIBCXX_GCC_GTHR_POSIX_H')
('_GLIBCXX_GTHREAD_USE_WEAK\tmacro', '_GLIBCXX_GTHREAD_USE_WEAK')
('_GLIBCXX_HAVE_ACOSF\tmacro', '_GLIBCXX_HAVE_ACOSF')
('_GLIBCXX_HAVE_ACOSL\tmacro', '_GLIBCXX_HAVE_ACOSL')
('_GLIBCXX_HAVE_ASINF\tmacro', '_GLIBCXX_HAVE_ASINF')
('_GLIBCXX_HAVE_ASINL\tmacro', '_GLIBCXX_HAVE_ASINL')
('_GLIBCXX_HAVE_ATAN2F\tmacro', '_GLIBCXX_HAVE_ATAN2F')
('_GLIBCXX_HAVE_ATAN2L\tmacro', '_GLIBCXX_HAVE_ATAN2L')
('_GLIBCXX_HAVE_ATANF\tmacro', '_GLIBCXX_HAVE_ATANF')
('_GLIBCXX_HAVE_ATANL\tmacro', '_GLIBCXX_HAVE_ATANL')
('_GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\tmacro', '_GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY')
('_GLIBCXX_HAVE_CEILF\tmacro', '_GLIBCXX_HAVE_CEILF')
('_GLIBCXX_HAVE_CEILL\tmacro', '_GLIBCXX_HAVE_CEILL')
('_GLIBCXX_HAVE_COMPLEX_H\tmacro', '_GLIBCXX_HAVE_COMPLEX_H')
('_GLIBCXX_HAVE_COPYSIGN\tmacro', '_GLIBCXX_HAVE_COPYSIGN')
('_GLIBCXX_HAVE_COPYSIGNF\tmacro', '_GLIBCXX_HAVE_COPYSIGNF')
('_GLIBCXX_HAVE_COPYSIGNL\tmacro', '_GLIBCXX_HAVE_COPYSIGNL')
('_GLIBCXX_HAVE_COSF\tmacro', '_GLIBCXX_HAVE_COSF')
('_GLIBCXX_HAVE_COSHF\tmacro', '_GLIBCXX_HAVE_COSHF')
('_GLIBCXX_HAVE_COSHL\tmacro', '_GLIBCXX_HAVE_COSHL')
('_GLIBCXX_HAVE_COSL\tmacro', '_GLIBCXX_HAVE_COSL')
('_GLIBCXX_HAVE_EXPF\tmacro', '_GLIBCXX_HAVE_EXPF')
('_GLIBCXX_HAVE_EXPL\tmacro', '_GLIBCXX_HAVE_EXPL')
('_GLIBCXX_HAVE_FABSF\tmacro', '_GLIBCXX_HAVE_FABSF')
('_GLIBCXX_HAVE_FABSL\tmacro', '_GLIBCXX_HAVE_FABSL')
('_GLIBCXX_HAVE_FENV_H\tmacro', '_GLIBCXX_HAVE_FENV_H')
('_GLIBCXX_HAVE_FINITE\tmacro', '_GLIBCXX_HAVE_FINITE')
('_GLIBCXX_HAVE_FLOAT_H\tmacro', '_GLIBCXX_HAVE_FLOAT_H')
('_GLIBCXX_HAVE_FLOORF\tmacro', '_GLIBCXX_HAVE_FLOORF')
('_GLIBCXX_HAVE_FLOORL\tmacro', '_GLIBCXX_HAVE_FLOORL')
('_GLIBCXX_HAVE_FMODF\tmacro', '_GLIBCXX_HAVE_FMODF')
('_GLIBCXX_HAVE_FMODL\tmacro', '_GLIBCXX_HAVE_FMODL')
('_GLIBCXX_HAVE_FREXPF\tmacro', '_GLIBCXX_HAVE_FREXPF')
('_GLIBCXX_HAVE_FREXPL\tmacro', '_GLIBCXX_HAVE_FREXPL')
('_GLIBCXX_HAVE_GETIPINFO\tmacro', '_GLIBCXX_HAVE_GETIPINFO')
('_GLIBCXX_HAVE_GETPAGESIZE\tmacro', '_GLIBCXX_HAVE_GETPAGESIZE')
('_GLIBCXX_HAVE_GTHR_DEFAULT\tmacro', '_GLIBCXX_HAVE_GTHR_DEFAULT')
('_GLIBCXX_HAVE_HYPOT\tmacro', '_GLIBCXX_HAVE_HYPOT')
('_GLIBCXX_HAVE_HYPOTF\tmacro', '_GLIBCXX_HAVE_HYPOTF')
('_GLIBCXX_HAVE_HYPOTL\tmacro', '_GLIBCXX_HAVE_HYPOTL')
('_GLIBCXX_HAVE_ICONV\tmacro', '_GLIBCXX_HAVE_ICONV')
('_GLIBCXX_HAVE_ICONV_CLOSE\tmacro', '_GLIBCXX_HAVE_ICONV_CLOSE')
('_GLIBCXX_HAVE_ICONV_OPEN\tmacro', '_GLIBCXX_HAVE_ICONV_OPEN')
('_GLIBCXX_HAVE_INT64_T\tmacro', '_GLIBCXX_HAVE_INT64_T')
('_GLIBCXX_HAVE_INTTYPES_H\tmacro', '_GLIBCXX_HAVE_INTTYPES_H')
('_GLIBCXX_HAVE_ISINF\tmacro', '_GLIBCXX_HAVE_ISINF')
('_GLIBCXX_HAVE_ISNAN\tmacro', '_GLIBCXX_HAVE_ISNAN')
('_GLIBCXX_HAVE_ISWBLANK\tmacro', '_GLIBCXX_HAVE_ISWBLANK')
('_GLIBCXX_HAVE_LC_MESSAGES\tmacro', '_GLIBCXX_HAVE_LC_MESSAGES')
('_GLIBCXX_HAVE_LDEXPF\tmacro', '_GLIBCXX_HAVE_LDEXPF')
('_GLIBCXX_HAVE_LDEXPL\tmacro', '_GLIBCXX_HAVE_LDEXPL')
('_GLIBCXX_HAVE_LIBM\tmacro', '_GLIBCXX_HAVE_LIBM')
('_GLIBCXX_HAVE_LIMIT_AS\tmacro', '_GLIBCXX_HAVE_LIMIT_AS')
('_GLIBCXX_HAVE_LIMIT_DATA\tmacro', '_GLIBCXX_HAVE_LIMIT_DATA')
('_GLIBCXX_HAVE_LIMIT_FSIZE\tmacro', '_GLIBCXX_HAVE_LIMIT_FSIZE')
('_GLIBCXX_HAVE_LIMIT_RSS\tmacro', '_GLIBCXX_HAVE_LIMIT_RSS')
('_GLIBCXX_HAVE_LIMIT_VMEM\tmacro', '_GLIBCXX_HAVE_LIMIT_VMEM')
('_GLIBCXX_HAVE_LOCALE_H\tmacro', '_GLIBCXX_HAVE_LOCALE_H')
('_GLIBCXX_HAVE_LOG10F\tmacro', '_GLIBCXX_HAVE_LOG10F')
('_GLIBCXX_HAVE_LOG10L\tmacro', '_GLIBCXX_HAVE_LOG10L')
('_GLIBCXX_HAVE_LOGF\tmacro', '_GLIBCXX_HAVE_LOGF')
('_GLIBCXX_HAVE_LOGL\tmacro', '_GLIBCXX_HAVE_LOGL')
('_GLIBCXX_HAVE_MACHINE_ENDIAN_H\tmacro', '_GLIBCXX_HAVE_MACHINE_ENDIAN_H')
('_GLIBCXX_HAVE_MACHINE_PARAM_H\tmacro', '_GLIBCXX_HAVE_MACHINE_PARAM_H')
('_GLIBCXX_HAVE_MBSTATE_T\tmacro', '_GLIBCXX_HAVE_MBSTATE_T')
('_GLIBCXX_HAVE_MEMORY_H\tmacro', '_GLIBCXX_HAVE_MEMORY_H')
('_GLIBCXX_HAVE_MMAP\tmacro', '_GLIBCXX_HAVE_MMAP')
('_GLIBCXX_HAVE_MODF\tmacro', '_GLIBCXX_HAVE_MODF')
('_GLIBCXX_HAVE_MODFF\tmacro', '_GLIBCXX_HAVE_MODFF')
('_GLIBCXX_HAVE_MODFL\tmacro', '_GLIBCXX_HAVE_MODFL')
('_GLIBCXX_HAVE_NL_LANGINFO\tmacro', '_GLIBCXX_HAVE_NL_LANGINFO')
('_GLIBCXX_HAVE_POLL\tmacro', '_GLIBCXX_HAVE_POLL')
('_GLIBCXX_HAVE_POWF\tmacro', '_GLIBCXX_HAVE_POWF')
('_GLIBCXX_HAVE_POWL\tmacro', '_GLIBCXX_HAVE_POWL')
('_GLIBCXX_HAVE_SETENV\tmacro', '_GLIBCXX_HAVE_SETENV')
('_GLIBCXX_HAVE_SIGSETJMP\tmacro', '_GLIBCXX_HAVE_SIGSETJMP')
('_GLIBCXX_HAVE_SINF\tmacro', '_GLIBCXX_HAVE_SINF')
('_GLIBCXX_HAVE_SINHF\tmacro', '_GLIBCXX_HAVE_SINHF')
('_GLIBCXX_HAVE_SINHL\tmacro', '_GLIBCXX_HAVE_SINHL')
('_GLIBCXX_HAVE_SINL\tmacro', '_GLIBCXX_HAVE_SINL')
('_GLIBCXX_HAVE_SQRTF\tmacro', '_GLIBCXX_HAVE_SQRTF')
('_GLIBCXX_HAVE_SQRTL\tmacro', '_GLIBCXX_HAVE_SQRTL')
('_GLIBCXX_HAVE_STDBOOL_H\tmacro', '_GLIBCXX_HAVE_STDBOOL_H')
('_GLIBCXX_HAVE_STDINT_H\tmacro', '_GLIBCXX_HAVE_STDINT_H')
('_GLIBCXX_HAVE_STDLIB_H\tmacro', '_GLIBCXX_HAVE_STDLIB_H')
('_GLIBCXX_HAVE_STRERROR_R\tmacro', '_GLIBCXX_HAVE_STRERROR_R')
('_GLIBCXX_HAVE_STRINGS_H\tmacro', '_GLIBCXX_HAVE_STRINGS_H')
('_GLIBCXX_HAVE_STRING_H\tmacro', '_GLIBCXX_HAVE_STRING_H')
('_GLIBCXX_HAVE_STRTOF\tmacro', '_GLIBCXX_HAVE_STRTOF')
('_GLIBCXX_HAVE_STRTOLD\tmacro', '_GLIBCXX_HAVE_STRTOLD')
('_GLIBCXX_HAVE_SYS_FILIO_H\tmacro', '_GLIBCXX_HAVE_SYS_FILIO_H')
('_GLIBCXX_HAVE_SYS_IOCTL_H\tmacro', '_GLIBCXX_HAVE_SYS_IOCTL_H')
('_GLIBCXX_HAVE_SYS_IPC_H\tmacro', '_GLIBCXX_HAVE_SYS_IPC_H')
('_GLIBCXX_HAVE_SYS_RESOURCE_H\tmacro', '_GLIBCXX_HAVE_SYS_RESOURCE_H')
('_GLIBCXX_HAVE_SYS_SEM_H\tmacro', '_GLIBCXX_HAVE_SYS_SEM_H')
('_GLIBCXX_HAVE_SYS_STAT_H\tmacro', '_GLIBCXX_HAVE_SYS_STAT_H')
('_GLIBCXX_HAVE_SYS_TIME_H\tmacro', '_GLIBCXX_HAVE_SYS_TIME_H')
('_GLIBCXX_HAVE_SYS_TYPES_H\tmacro', '_GLIBCXX_HAVE_SYS_TYPES_H')
('_GLIBCXX_HAVE_SYS_UIO_H\tmacro', '_GLIBCXX_HAVE_SYS_UIO_H')
('_GLIBCXX_HAVE_S_ISREG\tmacro', '_GLIBCXX_HAVE_S_ISREG')
('_GLIBCXX_HAVE_TANF\tmacro', '_GLIBCXX_HAVE_TANF')
('_GLIBCXX_HAVE_TANHF\tmacro', '_GLIBCXX_HAVE_TANHF')
('_GLIBCXX_HAVE_TANHL\tmacro', '_GLIBCXX_HAVE_TANHL')
('_GLIBCXX_HAVE_TANL\tmacro', '_GLIBCXX_HAVE_TANL')
('_GLIBCXX_HAVE_UNISTD_H\tmacro', '_GLIBCXX_HAVE_UNISTD_H')
('_GLIBCXX_HAVE_VFWSCANF\tmacro', '_GLIBCXX_HAVE_VFWSCANF')
('_GLIBCXX_HAVE_VSWSCANF\tmacro', '_GLIBCXX_HAVE_VSWSCANF')
('_GLIBCXX_HAVE_VWSCANF\tmacro', '_GLIBCXX_HAVE_VWSCANF')
('_GLIBCXX_HAVE_WCHAR_H\tmacro', '_GLIBCXX_HAVE_WCHAR_H')
('_GLIBCXX_HAVE_WCSTOF\tmacro', '_GLIBCXX_HAVE_WCSTOF')
('_GLIBCXX_HAVE_WCTYPE_H\tmacro', '_GLIBCXX_HAVE_WCTYPE_H')
('_GLIBCXX_HAVE_WRITEV\tmacro', '_GLIBCXX_HAVE_WRITEV')
('_GLIBCXX_HAVE___BUILTIN_ABS\tmacro', '_GLIBCXX_HAVE___BUILTIN_ABS')
('_GLIBCXX_HAVE___BUILTIN_COS\tmacro', '_GLIBCXX_HAVE___BUILTIN_COS')
('_GLIBCXX_HAVE___BUILTIN_COSF\tmacro', '_GLIBCXX_HAVE___BUILTIN_COSF')
('_GLIBCXX_HAVE___BUILTIN_COSL\tmacro', '_GLIBCXX_HAVE___BUILTIN_COSL')
('_GLIBCXX_HAVE___BUILTIN_FABS\tmacro', '_GLIBCXX_HAVE___BUILTIN_FABS')
('_GLIBCXX_HAVE___BUILTIN_FABSF\tmacro', '_GLIBCXX_HAVE___BUILTIN_FABSF')
('_GLIBCXX_HAVE___BUILTIN_FABSL\tmacro', '_GLIBCXX_HAVE___BUILTIN_FABSL')
('_GLIBCXX_HAVE___BUILTIN_LABS\tmacro', '_GLIBCXX_HAVE___BUILTIN_LABS')
('_GLIBCXX_HAVE___BUILTIN_SIN\tmacro', '_GLIBCXX_HAVE___BUILTIN_SIN')
('_GLIBCXX_HAVE___BUILTIN_SINF\tmacro', '_GLIBCXX_HAVE___BUILTIN_SINF')
('_GLIBCXX_HAVE___BUILTIN_SINL\tmacro', '_GLIBCXX_HAVE___BUILTIN_SINL')
('_GLIBCXX_HAVE___BUILTIN_SQRT\tmacro', '_GLIBCXX_HAVE___BUILTIN_SQRT')
('_GLIBCXX_HAVE___BUILTIN_SQRTF\tmacro', '_GLIBCXX_HAVE___BUILTIN_SQRTF')
('_GLIBCXX_HAVE___BUILTIN_SQRTL\tmacro', '_GLIBCXX_HAVE___BUILTIN_SQRTL')
('_GLIBCXX_HAVE___SIGNBITF\tmacro', '_GLIBCXX_HAVE___SIGNBITF')
('_GLIBCXX_HAVE___SIGNBITL\tmacro', '_GLIBCXX_HAVE___SIGNBITL')
('_GLIBCXX_HOSTED\tmacro', '_GLIBCXX_HOSTED')
('_GLIBCXX_IOSFWD\tmacro', '_GLIBCXX_IOSFWD')
('_GLIBCXX_LDBL_NAMESPACE\tmacro', '_GLIBCXX_LDBL_NAMESPACE')
('_GLIBCXX_MEMORY\tmacro', '_GLIBCXX_MEMORY')
('_GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\tmacro', '_GLIBCXX_NAMESPACE_ASSOCIATION_VERSION')
('_GLIBCXX_NUMERIC_LIMITS\tmacro', '_GLIBCXX_NUMERIC_LIMITS')
('_GLIBCXX_NUM_CATEGORIES\tmacro', '_GLIBCXX_NUM_CATEGORIES')
('_GLIBCXX_OS_DEFINES\tmacro', '_GLIBCXX_OS_DEFINES')
('_GLIBCXX_PACKAGE_BUGREPORT\tmacro', '_GLIBCXX_PACKAGE_BUGREPORT')
('_GLIBCXX_PACKAGE_NAME\tmacro', '_GLIBCXX_PACKAGE_NAME')
('_GLIBCXX_PACKAGE_STRING\tmacro', '_GLIBCXX_PACKAGE_STRING')
('_GLIBCXX_PACKAGE_TARNAME\tmacro', '_GLIBCXX_PACKAGE_TARNAME')
('_GLIBCXX_PACKAGE__GLIBCXX_VERSION\tmacro', '_GLIBCXX_PACKAGE__GLIBCXX_VERSION')
('_GLIBCXX_POSTYPES_H\tmacro', '_GLIBCXX_POSTYPES_H')
('_GLIBCXX_READ_MEM_BARRIER\tmacro', '_GLIBCXX_READ_MEM_BARRIER')
('_GLIBCXX_RES_LIMITS\tmacro', '_GLIBCXX_RES_LIMITS')
('_GLIBCXX_STD\tmacro', '_GLIBCXX_STD')
('_GLIBCXX_STRING\tmacro', '_GLIBCXX_STRING')
('_GLIBCXX_SYMVER\tmacro', '_GLIBCXX_SYMVER')
('_GLIBCXX_SYMVER_DARWIN\tmacro', '_GLIBCXX_SYMVER_DARWIN')
('_GLIBCXX_USE_C99\tmacro', '_GLIBCXX_USE_C99')
('_GLIBCXX_USE_C99_COMPLEX\tmacro', '_GLIBCXX_USE_C99_COMPLEX')
('_GLIBCXX_USE_C99_COMPLEX_TR1\tmacro', '_GLIBCXX_USE_C99_COMPLEX_TR1')
('_GLIBCXX_USE_C99_CTYPE_TR1\tmacro', '_GLIBCXX_USE_C99_CTYPE_TR1')
('_GLIBCXX_USE_C99_FENV_TR1\tmacro', '_GLIBCXX_USE_C99_FENV_TR1')
('_GLIBCXX_USE_C99_INTTYPES_TR1\tmacro', '_GLIBCXX_USE_C99_INTTYPES_TR1')
('_GLIBCXX_USE_C99_MATH\tmacro', '_GLIBCXX_USE_C99_MATH')
('_GLIBCXX_USE_C99_MATH_TR1\tmacro', '_GLIBCXX_USE_C99_MATH_TR1')
('_GLIBCXX_USE_C99_STDINT_TR1\tmacro', '_GLIBCXX_USE_C99_STDINT_TR1')
('_GLIBCXX_USE_ICONV\tmacro', '_GLIBCXX_USE_ICONV')
('_GLIBCXX_USE_LONG_LONG\tmacro', '_GLIBCXX_USE_LONG_LONG')
('_GLIBCXX_USE_WCHAR_T\tmacro', '_GLIBCXX_USE_WCHAR_T')
('_GLIBCXX_UTILITY\tmacro', '_GLIBCXX_UTILITY')
('_GLIBCXX_VECTOR\tmacro', '_GLIBCXX_VECTOR')
('_GLIBCXX_VISIBILITY\tmacro', '_GLIBCXX_VISIBILITY')
('_GLIBCXX_VISIBILITY_DEFAULT\tmacro', '_GLIBCXX_VISIBILITY_DEFAULT')
('_GLIBCXX_WEAK_DEFINITION\tmacro', '_GLIBCXX_WEAK_DEFINITION')
('_GLIBCXX_WRITE_MEM_BARRIER\tmacro', '_GLIBCXX_WRITE_MEM_BARRIER')
('_I386_LIMITS_H_\tmacro', '_I386_LIMITS_H_')
('_I386_SIGNAL_H_\tmacro', '_I386_SIGNAL_H_')
('_I386__ENDIAN_H_\tmacro', '_I386__ENDIAN_H_')
('_I386__LIMITS_H_\tmacro', '_I386__LIMITS_H_')
('_ID_T\tmacro', '_ID_T')
('_INT16_T\tmacro', '_INT16_T')
('_INT32_T\tmacro', '_INT32_T')
('_INT64_T\tmacro', '_INT64_T')
('_INT8_T\tmacro', '_INT8_T')
('_INTMAX_T\tmacro', '_INTMAX_T')
('_INTPTR_T\tmacro', '_INTPTR_T')
('_IOFBF\tmacro', '_IOFBF')
('_IOLBF\tmacro', '_IOLBF')
('_IONBF\tmacro', '_IONBF')
('_ITERATOR_BASE_FUNCS_H\tmacro', '_ITERATOR_BASE_FUNCS_H')
('_ITERATOR_BASE_TYPES_H\tmacro', '_ITERATOR_BASE_TYPES_H')
('_ITERATOR_H\tmacro', '_ITERATOR_H')
('_LC_LAST\tmacro', '_LC_LAST')
('_LIMITS_H_\tmacro', '_LIMITS_H_')
('_LOCALE_H_\tmacro', '_LOCALE_H_')
('_LP64\tmacro', '_LP64')
('_MACHTYPES_H_\tmacro', '_MACHTYPES_H_')
('_MACH_I386__STRUCTS_H_\tmacro', '_MACH_I386__STRUCTS_H_')
('_MACH_PORT_T\tmacro', '_MACH_PORT_T')
('_MBSTATE_T\tmacro', '_MBSTATE_T')
('_MCONTEXT_T\tmacro', '_MCONTEXT_T')
('_MODE_T\tmacro', '_MODE_T')
('_NEW\tmacro', '_NEW')
('_NEW_ALLOCATOR_H\tmacro', '_NEW_ALLOCATOR_H')
('_OFF_T\tmacro', '_OFF_T')
('_OSSwapInt16(__uint16_t _data)\t__uint16_t', '_OSSwapInt16(${1:__uint16_t _data})')
('_OSSwapInt32(__uint32_t _data)\t__uint32_t', '_OSSwapInt32(${1:__uint32_t _data})')
('_OSSwapInt64(__uint64_t _data)\t__uint64_t', '_OSSwapInt64(${1:__uint64_t _data})')
('_OSTREAM_INSERT_H\tmacro', '_OSTREAM_INSERT_H')
('_OS__OSBYTEORDERI386_H\tmacro', '_OS__OSBYTEORDERI386_H')
('_OS__OSBYTEORDER_H\tmacro', '_OS__OSBYTEORDER_H')
('_PAIR_H\tmacro', '_PAIR_H')
('_PC_2_SYMLINKS\tmacro', '_PC_2_SYMLINKS')
('_PC_ALLOC_SIZE_MIN\tmacro', '_PC_ALLOC_SIZE_MIN')
('_PC_ASYNC_IO\tmacro', '_PC_ASYNC_IO')
('_PC_AUTH_OPAQUE_NP\tmacro', '_PC_AUTH_OPAQUE_NP')
('_PC_CASE_PRESERVING\tmacro', '_PC_CASE_PRESERVING')
('_PC_CASE_SENSITIVE\tmacro', '_PC_CASE_SENSITIVE')
('_PC_CHOWN_RESTRICTED\tmacro', '_PC_CHOWN_RESTRICTED')
('_PC_EXTENDED_SECURITY_NP\tmacro', '_PC_EXTENDED_SECURITY_NP')
('_PC_FILESIZEBITS\tmacro', '_PC_FILESIZEBITS')
('_PC_LINK_MAX\tmacro', '_PC_LINK_MAX')
('_PC_MAX_CANON\tmacro', '_PC_MAX_CANON')
('_PC_MAX_INPUT\tmacro', '_PC_MAX_INPUT')
('_PC_NAME_CHARS_MAX\tmacro', '_PC_NAME_CHARS_MAX')
('_PC_NAME_MAX\tmacro', '_PC_NAME_MAX')
('_PC_NO_TRUNC\tmacro', '_PC_NO_TRUNC')
('_PC_PATH_MAX\tmacro', '_PC_PATH_MAX')
('_PC_PIPE_BUF\tmacro', '_PC_PIPE_BUF')
('_PC_PRIO_IO\tmacro', '_PC_PRIO_IO')
('_PC_REC_INCR_XFER_SIZE\tmacro', '_PC_REC_INCR_XFER_SIZE')
('_PC_REC_MAX_XFER_SIZE\tmacro', '_PC_REC_MAX_XFER_SIZE')
('_PC_REC_MIN_XFER_SIZE\tmacro', '_PC_REC_MIN_XFER_SIZE')
('_PC_REC_XFER_ALIGN\tmacro', '_PC_REC_XFER_ALIGN')
('_PC_SYMLINK_MAX\tmacro', '_PC_SYMLINK_MAX')
('_PC_SYNC_IO\tmacro', '_PC_SYNC_IO')
('_PC_VDISABLE\tmacro', '_PC_VDISABLE')
('_PC_XATTR_SIZE_BITS\tmacro', '_PC_XATTR_SIZE_BITS')
('_PID_T\tmacro', '_PID_T')
('_POSIX2_BC_BASE_MAX\tmacro', '_POSIX2_BC_BASE_MAX')
('_POSIX2_BC_DIM_MAX\tmacro', '_POSIX2_BC_DIM_MAX')
('_POSIX2_BC_SCALE_MAX\tmacro', '_POSIX2_BC_SCALE_MAX')
('_POSIX2_BC_STRING_MAX\tmacro', '_POSIX2_BC_STRING_MAX')
('_POSIX2_CHARCLASS_NAME_MAX\tmacro', '_POSIX2_CHARCLASS_NAME_MAX')
('_POSIX2_CHAR_TERM\tmacro', '_POSIX2_CHAR_TERM')
('_POSIX2_COLL_WEIGHTS_MAX\tmacro', '_POSIX2_COLL_WEIGHTS_MAX')
('_POSIX2_C_BIND\tmacro', '_POSIX2_C_BIND')
('_POSIX2_C_DEV\tmacro', '_POSIX2_C_DEV')
('_POSIX2_EQUIV_CLASS_MAX\tmacro', '_POSIX2_EQUIV_CLASS_MAX')
('_POSIX2_EXPR_NEST_MAX\tmacro', '_POSIX2_EXPR_NEST_MAX')
('_POSIX2_FORT_DEV\tmacro', '_POSIX2_FORT_DEV')
('_POSIX2_FORT_RUN\tmacro', '_POSIX2_FORT_RUN')
('_POSIX2_LINE_MAX\tmacro', '_POSIX2_LINE_MAX')
('_POSIX2_LOCALEDEF\tmacro', '_POSIX2_LOCALEDEF')
('_POSIX2_PBS\tmacro', '_POSIX2_PBS')
('_POSIX2_PBS_ACCOUNTING\tmacro', '_POSIX2_PBS_ACCOUNTING')
('_POSIX2_PBS_CHECKPOINT\tmacro', '_POSIX2_PBS_CHECKPOINT')
('_POSIX2_PBS_LOCATE\tmacro', '_POSIX2_PBS_LOCATE')
('_POSIX2_PBS_MESSAGE\tmacro', '_POSIX2_PBS_MESSAGE')
('_POSIX2_PBS_TRACK\tmacro', '_POSIX2_PBS_TRACK')
('_POSIX2_RE_DUP_MAX\tmacro', '_POSIX2_RE_DUP_MAX')
('_POSIX2_SW_DEV\tmacro', '_POSIX2_SW_DEV')
('_POSIX2_UPE\tmacro', '_POSIX2_UPE')
('_POSIX2_VERSION\tmacro', '_POSIX2_VERSION')
('_POSIX_ADVISORY_INFO\tmacro', '_POSIX_ADVISORY_INFO')
('_POSIX_AIO_LISTIO_MAX\tmacro', '_POSIX_AIO_LISTIO_MAX')
('_POSIX_AIO_MAX\tmacro', '_POSIX_AIO_MAX')
('_POSIX_ARG_MAX\tmacro', '_POSIX_ARG_MAX')
('_POSIX_ASYNCHRONOUS_IO\tmacro', '_POSIX_ASYNCHRONOUS_IO')
('_POSIX_BARRIERS\tmacro', '_POSIX_BARRIERS')
('_POSIX_CHILD_MAX\tmacro', '_POSIX_CHILD_MAX')
('_POSIX_CHOWN_RESTRICTED\tmacro', '_POSIX_CHOWN_RESTRICTED')
('_POSIX_CLOCK_SELECTION\tmacro', '_POSIX_CLOCK_SELECTION')
('_POSIX_CPUTIME\tmacro', '_POSIX_CPUTIME')
('_POSIX_DELAYTIMER_MAX\tmacro', '_POSIX_DELAYTIMER_MAX')
('_POSIX_FSYNC\tmacro', '_POSIX_FSYNC')
('_POSIX_HOST_NAME_MAX\tmacro', '_POSIX_HOST_NAME_MAX')
('_POSIX_IPV6\tmacro', '_POSIX_IPV6')
('_POSIX_JOB_CONTROL\tmacro', '_POSIX_JOB_CONTROL')
('_POSIX_LINK_MAX\tmacro', '_POSIX_LINK_MAX')
('_POSIX_LOGIN_NAME_MAX\tmacro', '_POSIX_LOGIN_NAME_MAX')
('_POSIX_MAPPED_FILES\tmacro', '_POSIX_MAPPED_FILES')
('_POSIX_MAX_CANON\tmacro', '_POSIX_MAX_CANON')
('_POSIX_MAX_INPUT\tmacro', '_POSIX_MAX_INPUT')
('_POSIX_MEMLOCK\tmacro', '_POSIX_MEMLOCK')
('_POSIX_MEMLOCK_RANGE\tmacro', '_POSIX_MEMLOCK_RANGE')
('_POSIX_MEMORY_PROTECTION\tmacro', '_POSIX_MEMORY_PROTECTION')
('_POSIX_MESSAGE_PASSING\tmacro', '_POSIX_MESSAGE_PASSING')
('_POSIX_MONOTONIC_CLOCK\tmacro', '_POSIX_MONOTONIC_CLOCK')
('_POSIX_MQ_OPEN_MAX\tmacro', '_POSIX_MQ_OPEN_MAX')
('_POSIX_MQ_PRIO_MAX\tmacro', '_POSIX_MQ_PRIO_MAX')
('_POSIX_NAME_MAX\tmacro', '_POSIX_NAME_MAX')
('_POSIX_NGROUPS_MAX\tmacro', '_POSIX_NGROUPS_MAX')
('_POSIX_NO_TRUNC\tmacro', '_POSIX_NO_TRUNC')
('_POSIX_OPEN_MAX\tmacro', '_POSIX_OPEN_MAX')
('_POSIX_PATH_MAX\tmacro', '_POSIX_PATH_MAX')
('_POSIX_PIPE_BUF\tmacro', '_POSIX_PIPE_BUF')
('_POSIX_PRIORITIZED_IO\tmacro', '_POSIX_PRIORITIZED_IO')
('_POSIX_PRIORITY_SCHEDULING\tmacro', '_POSIX_PRIORITY_SCHEDULING')
('_POSIX_RAW_SOCKETS\tmacro', '_POSIX_RAW_SOCKETS')
('_POSIX_READER_WRITER_LOCKS\tmacro', '_POSIX_READER_WRITER_LOCKS')
('_POSIX_REALTIME_SIGNALS\tmacro', '_POSIX_REALTIME_SIGNALS')
('_POSIX_REGEXP\tmacro', '_POSIX_REGEXP')
('_POSIX_RE_DUP_MAX\tmacro', '_POSIX_RE_DUP_MAX')
('_POSIX_RTSIG_MAX\tmacro', '_POSIX_RTSIG_MAX')
('_POSIX_SAVED_IDS\tmacro', '_POSIX_SAVED_IDS')
('_POSIX_SEMAPHORES\tmacro', '_POSIX_SEMAPHORES')
('_POSIX_SEM_NSEMS_MAX\tmacro', '_POSIX_SEM_NSEMS_MAX')
('_POSIX_SEM_VALUE_MAX\tmacro', '_POSIX_SEM_VALUE_MAX')
('_POSIX_SHARED_MEMORY_OBJECTS\tmacro', '_POSIX_SHARED_MEMORY_OBJECTS')
('_POSIX_SHELL\tmacro', '_POSIX_SHELL')
('_POSIX_SIGQUEUE_MAX\tmacro', '_POSIX_SIGQUEUE_MAX')
('_POSIX_SPAWN\tmacro', '_POSIX_SPAWN')
('_POSIX_SPIN_LOCKS\tmacro', '_POSIX_SPIN_LOCKS')
('_POSIX_SPORADIC_SERVER\tmacro', '_POSIX_SPORADIC_SERVER')
('_POSIX_SSIZE_MAX\tmacro', '_POSIX_SSIZE_MAX')
('_POSIX_SS_REPL_MAX\tmacro', '_POSIX_SS_REPL_MAX')
('_POSIX_STREAM_MAX\tmacro', '_POSIX_STREAM_MAX')
('_POSIX_SYMLINK_MAX\tmacro', '_POSIX_SYMLINK_MAX')
('_POSIX_SYMLOOP_MAX\tmacro', '_POSIX_SYMLOOP_MAX')
('_POSIX_SYNCHRONIZED_IO\tmacro', '_POSIX_SYNCHRONIZED_IO')
('_POSIX_THREADS\tmacro', '_POSIX_THREADS')
('_POSIX_THREAD_ATTR_STACKADDR\tmacro', '_POSIX_THREAD_ATTR_STACKADDR')
('_POSIX_THREAD_ATTR_STACKSIZE\tmacro', '_POSIX_THREAD_ATTR_STACKSIZE')
('_POSIX_THREAD_CPUTIME\tmacro', '_POSIX_THREAD_CPUTIME')
('_POSIX_THREAD_DESTRUCTOR_ITERATIONS\tmacro', '_POSIX_THREAD_DESTRUCTOR_ITERATIONS')
('_POSIX_THREAD_KEYS_MAX\tmacro', '_POSIX_THREAD_KEYS_MAX')
('_POSIX_THREAD_PRIORITY_SCHEDULING\tmacro', '_POSIX_THREAD_PRIORITY_SCHEDULING')
('_POSIX_THREAD_PRIO_INHERIT\tmacro', '_POSIX_THREAD_PRIO_INHERIT')
('_POSIX_THREAD_PRIO_PROTECT\tmacro', '_POSIX_THREAD_PRIO_PROTECT')
('_POSIX_THREAD_PROCESS_SHARED\tmacro', '_POSIX_THREAD_PROCESS_SHARED')
('_POSIX_THREAD_SAFE_FUNCTIONS\tmacro', '_POSIX_THREAD_SAFE_FUNCTIONS')
('_POSIX_THREAD_SPORADIC_SERVER\tmacro', '_POSIX_THREAD_SPORADIC_SERVER')
('_POSIX_THREAD_THREADS_MAX\tmacro', '_POSIX_THREAD_THREADS_MAX')
('_POSIX_TIMEOUTS\tmacro', '_POSIX_TIMEOUTS')
('_POSIX_TIMERS\tmacro', '_POSIX_TIMERS')
('_POSIX_TIMER_MAX\tmacro', '_POSIX_TIMER_MAX')
('_POSIX_TRACE\tmacro', '_POSIX_TRACE')
('_POSIX_TRACE_EVENT_FILTER\tmacro', '_POSIX_TRACE_EVENT_FILTER')
('_POSIX_TRACE_EVENT_NAME_MAX\tmacro', '_POSIX_TRACE_EVENT_NAME_MAX')
('_POSIX_TRACE_INHERIT\tmacro', '_POSIX_TRACE_INHERIT')
('_POSIX_TRACE_LOG\tmacro', '_POSIX_TRACE_LOG')
('_POSIX_TRACE_NAME_MAX\tmacro', '_POSIX_TRACE_NAME_MAX')
('_POSIX_TRACE_SYS_MAX\tmacro', '_POSIX_TRACE_SYS_MAX')
('_POSIX_TRACE_USER_EVENT_MAX\tmacro', '_POSIX_TRACE_USER_EVENT_MAX')
('_POSIX_TTY_NAME_MAX\tmacro', '_POSIX_TTY_NAME_MAX')
('_POSIX_TYPED_MEMORY_OBJECTS\tmacro', '_POSIX_TYPED_MEMORY_OBJECTS')
('_POSIX_TZNAME_MAX\tmacro', '_POSIX_TZNAME_MAX')
('_POSIX_V6_ILP32_OFF32\tmacro', '_POSIX_V6_ILP32_OFF32')
('_POSIX_V6_ILP32_OFFBIG\tmacro', '_POSIX_V6_ILP32_OFFBIG')
('_POSIX_V6_LP64_OFF64\tmacro', '_POSIX_V6_LP64_OFF64')
('_POSIX_V6_LPBIG_OFFBIG\tmacro', '_POSIX_V6_LPBIG_OFFBIG')
('_POSIX_V7_ILP32_OFF32\tmacro', '_POSIX_V7_ILP32_OFF32')
('_POSIX_V7_ILP32_OFFBIG\tmacro', '_POSIX_V7_ILP32_OFFBIG')
('_POSIX_V7_LP64_OFF64\tmacro', '_POSIX_V7_LP64_OFF64')
('_POSIX_V7_LPBIG_OFFBIG\tmacro', '_POSIX_V7_LPBIG_OFFBIG')
('_POSIX_VDISABLE\tmacro', '_POSIX_VDISABLE')
('_POSIX_VERSION\tmacro', '_POSIX_VERSION')
('_PTHREAD_ATTR_T\tmacro', '_PTHREAD_ATTR_T')
('_PTHREAD_CONDATTR_T\tmacro', '_PTHREAD_CONDATTR_T')
('_PTHREAD_COND_SIG_init\tmacro', '_PTHREAD_COND_SIG_init')
('_PTHREAD_COND_T\tmacro', '_PTHREAD_COND_T')
('_PTHREAD_ERRORCHECK_MUTEX_SIG_init\tmacro', '_PTHREAD_ERRORCHECK_MUTEX_SIG_init')
('_PTHREAD_FIRSTFIT_MUTEX_SIG_init\tmacro', '_PTHREAD_FIRSTFIT_MUTEX_SIG_init')
('_PTHREAD_H\tmacro', '_PTHREAD_H')
('_PTHREAD_IMPL_H_\tmacro', '_PTHREAD_IMPL_H_')
('_PTHREAD_KEY_T\tmacro', '_PTHREAD_KEY_T')
('_PTHREAD_MUTEXATTR_T\tmacro', '_PTHREAD_MUTEXATTR_T')
('_PTHREAD_MUTEX_SIG_init\tmacro', '_PTHREAD_MUTEX_SIG_init')
('_PTHREAD_MUTEX_T\tmacro', '_PTHREAD_MUTEX_T')
('_PTHREAD_ONCE_SIG_init\tmacro', '_PTHREAD_ONCE_SIG_init')
('_PTHREAD_ONCE_T\tmacro', '_PTHREAD_ONCE_T')
('_PTHREAD_RECURSIVE_MUTEX_SIG_init\tmacro', '_PTHREAD_RECURSIVE_MUTEX_SIG_init')
('_PTHREAD_RWLOCKATTR_T\tmacro', '_PTHREAD_RWLOCKATTR_T')
('_PTHREAD_RWLOCK_SIG_init\tmacro', '_PTHREAD_RWLOCK_SIG_init')
('_PTHREAD_RWLOCK_T\tmacro', '_PTHREAD_RWLOCK_T')
('_PTHREAD_T\tmacro', '_PTHREAD_T')
('_PTRDIFF_T\tmacro', '_PTRDIFF_T')
('_QUAD_HIGHWORD\tmacro', '_QUAD_HIGHWORD')
('_QUAD_LOWWORD\tmacro', '_QUAD_LOWWORD')
('_RATTR_OK\tmacro', '_RATTR_OK')
('_READ_OK\tmacro', '_READ_OK')
('_REXT_OK\tmacro', '_REXT_OK')
('_RLIMIT_POSIX_FLAG\tmacro', '_RLIMIT_POSIX_FLAG')
('_RMFILE_OK\tmacro', '_RMFILE_OK')
('_RPERM_OK\tmacro', '_RPERM_OK')
('_RUNETYPE_H_\tmacro', '_RUNETYPE_H_')
('_RUNE_MAGIC_A\tmacro', '_RUNE_MAGIC_A')
('_RUNE_T\tmacro', '_RUNE_T')
('_RuneCharClass\ttypedef', '_RuneCharClass')
('_RuneEntry\ttypedef', '_RuneEntry')
('_RuneLocale\ttypedef', '_RuneLocale')
('_RuneRange\ttypedef', '_RuneRange')
('_SCHED_H_\tmacro', '_SCHED_H_')
('_SC_2_CHAR_TERM\tmacro', '_SC_2_CHAR_TERM')
('_SC_2_C_BIND\tmacro', '_SC_2_C_BIND')
('_SC_2_C_DEV\tmacro', '_SC_2_C_DEV')
('_SC_2_FORT_DEV\tmacro', '_SC_2_FORT_DEV')
('_SC_2_FORT_RUN\tmacro', '_SC_2_FORT_RUN')
('_SC_2_LOCALEDEF\tmacro', '_SC_2_LOCALEDEF')
('_SC_2_PBS\tmacro', '_SC_2_PBS')
('_SC_2_PBS_ACCOUNTING\tmacro', '_SC_2_PBS_ACCOUNTING')
('_SC_2_PBS_CHECKPOINT\tmacro', '_SC_2_PBS_CHECKPOINT')
('_SC_2_PBS_LOCATE\tmacro', '_SC_2_PBS_LOCATE')
('_SC_2_PBS_MESSAGE\tmacro', '_SC_2_PBS_MESSAGE')
('_SC_2_PBS_TRACK\tmacro', '_SC_2_PBS_TRACK')
('_SC_2_SW_DEV\tmacro', '_SC_2_SW_DEV')
('_SC_2_UPE\tmacro', '_SC_2_UPE')
('_SC_2_VERSION\tmacro', '_SC_2_VERSION')
('_SC_ADVISORY_INFO\tmacro', '_SC_ADVISORY_INFO')
('_SC_AIO_LISTIO_MAX\tmacro', '_SC_AIO_LISTIO_MAX')
('_SC_AIO_MAX\tmacro', '_SC_AIO_MAX')
('_SC_AIO_PRIO_DELTA_MAX\tmacro', '_SC_AIO_PRIO_DELTA_MAX')
('_SC_ARG_MAX\tmacro', '_SC_ARG_MAX')
('_SC_ASYNCHRONOUS_IO\tmacro', '_SC_ASYNCHRONOUS_IO')
('_SC_ATEXIT_MAX\tmacro', '_SC_ATEXIT_MAX')
('_SC_BARRIERS\tmacro', '_SC_BARRIERS')
('_SC_BC_BASE_MAX\tmacro', '_SC_BC_BASE_MAX')
('_SC_BC_DIM_MAX\tmacro', '_SC_BC_DIM_MAX')
('_SC_BC_SCALE_MAX\tmacro', '_SC_BC_SCALE_MAX')
('_SC_BC_STRING_MAX\tmacro', '_SC_BC_STRING_MAX')
('_SC_CHILD_MAX\tmacro', '_SC_CHILD_MAX')
('_SC_CLK_TCK\tmacro', '_SC_CLK_TCK')
('_SC_CLOCK_SELECTION\tmacro', '_SC_CLOCK_SELECTION')
('_SC_COLL_WEIGHTS_MAX\tmacro', '_SC_COLL_WEIGHTS_MAX')
('_SC_CPUTIME\tmacro', '_SC_CPUTIME')
('_SC_DELAYTIMER_MAX\tmacro', '_SC_DELAYTIMER_MAX')
('_SC_EXPR_NEST_MAX\tmacro', '_SC_EXPR_NEST_MAX')
('_SC_FILE_LOCKING\tmacro', '_SC_FILE_LOCKING')
('_SC_FSYNC\tmacro', '_SC_FSYNC')
('_SC_GETGR_R_SIZE_MAX\tmacro', '_SC_GETGR_R_SIZE_MAX')
('_SC_GETPW_R_SIZE_MAX\tmacro', '_SC_GETPW_R_SIZE_MAX')
('_SC_HOST_NAME_MAX\tmacro', '_SC_HOST_NAME_MAX')
('_SC_IOV_MAX\tmacro', '_SC_IOV_MAX')
('_SC_IPV6\tmacro', '_SC_IPV6')
('_SC_JOB_CONTROL\tmacro', '_SC_JOB_CONTROL')
('_SC_LINE_MAX\tmacro', '_SC_LINE_MAX')
('_SC_LOGIN_NAME_MAX\tmacro', '_SC_LOGIN_NAME_MAX')
('_SC_MAPPED_FILES\tmacro', '_SC_MAPPED_FILES')
('_SC_MEMLOCK\tmacro', '_SC_MEMLOCK')
('_SC_MEMLOCK_RANGE\tmacro', '_SC_MEMLOCK_RANGE')
('_SC_MEMORY_PROTECTION\tmacro', '_SC_MEMORY_PROTECTION')
('_SC_MESSAGE_PASSING\tmacro', '_SC_MESSAGE_PASSING')
('_SC_MONOTONIC_CLOCK\tmacro', '_SC_MONOTONIC_CLOCK')
('_SC_MQ_OPEN_MAX\tmacro', '_SC_MQ_OPEN_MAX')
('_SC_MQ_PRIO_MAX\tmacro', '_SC_MQ_PRIO_MAX')
('_SC_NGROUPS_MAX\tmacro', '_SC_NGROUPS_MAX')
('_SC_NPROCESSORS_CONF\tmacro', '_SC_NPROCESSORS_CONF')
('_SC_NPROCESSORS_ONLN\tmacro', '_SC_NPROCESSORS_ONLN')
('_SC_OPEN_MAX\tmacro', '_SC_OPEN_MAX')
('_SC_PAGESIZE\tmacro', '_SC_PAGESIZE')
('_SC_PAGE_SIZE\tmacro', '_SC_PAGE_SIZE')
('_SC_PASS_MAX\tmacro', '_SC_PASS_MAX')
('_SC_PRIORITIZED_IO\tmacro', '_SC_PRIORITIZED_IO')
('_SC_PRIORITY_SCHEDULING\tmacro', '_SC_PRIORITY_SCHEDULING')
('_SC_RAW_SOCKETS\tmacro', '_SC_RAW_SOCKETS')
('_SC_READER_WRITER_LOCKS\tmacro', '_SC_READER_WRITER_LOCKS')
('_SC_REALTIME_SIGNALS\tmacro', '_SC_REALTIME_SIGNALS')
('_SC_REGEXP\tmacro', '_SC_REGEXP')
('_SC_RE_DUP_MAX\tmacro', '_SC_RE_DUP_MAX')
('_SC_RTSIG_MAX\tmacro', '_SC_RTSIG_MAX')
('_SC_SAVED_IDS\tmacro', '_SC_SAVED_IDS')
('_SC_SEMAPHORES\tmacro', '_SC_SEMAPHORES')
('_SC_SEM_NSEMS_MAX\tmacro', '_SC_SEM_NSEMS_MAX')
('_SC_SEM_VALUE_MAX\tmacro', '_SC_SEM_VALUE_MAX')
('_SC_SHARED_MEMORY_OBJECTS\tmacro', '_SC_SHARED_MEMORY_OBJECTS')
('_SC_SHELL\tmacro', '_SC_SHELL')
('_SC_SIGQUEUE_MAX\tmacro', '_SC_SIGQUEUE_MAX')
('_SC_SPAWN\tmacro', '_SC_SPAWN')
('_SC_SPIN_LOCKS\tmacro', '_SC_SPIN_LOCKS')
('_SC_SPORADIC_SERVER\tmacro', '_SC_SPORADIC_SERVER')
('_SC_SS_REPL_MAX\tmacro', '_SC_SS_REPL_MAX')
('_SC_STREAM_MAX\tmacro', '_SC_STREAM_MAX')
('_SC_SYMLOOP_MAX\tmacro', '_SC_SYMLOOP_MAX')
('_SC_SYNCHRONIZED_IO\tmacro', '_SC_SYNCHRONIZED_IO')
('_SC_THREADS\tmacro', '_SC_THREADS')
('_SC_THREAD_ATTR_STACKADDR\tmacro', '_SC_THREAD_ATTR_STACKADDR')
('_SC_THREAD_ATTR_STACKSIZE\tmacro', '_SC_THREAD_ATTR_STACKSIZE')
('_SC_THREAD_CPUTIME\tmacro', '_SC_THREAD_CPUTIME')
('_SC_THREAD_DESTRUCTOR_ITERATIONS\tmacro', '_SC_THREAD_DESTRUCTOR_ITERATIONS')
('_SC_THREAD_KEYS_MAX\tmacro', '_SC_THREAD_KEYS_MAX')
('_SC_THREAD_PRIORITY_SCHEDULING\tmacro', '_SC_THREAD_PRIORITY_SCHEDULING')
('_SC_THREAD_PRIO_INHERIT\tmacro', '_SC_THREAD_PRIO_INHERIT')
('_SC_THREAD_PRIO_PROTECT\tmacro', '_SC_THREAD_PRIO_PROTECT')
('_SC_THREAD_PROCESS_SHARED\tmacro', '_SC_THREAD_PROCESS_SHARED')
('_SC_THREAD_SAFE_FUNCTIONS\tmacro', '_SC_THREAD_SAFE_FUNCTIONS')
('_SC_THREAD_SPORADIC_SERVER\tmacro', '_SC_THREAD_SPORADIC_SERVER')
('_SC_THREAD_STACK_MIN\tmacro', '_SC_THREAD_STACK_MIN')
('_SC_THREAD_THREADS_MAX\tmacro', '_SC_THREAD_THREADS_MAX')
('_SC_TIMEOUTS\tmacro', '_SC_TIMEOUTS')
('_SC_TIMERS\tmacro', '_SC_TIMERS')
('_SC_TIMER_MAX\tmacro', '_SC_TIMER_MAX')
('_SC_TRACE\tmacro', '_SC_TRACE')
('_SC_TRACE_EVENT_FILTER\tmacro', '_SC_TRACE_EVENT_FILTER')
('_SC_TRACE_EVENT_NAME_MAX\tmacro', '_SC_TRACE_EVENT_NAME_MAX')
('_SC_TRACE_INHERIT\tmacro', '_SC_TRACE_INHERIT')
('_SC_TRACE_LOG\tmacro', '_SC_TRACE_LOG')
('_SC_TRACE_NAME_MAX\tmacro', '_SC_TRACE_NAME_MAX')
('_SC_TRACE_SYS_MAX\tmacro', '_SC_TRACE_SYS_MAX')
('_SC_TRACE_USER_EVENT_MAX\tmacro', '_SC_TRACE_USER_EVENT_MAX')
('_SC_TTY_NAME_MAX\tmacro', '_SC_TTY_NAME_MAX')
('_SC_TYPED_MEMORY_OBJECTS\tmacro', '_SC_TYPED_MEMORY_OBJECTS')
('_SC_TZNAME_MAX\tmacro', '_SC_TZNAME_MAX')
('_SC_V6_ILP32_OFF32\tmacro', '_SC_V6_ILP32_OFF32')
('_SC_V6_ILP32_OFFBIG\tmacro', '_SC_V6_ILP32_OFFBIG')
('_SC_V6_LP64_OFF64\tmacro', '_SC_V6_LP64_OFF64')
('_SC_V6_LPBIG_OFFBIG\tmacro', '_SC_V6_LPBIG_OFFBIG')
('_SC_VERSION\tmacro', '_SC_VERSION')
('_SC_XBS5_ILP32_OFF32\tmacro', '_SC_XBS5_ILP32_OFF32')
('_SC_XBS5_ILP32_OFFBIG\tmacro', '_SC_XBS5_ILP32_OFFBIG')
('_SC_XBS5_LP64_OFF64\tmacro', '_SC_XBS5_LP64_OFF64')
('_SC_XBS5_LPBIG_OFFBIG\tmacro', '_SC_XBS5_LPBIG_OFFBIG')
('_SC_XOPEN_CRYPT\tmacro', '_SC_XOPEN_CRYPT')
('_SC_XOPEN_ENH_I18N\tmacro', '_SC_XOPEN_ENH_I18N')
('_SC_XOPEN_LEGACY\tmacro', '_SC_XOPEN_LEGACY')
('_SC_XOPEN_REALTIME\tmacro', '_SC_XOPEN_REALTIME')
('_SC_XOPEN_REALTIME_THREADS\tmacro', '_SC_XOPEN_REALTIME_THREADS')
('_SC_XOPEN_SHM\tmacro', '_SC_XOPEN_SHM')
('_SC_XOPEN_STREAMS\tmacro', '_SC_XOPEN_STREAMS')
('_SC_XOPEN_UNIX\tmacro', '_SC_XOPEN_UNIX')
('_SC_XOPEN_VERSION\tmacro', '_SC_XOPEN_VERSION')
('_SC_XOPEN_XCU_VERSION\tmacro', '_SC_XOPEN_XCU_VERSION')
('_SIGSET_T\tmacro', '_SIGSET_T')
('_SIZE_T\tmacro', '_SIZE_T')
('_SSIZE_T\tmacro', '_SSIZE_T')
('_STACK_T\tmacro', '_STACK_T')
('_STDINT_H_\tmacro', '_STDINT_H_')
('_STDIO_H_\tmacro', '_STDIO_H_')
('_STDLIB_H_\tmacro', '_STDLIB_H_')
('_STL_CONSTRUCT_H\tmacro', '_STL_CONSTRUCT_H')
('_STL_HEAP_H\tmacro', '_STL_HEAP_H')
('_STL_RAW_STORAGE_ITERATOR_H\tmacro', '_STL_RAW_STORAGE_ITERATOR_H')
('_STL_RELOPS_H\tmacro', '_STL_RELOPS_H')
('_STL_UNINITIALIZED_H\tmacro', '_STL_UNINITIALIZED_H')
('_STRINGFWD_H\tmacro', '_STRINGFWD_H')
('_STRINGS_H_\tmacro', '_STRINGS_H_')
('_STRING_H_\tmacro', '_STRING_H_')
('_STRUCT_FP_CONTROL\tmacro', '_STRUCT_FP_CONTROL')
('_STRUCT_FP_STATUS\tmacro', '_STRUCT_FP_STATUS')
('_STRUCT_MCONTEXT\tmacro', '_STRUCT_MCONTEXT')
('_STRUCT_MCONTEXT32\tmacro', '_STRUCT_MCONTEXT32')
('_STRUCT_MCONTEXT64\tmacro', '_STRUCT_MCONTEXT64')
('_STRUCT_MCONTEXT_AVX32\tmacro', '_STRUCT_MCONTEXT_AVX32')
('_STRUCT_MCONTEXT_AVX64\tmacro', '_STRUCT_MCONTEXT_AVX64')
('_STRUCT_MMST_REG\tmacro', '_STRUCT_MMST_REG')
('_STRUCT_SIGALTSTACK\tmacro', '_STRUCT_SIGALTSTACK')
('_STRUCT_TIMESPEC\tmacro', '_STRUCT_TIMESPEC')
('_STRUCT_TIMEVAL\tmacro', '_STRUCT_TIMEVAL')
('_STRUCT_UCONTEXT\tmacro', '_STRUCT_UCONTEXT')
('_STRUCT_X86_AVX_STATE32\tmacro', '_STRUCT_X86_AVX_STATE32')
('_STRUCT_X86_AVX_STATE64\tmacro', '_STRUCT_X86_AVX_STATE64')
('_STRUCT_X86_DEBUG_STATE32\tmacro', '_STRUCT_X86_DEBUG_STATE32')
('_STRUCT_X86_DEBUG_STATE64\tmacro', '_STRUCT_X86_DEBUG_STATE64')
('_STRUCT_X86_EXCEPTION_STATE32\tmacro', '_STRUCT_X86_EXCEPTION_STATE32')
('_STRUCT_X86_EXCEPTION_STATE64\tmacro', '_STRUCT_X86_EXCEPTION_STATE64')
('_STRUCT_X86_FLOAT_STATE32\tmacro', '_STRUCT_X86_FLOAT_STATE32')
('_STRUCT_X86_FLOAT_STATE64\tmacro', '_STRUCT_X86_FLOAT_STATE64')
('_STRUCT_X86_THREAD_STATE32\tmacro', '_STRUCT_X86_THREAD_STATE32')
('_STRUCT_X86_THREAD_STATE64\tmacro', '_STRUCT_X86_THREAD_STATE64')
('_STRUCT_XMM_REG\tmacro', '_STRUCT_XMM_REG')
('_SUSECONDS_T\tmacro', '_SUSECONDS_T')
('_SYS_RESOURCE_H_\tmacro', '_SYS_RESOURCE_H_')
('_SYS_SELECT_H_\tmacro', '_SYS_SELECT_H_')
('_SYS_SIGNAL_H_\tmacro', '_SYS_SIGNAL_H_')
('_SYS_SYSLIMITS_H_\tmacro', '_SYS_SYSLIMITS_H_')
('_SYS_UNISTD_H_\tmacro', '_SYS_UNISTD_H_')
('_SYS_WAIT_H_\tmacro', '_SYS_WAIT_H_')
('_SYS__ENDIAN_H_\tmacro', '_SYS__ENDIAN_H_')
('_SYS__SELECT_H_\tmacro', '_SYS__SELECT_H_')
('_SYS__TYPES_H_\tmacro', '_SYS__TYPES_H_')
('_TEMPBUF_H\tmacro', '_TEMPBUF_H')
('_TIME_H_\tmacro', '_TIME_H_')
('_TIME_T\tmacro', '_TIME_T')
('_UCONTEXT_T\tmacro', '_UCONTEXT_T')
('_UID_T\tmacro', '_UID_T')
('_UINT16_T\tmacro', '_UINT16_T')
('_UINT32_T\tmacro', '_UINT32_T')
('_UINT64_T\tmacro', '_UINT64_T')
('_UINT8_T\tmacro', '_UINT8_T')
('_UINTMAX_T\tmacro', '_UINTMAX_T')
('_UINTPTR_T\tmacro', '_UINTPTR_T')
('_UNISTD_H_\tmacro', '_UNISTD_H_')
('_USECONDS_T\tmacro', '_USECONDS_T')
('_UUID_T\tmacro', '_UUID_T')
('_V6_ILP32_OFF32\tmacro', '_V6_ILP32_OFF32')
('_V6_ILP32_OFFBIG\tmacro', '_V6_ILP32_OFFBIG')
('_V6_LP64_OFF64\tmacro', '_V6_LP64_OFF64')
('_V6_LPBIG_OFFBIG\tmacro', '_V6_LPBIG_OFFBIG')
('_VA_LIST\tmacro', '_VA_LIST')
('_VECTOR_H\tmacro', '_VECTOR_H')
('_VECTOR_TCC\tmacro', '_VECTOR_TCC')
('_WATTR_OK\tmacro', '_WATTR_OK')
('_WCHAR_H_\tmacro', '_WCHAR_H_')
('_WCTYPE_T\tmacro', '_WCTYPE_T')
('_WEXT_OK\tmacro', '_WEXT_OK')
('_WINT_T\tmacro', '_WINT_T')
('_WPERM_OK\tmacro', '_WPERM_OK')
('_WRITE_OK\tmacro', '_WRITE_OK')
('_WSTATUS\tmacro', '_WSTATUS')
('_WSTOPPED\tmacro', '_WSTOPPED')
('_W_INT\tmacro', '_W_INT')
('_XBS5_ILP32_OFF32\tmacro', '_XBS5_ILP32_OFF32')
('_XBS5_ILP32_OFFBIG\tmacro', '_XBS5_ILP32_OFFBIG')
('_XBS5_LP64_OFF64\tmacro', '_XBS5_LP64_OFF64')
('_XBS5_LPBIG_OFFBIG\tmacro', '_XBS5_LPBIG_OFFBIG')
('_XOPEN_CRYPT\tmacro', '_XOPEN_CRYPT')
('_XOPEN_ENH_I18N\tmacro', '_XOPEN_ENH_I18N')
('_XOPEN_IOV_MAX\tmacro', '_XOPEN_IOV_MAX')
('_XOPEN_LEGACY\tmacro', '_XOPEN_LEGACY')
('_XOPEN_NAME_MAX\tmacro', '_XOPEN_NAME_MAX')
('_XOPEN_PATH_MAX\tmacro', '_XOPEN_PATH_MAX')
('_XOPEN_REALTIME\tmacro', '_XOPEN_REALTIME')
('_XOPEN_REALTIME_THREADS\tmacro', '_XOPEN_REALTIME_THREADS')
('_XOPEN_SHM\tmacro', '_XOPEN_SHM')
('_XOPEN_STREAMS\tmacro', '_XOPEN_STREAMS')
('_XOPEN_UNIX\tmacro', '_XOPEN_UNIX')
('_XOPEN_VERSION\tmacro', '_XOPEN_VERSION')
('_XOPEN_XCU_VERSION\tmacro', '_XOPEN_XCU_VERSION')
('__APPLE_API_EVOLVING\tmacro', '__APPLE_API_EVOLVING')
('__APPLE_API_OBSOLETE\tmacro', '__APPLE_API_OBSOLETE')
('__APPLE_API_PRIVATE\tmacro', '__APPLE_API_PRIVATE')
('__APPLE_API_STABLE\tmacro', '__APPLE_API_STABLE')
('__APPLE_API_STANDARD\tmacro', '__APPLE_API_STANDARD')
('__APPLE_API_UNSTABLE\tmacro', '__APPLE_API_UNSTABLE')
('__APPLE_CC__\tmacro', '__APPLE_CC__')
('__APPLE__\tmacro', '__APPLE__')
('__AVAILABILITY_INTERNAL_DEPRECATED\tmacro', '__AVAILABILITY_INTERNAL_DEPRECATED')
('__AVAILABILITY_INTERNAL_REGULAR\tmacro', '__AVAILABILITY_INTERNAL_REGULAR')
('__AVAILABILITY_INTERNAL_UNAVAILABLE\tmacro', '__AVAILABILITY_INTERNAL_UNAVAILABLE')
('__AVAILABILITY_INTERNAL_WEAK_IMPORT\tmacro', '__AVAILABILITY_INTERNAL_WEAK_IMPORT')
('__AVAILABILITY_INTERNAL__\tmacro', '__AVAILABILITY_INTERNAL__')
('__AVAILABILITY_INTERNAL__MAC_10_0\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0')
('__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1')
('__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2')
('__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3')
('__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4')
('__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5')
('__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6')
('__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7')
('__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_10_1\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_1')
('__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2')
('__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3')
('__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4')
('__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5')
('__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6')
('__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7')
('__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_10_2\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_2')
('__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3')
('__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4')
('__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5')
('__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6')
('__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7')
('__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_10_3\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_3')
('__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4')
('__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5')
('__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6')
('__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7')
('__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_10_4\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_4')
('__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5')
('__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6')
('__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7')
('__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_10_5\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_5')
('__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6')
('__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7')
('__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_10_6\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_6')
('__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7')
('__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_10_7\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_7')
('__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_NA')
('__AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA\tmacro', '__AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA')
('__AVAILABILITY__\tmacro', '__AVAILABILITY__')
('__BEGIN_DECLS\tmacro', '__BEGIN_DECLS')
('__BLOCKS__\tmacro', '__BLOCKS__')
('__CAST_AWAY_QUALIFIER\tmacro', '__CAST_AWAY_QUALIFIER')
('__CHAR16_TYPE__\tmacro', '__CHAR16_TYPE__')
('__CHAR32_TYPE__\tmacro', '__CHAR32_TYPE__')
('__CHAR_BIT__\tmacro', '__CHAR_BIT__')
('__CONCAT\tmacro', '__CONCAT')
('__CONSTANT_CFSTRINGS__\tmacro', '__CONSTANT_CFSTRINGS__')
('__COPYRIGHT\tmacro', '__COPYRIGHT')
('__CTERMID_DEFINED\tmacro', '__CTERMID_DEFINED')
('__DARWIN_1050\tmacro', '__DARWIN_1050')
('__DARWIN_1050ALIAS\tmacro', '__DARWIN_1050ALIAS')
('__DARWIN_1050ALIAS_C\tmacro', '__DARWIN_1050ALIAS_C')
('__DARWIN_1050ALIAS_I\tmacro', '__DARWIN_1050ALIAS_I')
('__DARWIN_1050INODE64\tmacro', '__DARWIN_1050INODE64')
('__DARWIN_64_BIT_INO_T\tmacro', '__DARWIN_64_BIT_INO_T')
('__DARWIN_ALIAS\tmacro', '__DARWIN_ALIAS')
('__DARWIN_ALIAS_C\tmacro', '__DARWIN_ALIAS_C')
('__DARWIN_ALIAS_I\tmacro', '__DARWIN_ALIAS_I')
('__DARWIN_ALIAS_STARTING\tmacro', '__DARWIN_ALIAS_STARTING')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2')
('__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3\tmacro', '__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3')
('__DARWIN_ALIAS_STARTING_MAC___MAC_10_0\tmacro', '__DARWIN_ALIAS_STARTING_MAC___MAC_10_0')
('__DARWIN_ALIAS_STARTING_MAC___MAC_10_1\tmacro', '__DARWIN_ALIAS_STARTING_MAC___MAC_10_1')
('__DARWIN_ALIAS_STARTING_MAC___MAC_10_2\tmacro', '__DARWIN_ALIAS_STARTING_MAC___MAC_10_2')
('__DARWIN_ALIAS_STARTING_MAC___MAC_10_3\tmacro', '__DARWIN_ALIAS_STARTING_MAC___MAC_10_3')
('__DARWIN_ALIAS_STARTING_MAC___MAC_10_4\tmacro', '__DARWIN_ALIAS_STARTING_MAC___MAC_10_4')
('__DARWIN_ALIAS_STARTING_MAC___MAC_10_5\tmacro', '__DARWIN_ALIAS_STARTING_MAC___MAC_10_5')
('__DARWIN_ALIAS_STARTING_MAC___MAC_10_6\tmacro', '__DARWIN_ALIAS_STARTING_MAC___MAC_10_6')
('__DARWIN_ALIAS_STARTING_MAC___MAC_10_7\tmacro', '__DARWIN_ALIAS_STARTING_MAC___MAC_10_7')
('__DARWIN_BIG_ENDIAN\tmacro', '__DARWIN_BIG_ENDIAN')
('__DARWIN_BYTE_ORDER\tmacro', '__DARWIN_BYTE_ORDER')
('__DARWIN_CLK_TCK\tmacro', '__DARWIN_CLK_TCK')
('__DARWIN_CTYPE_TOP_static_inline\tmacro', '__DARWIN_CTYPE_TOP_static_inline')
('__DARWIN_CTYPE_static_inline\tmacro', '__DARWIN_CTYPE_static_inline')
('__DARWIN_C_ANSI\tmacro', '__DARWIN_C_ANSI')
('__DARWIN_C_FULL\tmacro', '__DARWIN_C_FULL')
('__DARWIN_C_LEVEL\tmacro', '__DARWIN_C_LEVEL')
('__DARWIN_EXTSN\tmacro', '__DARWIN_EXTSN')
('__DARWIN_EXTSN_C\tmacro', '__DARWIN_EXTSN_C')
('__DARWIN_FD_CLR\tmacro', '__DARWIN_FD_CLR')
('__DARWIN_FD_COPY\tmacro', '__DARWIN_FD_COPY')
('__DARWIN_FD_ISSET\tmacro', '__DARWIN_FD_ISSET')
('__DARWIN_FD_SET\tmacro', '__DARWIN_FD_SET')
('__DARWIN_FD_SETSIZE\tmacro', '__DARWIN_FD_SETSIZE')
('__DARWIN_FD_ZERO\tmacro', '__DARWIN_FD_ZERO')
('__DARWIN_INODE64\tmacro', '__DARWIN_INODE64')
('__DARWIN_LDBL_COMPAT\tmacro', '__DARWIN_LDBL_COMPAT')
('__DARWIN_LDBL_COMPAT2\tmacro', '__DARWIN_LDBL_COMPAT2')
('__DARWIN_LITTLE_ENDIAN\tmacro', '__DARWIN_LITTLE_ENDIAN')
('__DARWIN_LONG_DOUBLE_IS_DOUBLE\tmacro', '__DARWIN_LONG_DOUBLE_IS_DOUBLE')
('__DARWIN_NBBY\tmacro', '__DARWIN_NBBY')
('__DARWIN_NFDBITS\tmacro', '__DARWIN_NFDBITS')
('__DARWIN_NON_CANCELABLE\tmacro', '__DARWIN_NON_CANCELABLE')
('__DARWIN_NO_LONG_LONG\tmacro', '__DARWIN_NO_LONG_LONG')
('__DARWIN_NSIG\tmacro', '__DARWIN_NSIG')
('__DARWIN_NULL\tmacro', '__DARWIN_NULL')
('__DARWIN_ONLY_64_BIT_INO_T\tmacro', '__DARWIN_ONLY_64_BIT_INO_T')
('__DARWIN_ONLY_UNIX_CONFORMANCE\tmacro', '__DARWIN_ONLY_UNIX_CONFORMANCE')
('__DARWIN_ONLY_VERS_1050\tmacro', '__DARWIN_ONLY_VERS_1050')
('__DARWIN_OSSwapConstInt16\tmacro', '__DARWIN_OSSwapConstInt16')
('__DARWIN_OSSwapConstInt32\tmacro', '__DARWIN_OSSwapConstInt32')
('__DARWIN_OSSwapConstInt64\tmacro', '__DARWIN_OSSwapConstInt64')
('__DARWIN_OSSwapInt16\tmacro', '__DARWIN_OSSwapInt16')
('__DARWIN_OSSwapInt32\tmacro', '__DARWIN_OSSwapInt32')
('__DARWIN_OSSwapInt64\tmacro', '__DARWIN_OSSwapInt64')
('__DARWIN_OS_INLINE\tmacro', '__DARWIN_OS_INLINE')
('__DARWIN_PDP_ENDIAN\tmacro', '__DARWIN_PDP_ENDIAN')
('__DARWIN_SUF_1050\tmacro', '__DARWIN_SUF_1050')
('__DARWIN_SUF_64_BIT_INO_T\tmacro', '__DARWIN_SUF_64_BIT_INO_T')
('__DARWIN_SUF_EXTSN\tmacro', '__DARWIN_SUF_EXTSN')
('__DARWIN_SUF_NON_CANCELABLE\tmacro', '__DARWIN_SUF_NON_CANCELABLE')
('__DARWIN_SUF_UNIX03\tmacro', '__DARWIN_SUF_UNIX03')
('__DARWIN_UNIX03\tmacro', '__DARWIN_UNIX03')
('__DARWIN_VERS_1050\tmacro', '__DARWIN_VERS_1050')
('__DARWIN_WCHAR_MAX\tmacro', '__DARWIN_WCHAR_MAX')
('__DARWIN_WCHAR_MIN\tmacro', '__DARWIN_WCHAR_MIN')
('__DARWIN_WCTYPE_TOP_static_inline\tmacro', '__DARWIN_WCTYPE_TOP_static_inline')
('__DARWIN_WEOF\tmacro', '__DARWIN_WEOF')
('__DARWIN_howmany\tmacro', '__DARWIN_howmany')
('__DBL_DENORM_MIN__\tmacro', '__DBL_DENORM_MIN__')
('__DBL_DIG__\tmacro', '__DBL_DIG__')
('__DBL_EPSILON__\tmacro', '__DBL_EPSILON__')
('__DBL_HAS_DENORM__\tmacro', '__DBL_HAS_DENORM__')
('__DBL_HAS_INFINITY__\tmacro', '__DBL_HAS_INFINITY__')
('__DBL_HAS_QUIET_NAN__\tmacro', '__DBL_HAS_QUIET_NAN__')
('__DBL_MANT_DIG__\tmacro', '__DBL_MANT_DIG__')
('__DBL_MAX_10_EXP__\tmacro', '__DBL_MAX_10_EXP__')
('__DBL_MAX_EXP__\tmacro', '__DBL_MAX_EXP__')
('__DBL_MAX__\tmacro', '__DBL_MAX__')
('__DBL_MIN_10_EXP__\tmacro', '__DBL_MIN_10_EXP__')
('__DBL_MIN_EXP__\tmacro', '__DBL_MIN_EXP__')
('__DBL_MIN__\tmacro', '__DBL_MIN__')
('__DECIMAL_DIG__\tmacro', '__DECIMAL_DIG__')
('__DEPRECATED\tmacro', '__DEPRECATED')
('__DYNAMIC__\tmacro', '__DYNAMIC__')
('__END_DECLS\tmacro', '__END_DECLS')
('__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__\tmacro', '__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__')
('__EXCEPTIONS\tmacro', '__EXCEPTIONS')
('__EXCEPTION__\tmacro', '__EXCEPTION__')
('__FINITE_MATH_ONLY__\tmacro', '__FINITE_MATH_ONLY__')
('__FLT_DENORM_MIN__\tmacro', '__FLT_DENORM_MIN__')
('__FLT_DIG__\tmacro', '__FLT_DIG__')
('__FLT_EPSILON__\tmacro', '__FLT_EPSILON__')
('__FLT_EVAL_METHOD__\tmacro', '__FLT_EVAL_METHOD__')
('__FLT_HAS_DENORM__\tmacro', '__FLT_HAS_DENORM__')
('__FLT_HAS_INFINITY__\tmacro', '__FLT_HAS_INFINITY__')
('__FLT_HAS_QUIET_NAN__\tmacro', '__FLT_HAS_QUIET_NAN__')
('__FLT_MANT_DIG__\tmacro', '__FLT_MANT_DIG__')
('__FLT_MAX_10_EXP__\tmacro', '__FLT_MAX_10_EXP__')
('__FLT_MAX_EXP__\tmacro', '__FLT_MAX_EXP__')
('__FLT_MAX__\tmacro', '__FLT_MAX__')
('__FLT_MIN_10_EXP__\tmacro', '__FLT_MIN_10_EXP__')
('__FLT_MIN_EXP__\tmacro', '__FLT_MIN_EXP__')
('__FLT_MIN__\tmacro', '__FLT_MIN__')
('__FLT_RADIX__\tmacro', '__FLT_RADIX__')
('__GLIBCXX__\tmacro', '__GLIBCXX__')
('__GNUC_GNU_INLINE__\tmacro', '__GNUC_GNU_INLINE__')
('__GNUC_LIBSTD_MINOR__\tmacro', '__GNUC_LIBSTD_MINOR__')
('__GNUC_LIBSTD__\tmacro', '__GNUC_LIBSTD__')
('__GNUC_MINOR__\tmacro', '__GNUC_MINOR__')
('__GNUC_PATCHLEVEL__\tmacro', '__GNUC_PATCHLEVEL__')
('__GNUC__\tmacro', '__GNUC__')
('__GNUG__\tmacro', '__GNUG__')
('__GTHREADS\tmacro', '__GTHREADS')
('__GTHREAD_MUTEX_INIT\tmacro', '__GTHREAD_MUTEX_INIT')
('__GTHREAD_ONCE_INIT\tmacro', '__GTHREAD_ONCE_INIT')
('__GTHREAD_RECURSIVE_MUTEX_INIT\tmacro', '__GTHREAD_RECURSIVE_MUTEX_INIT')
('__GXX_ABI_VERSION\tmacro', '__GXX_ABI_VERSION')
('__GXX_RTTI\tmacro', '__GXX_RTTI')
('__GXX_WEAK__\tmacro', '__GXX_WEAK__')
('__IDSTRING\tmacro', '__IDSTRING')
('__ILP32_OFF32\tmacro', '__ILP32_OFF32')
('__ILP32_OFFBIG\tmacro', '__ILP32_OFFBIG')
('__INT16_TYPE__\tmacro', '__INT16_TYPE__')
('__INT32_TYPE__\tmacro', '__INT32_TYPE__')
('__INT64_C_SUFFIX__\tmacro', '__INT64_C_SUFFIX__')
('__INT64_TYPE__\tmacro', '__INT64_TYPE__')
('__INT8_TYPE__\tmacro', '__INT8_TYPE__')
('__INTMAX_MAX__\tmacro', '__INTMAX_MAX__')
('__INTMAX_TYPE__\tmacro', '__INTMAX_TYPE__')
('__INTMAX_WIDTH__\tmacro', '__INTMAX_WIDTH__')
('__INTPTR_TYPE__\tmacro', '__INTPTR_TYPE__')
('__INTPTR_WIDTH__\tmacro', '__INTPTR_WIDTH__')
('__INT_MAX__\tmacro', '__INT_MAX__')
('__IPHONE_2_0\tmacro', '__IPHONE_2_0')
('__IPHONE_2_1\tmacro', '__IPHONE_2_1')
('__IPHONE_2_2\tmacro', '__IPHONE_2_2')
('__IPHONE_3_0\tmacro', '__IPHONE_3_0')
('__IPHONE_3_1\tmacro', '__IPHONE_3_1')
('__IPHONE_3_2\tmacro', '__IPHONE_3_2')
('__IPHONE_4_0\tmacro', '__IPHONE_4_0')
('__IPHONE_4_1\tmacro', '__IPHONE_4_1')
('__IPHONE_4_2\tmacro', '__IPHONE_4_2')
('__IPHONE_4_3\tmacro', '__IPHONE_4_3')
('__IPHONE_NA\tmacro', '__IPHONE_NA')
('__LDBL_DENORM_MIN__\tmacro', '__LDBL_DENORM_MIN__')
('__LDBL_DIG__\tmacro', '__LDBL_DIG__')
('__LDBL_EPSILON__\tmacro', '__LDBL_EPSILON__')
('__LDBL_HAS_DENORM__\tmacro', '__LDBL_HAS_DENORM__')
('__LDBL_HAS_INFINITY__\tmacro', '__LDBL_HAS_INFINITY__')
('__LDBL_HAS_QUIET_NAN__\tmacro', '__LDBL_HAS_QUIET_NAN__')
('__LDBL_MANT_DIG__\tmacro', '__LDBL_MANT_DIG__')
('__LDBL_MAX_10_EXP__\tmacro', '__LDBL_MAX_10_EXP__')
('__LDBL_MAX_EXP__\tmacro', '__LDBL_MAX_EXP__')
('__LDBL_MAX__\tmacro', '__LDBL_MAX__')
('__LDBL_MIN_10_EXP__\tmacro', '__LDBL_MIN_10_EXP__')
('__LDBL_MIN_EXP__\tmacro', '__LDBL_MIN_EXP__')
('__LDBL_MIN__\tmacro', '__LDBL_MIN__')
('__LITTLE_ENDIAN__\tmacro', '__LITTLE_ENDIAN__')
('__LOCALE_H_\tmacro', '__LOCALE_H_')
('__LONG_LONG_MAX__\tmacro', '__LONG_LONG_MAX__')
('__LONG_MAX__\tmacro', '__LONG_MAX__')
('__LP64_OFF64\tmacro', '__LP64_OFF64')
('__LP64__\tmacro', '__LP64__')
('__LPBIG_OFFBIG\tmacro', '__LPBIG_OFFBIG')
('__MACH__\tmacro', '__MACH__')
('__MAC_10_0\tmacro', '__MAC_10_0')
('__MAC_10_1\tmacro', '__MAC_10_1')
('__MAC_10_2\tmacro', '__MAC_10_2')
('__MAC_10_3\tmacro', '__MAC_10_3')
('__MAC_10_4\tmacro', '__MAC_10_4')
('__MAC_10_5\tmacro', '__MAC_10_5')
('__MAC_10_6\tmacro', '__MAC_10_6')
('__MAC_10_7\tmacro', '__MAC_10_7')
('__MAC_NA\tmacro', '__MAC_NA')
('__MAC_OS_X_VERSION_MAX_ALLOWED\tmacro', '__MAC_OS_X_VERSION_MAX_ALLOWED')
('__MAC_OS_X_VERSION_MIN_REQUIRED\tmacro', '__MAC_OS_X_VERSION_MIN_REQUIRED')
('__MMX__\tmacro', '__MMX__')
('__N\tmacro', '__N')
('__NO_INLINE__\tmacro', '__NO_INLINE__')
('__NO_MATH_INLINES\tmacro', '__NO_MATH_INLINES')
('__OSX_AVAILABLE_BUT_DEPRECATED\tmacro', '__OSX_AVAILABLE_BUT_DEPRECATED')
('__OSX_AVAILABLE_STARTING\tmacro', '__OSX_AVAILABLE_STARTING')
('__P\tmacro', '__P')
('__PIC__\tmacro', '__PIC__')
('__POINTER_WIDTH__\tmacro', '__POINTER_WIDTH__')
('__POSIX_C_DEPRECATED\tmacro', '__POSIX_C_DEPRECATED')
('__PROJECT_VERSION\tmacro', '__PROJECT_VERSION')
('__PTHREAD_ATTR_SIZE__\tmacro', '__PTHREAD_ATTR_SIZE__')
('__PTHREAD_CONDATTR_SIZE__\tmacro', '__PTHREAD_CONDATTR_SIZE__')
('__PTHREAD_COND_SIZE__\tmacro', '__PTHREAD_COND_SIZE__')
('__PTHREAD_MUTEXATTR_SIZE__\tmacro', '__PTHREAD_MUTEXATTR_SIZE__')
('__PTHREAD_MUTEX_SIZE__\tmacro', '__PTHREAD_MUTEX_SIZE__')
('__PTHREAD_ONCE_SIZE__\tmacro', '__PTHREAD_ONCE_SIZE__')
('__PTHREAD_RWLOCKATTR_SIZE__\tmacro', '__PTHREAD_RWLOCKATTR_SIZE__')
('__PTHREAD_RWLOCK_SIZE__\tmacro', '__PTHREAD_RWLOCK_SIZE__')
('__PTHREAD_SIZE__\tmacro', '__PTHREAD_SIZE__')
('__PTRDIFF_TYPE__\tmacro', '__PTRDIFF_TYPE__')
('__PTRDIFF_WIDTH__\tmacro', '__PTRDIFF_WIDTH__')
('__RCSID\tmacro', '__RCSID')
('__REGISTER_PREFIX__\tmacro', '__REGISTER_PREFIX__')
('__SALC\tmacro', '__SALC')
('__SAPP\tmacro', '__SAPP')
('__SCCSID\tmacro', '__SCCSID')
('__SCHAR_MAX__\tmacro', '__SCHAR_MAX__')
('__SCHED_PARAM_SIZE__\tmacro', '__SCHED_PARAM_SIZE__')
('__SEOF\tmacro', '__SEOF')
('__SERR\tmacro', '__SERR')
('__SHRT_MAX__\tmacro', '__SHRT_MAX__')
('__SIGN\tmacro', '__SIGN')
('__SIG_ATOMIC_WIDTH__\tmacro', '__SIG_ATOMIC_WIDTH__')
('__SIZEOF_DOUBLE__\tmacro', '__SIZEOF_DOUBLE__')
('__SIZEOF_FLOAT__\tmacro', '__SIZEOF_FLOAT__')
('__SIZEOF_INT__\tmacro', '__SIZEOF_INT__')
('__SIZEOF_LONG_DOUBLE__\tmacro', '__SIZEOF_LONG_DOUBLE__')
('__SIZEOF_LONG_LONG__\tmacro', '__SIZEOF_LONG_LONG__')
('__SIZEOF_LONG__\tmacro', '__SIZEOF_LONG__')
('__SIZEOF_POINTER__\tmacro', '__SIZEOF_POINTER__')
('__SIZEOF_PTRDIFF_T__\tmacro', '__SIZEOF_PTRDIFF_T__')
('__SIZEOF_SHORT__\tmacro', '__SIZEOF_SHORT__')
('__SIZEOF_SIZE_T__\tmacro', '__SIZEOF_SIZE_T__')
('__SIZEOF_WCHAR_T__\tmacro', '__SIZEOF_WCHAR_T__')
('__SIZEOF_WINT_T__\tmacro', '__SIZEOF_WINT_T__')
('__SIZE_TYPE__\tmacro', '__SIZE_TYPE__')
('__SIZE_WIDTH__\tmacro', '__SIZE_WIDTH__')
('__SLBF\tmacro', '__SLBF')
('__SMBF\tmacro', '__SMBF')
('__SMOD\tmacro', '__SMOD')
('__SNBF\tmacro', '__SNBF')
('__SNPT\tmacro', '__SNPT')
('__SOFF\tmacro', '__SOFF')
('__SOPT\tmacro', '__SOPT')
('__SRD\tmacro', '__SRD')
('__SRW\tmacro', '__SRW')
('__SSE2_MATH__\tmacro', '__SSE2_MATH__')
('__SSE2__\tmacro', '__SSE2__')
('__SSE3__\tmacro', '__SSE3__')
('__SSE_MATH__\tmacro', '__SSE_MATH__')
('__SSE__\tmacro', '__SSE__')
('__SSP__\tmacro', '__SSP__')
('__SSSE3__\tmacro', '__SSSE3__')
('__SSTR\tmacro', '__SSTR')
('__STDC_HOSTED__\tmacro', '__STDC_HOSTED__')
('__STDC__\tmacro', '__STDC__')
('__STDDEF_H__\tmacro', '__STDDEF_H__')
('__STRING\tmacro', '__STRING')
('__SWR\tmacro', '__SWR')
('__SYS_APPLEAPIOPTS_H__\tmacro', '__SYS_APPLEAPIOPTS_H__')
('__TYPES_H_\tmacro', '__TYPES_H_')
('__UINTMAX_TYPE__\tmacro', '__UINTMAX_TYPE__')
('__USER_LABEL_PREFIX__\tmacro', '__USER_LABEL_PREFIX__')
('__VERSION__\tmacro', '__VERSION__')
('__WCHAR_MAX__\tmacro', '__WCHAR_MAX__')
('__WCHAR_TYPE__\tmacro', '__WCHAR_TYPE__')
('__WCHAR_WIDTH__\tmacro', '__WCHAR_WIDTH__')
('__WCTYPE_H_\tmacro', '__WCTYPE_H_')
('__WINT_TYPE__\tmacro', '__WINT_TYPE__')
('__WINT_WIDTH__\tmacro', '__WINT_WIDTH__')
('__WORDSIZE\tmacro', '__WORDSIZE')
('___POSIX_C_DEPRECATED_STARTING_198808L\tmacro', '___POSIX_C_DEPRECATED_STARTING_198808L')
('___POSIX_C_DEPRECATED_STARTING_199009L\tmacro', '___POSIX_C_DEPRECATED_STARTING_199009L')
('___POSIX_C_DEPRECATED_STARTING_199209L\tmacro', '___POSIX_C_DEPRECATED_STARTING_199209L')
('___POSIX_C_DEPRECATED_STARTING_199309L\tmacro', '___POSIX_C_DEPRECATED_STARTING_199309L')
('___POSIX_C_DEPRECATED_STARTING_199506L\tmacro', '___POSIX_C_DEPRECATED_STARTING_199506L')
('___POSIX_C_DEPRECATED_STARTING_200112L\tmacro', '___POSIX_C_DEPRECATED_STARTING_200112L')
('___POSIX_C_DEPRECATED_STARTING_200809L\tmacro', '___POSIX_C_DEPRECATED_STARTING_200809L')
('___runetype(__darwin_ct_rune_t)\tunsigned long', '___runetype(${1:__darwin_ct_rune_t})')
('___tolower(__darwin_ct_rune_t)\t__darwin_ct_rune_t', '___tolower(${1:__darwin_ct_rune_t})')
('___toupper(__darwin_ct_rune_t)\t__darwin_ct_rune_t', '___toupper(${1:__darwin_ct_rune_t})')
('__alloca\tmacro', '__alloca')
('__amd64\tmacro', '__amd64')
('__amd64__\tmacro', '__amd64__')
('__block\tmacro', '__block')
('__bridge\tmacro', '__bridge')
('__bridge_retain\tmacro', '__bridge_retain')
('__bridge_retained\tmacro', '__bridge_retained')
('__bridge_transfer\tmacro', '__bridge_transfer')
('__builtin_va_list\ttypedef', '__builtin_va_list')
('__clang__\tmacro', '__clang__')
('__clang_major__\tmacro', '__clang_major__')
('__clang_minor__\tmacro', '__clang_minor__')
('__clang_patchlevel__\tmacro', '__clang_patchlevel__')
('__clang_version__\tmacro', '__clang_version__')
('__const\tmacro', '__const')
('__core2\tmacro', '__core2')
('__core2__\tmacro', '__core2__')
('__cplusplus\tmacro', '__cplusplus')
('__darwin_blkcnt_t\ttypedef', '__darwin_blkcnt_t')
('__darwin_blksize_t\ttypedef', '__darwin_blksize_t')
('__darwin_clock_t\ttypedef', '__darwin_clock_t')
('__darwin_ct_rune_t\ttypedef', '__darwin_ct_rune_t')
('__darwin_dev_t\ttypedef', '__darwin_dev_t')
('__darwin_fd_isset(int _n, const struct fd_set *_p)\tint', '__darwin_fd_isset(${1:int _n}, ${2:const struct fd_set *_p})')
('__darwin_fp_control\tstruct', '__darwin_fp_control')
('__darwin_fp_control_t\ttypedef', '__darwin_fp_control_t')
('__darwin_fp_status\tstruct', '__darwin_fp_status')
('__darwin_fp_status_t\ttypedef', '__darwin_fp_status_t')
('__darwin_fsblkcnt_t\ttypedef', '__darwin_fsblkcnt_t')
('__darwin_fsfilcnt_t\ttypedef', '__darwin_fsfilcnt_t')
('__darwin_gid_t\ttypedef', '__darwin_gid_t')
('__darwin_i386_avx_state\tstruct', '__darwin_i386_avx_state')
('__darwin_i386_exception_state\tstruct', '__darwin_i386_exception_state')
('__darwin_i386_float_state\tstruct', '__darwin_i386_float_state')
('__darwin_i386_thread_state\tstruct', '__darwin_i386_thread_state')
('__darwin_id_t\ttypedef', '__darwin_id_t')
('__darwin_ino64_t\ttypedef', '__darwin_ino64_t')
('__darwin_ino_t\ttypedef', '__darwin_ino_t')
('__darwin_intptr_t\ttypedef', '__darwin_intptr_t')
('__darwin_mach_port_name_t\ttypedef', '__darwin_mach_port_name_t')
('__darwin_mach_port_t\ttypedef', '__darwin_mach_port_t')
('__darwin_mbstate_t\ttypedef', '__darwin_mbstate_t')
('__darwin_mcontext32\tstruct', '__darwin_mcontext32')
('__darwin_mcontext64\tstruct', '__darwin_mcontext64')
('__darwin_mcontext_avx32\tstruct', '__darwin_mcontext_avx32')
('__darwin_mcontext_avx64\tstruct', '__darwin_mcontext_avx64')
('__darwin_mmst_reg\tstruct', '__darwin_mmst_reg')
('__darwin_mode_t\ttypedef', '__darwin_mode_t')
('__darwin_natural_t\ttypedef', '__darwin_natural_t')
('__darwin_nl_item\ttypedef', '__darwin_nl_item')
('__darwin_off_t\ttypedef', '__darwin_off_t')
('__darwin_pid_t\ttypedef', '__darwin_pid_t')
('__darwin_pthread_attr_t\ttypedef', '__darwin_pthread_attr_t')
('__darwin_pthread_cond_t\ttypedef', '__darwin_pthread_cond_t')
('__darwin_pthread_condattr_t\ttypedef', '__darwin_pthread_condattr_t')
('__darwin_pthread_handler_rec\tstruct', '__darwin_pthread_handler_rec')
('__darwin_pthread_key_t\ttypedef', '__darwin_pthread_key_t')
('__darwin_pthread_mutex_t\ttypedef', '__darwin_pthread_mutex_t')
('__darwin_pthread_mutexattr_t\ttypedef', '__darwin_pthread_mutexattr_t')
('__darwin_pthread_once_t\ttypedef', '__darwin_pthread_once_t')
('__darwin_pthread_rwlock_t\ttypedef', '__darwin_pthread_rwlock_t')
('__darwin_pthread_rwlockattr_t\ttypedef', '__darwin_pthread_rwlockattr_t')
('__darwin_pthread_t\ttypedef', '__darwin_pthread_t')
('__darwin_ptrdiff_t\ttypedef', '__darwin_ptrdiff_t')
('__darwin_rune_t\ttypedef', '__darwin_rune_t')
('__darwin_sigaltstack\tstruct', '__darwin_sigaltstack')
('__darwin_sigset_t\ttypedef', '__darwin_sigset_t')
('__darwin_size_t\ttypedef', '__darwin_size_t')
('__darwin_socklen_t\ttypedef', '__darwin_socklen_t')
('__darwin_ssize_t\ttypedef', '__darwin_ssize_t')
('__darwin_suseconds_t\ttypedef', '__darwin_suseconds_t')
('__darwin_time_t\ttypedef', '__darwin_time_t')
('__darwin_ucontext\tstruct', '__darwin_ucontext')
('__darwin_uid_t\ttypedef', '__darwin_uid_t')
('__darwin_useconds_t\ttypedef', '__darwin_useconds_t')
('__darwin_uuid_string_t\ttypedef', '__darwin_uuid_string_t')
('__darwin_uuid_t\ttypedef', '__darwin_uuid_t')
('__darwin_va_list\ttypedef', '__darwin_va_list')
('__darwin_wchar_t\ttypedef', '__darwin_wchar_t')
('__darwin_wctrans_t\ttypedef', '__darwin_wctrans_t')
('__darwin_wctype_t\ttypedef', '__darwin_wctype_t')
('__darwin_wint_t\ttypedef', '__darwin_wint_t')
('__darwin_x86_avx_state64\tstruct', '__darwin_x86_avx_state64')
('__darwin_x86_debug_state32\tstruct', '__darwin_x86_debug_state32')
('__darwin_x86_debug_state64\tstruct', '__darwin_x86_debug_state64')
('__darwin_x86_exception_state64\tstruct', '__darwin_x86_exception_state64')
('__darwin_x86_float_state64\tstruct', '__darwin_x86_float_state64')
('__darwin_x86_thread_state64\tstruct', '__darwin_x86_thread_state64')
('__darwin_xmm_reg\tstruct', '__darwin_xmm_reg')
('__dead\tmacro', '__dead')
('__dead2\tmacro', '__dead2')
('__deprecated\tmacro', '__deprecated')
('__dtrace_isenabled$cxa_runtime$cxa_exception_rethrow$v1()\tint', '__dtrace_isenabled$cxa_runtime$cxa_exception_rethrow$v1()')
('__dtrace_isenabled$cxa_runtime$cxa_exception_throw$v1()\tint', '__dtrace_isenabled$cxa_runtime$cxa_exception_throw$v1()')
('__dtrace_probe$cxa_runtime$cxa_exception_rethrow$v1()\tvoid', '__dtrace_probe$cxa_runtime$cxa_exception_rethrow$v1()')
('__dtrace_probe$cxa_runtime$cxa_exception_throw$v1$766f6964202a(void *)\tvoid', '__dtrace_probe$cxa_runtime$cxa_exception_throw$v1$766f6964202a(${1:void *})')
('__glibcxx_base_allocator\tmacro', '__glibcxx_base_allocator')
('__glibcxx_class_requires\tmacro', '__glibcxx_class_requires')
('__glibcxx_class_requires2\tmacro', '__glibcxx_class_requires2')
('__glibcxx_class_requires3\tmacro', '__glibcxx_class_requires3')
('__glibcxx_class_requires4\tmacro', '__glibcxx_class_requires4')
('__glibcxx_digits\tmacro', '__glibcxx_digits')
('__glibcxx_digits10\tmacro', '__glibcxx_digits10')
('__glibcxx_double_has_denorm_loss\tmacro', '__glibcxx_double_has_denorm_loss')
('__glibcxx_double_tinyness_before\tmacro', '__glibcxx_double_tinyness_before')
('__glibcxx_double_traps\tmacro', '__glibcxx_double_traps')
('__glibcxx_float_has_denorm_loss\tmacro', '__glibcxx_float_has_denorm_loss')
('__glibcxx_float_tinyness_before\tmacro', '__glibcxx_float_tinyness_before')
('__glibcxx_float_traps\tmacro', '__glibcxx_float_traps')
('__glibcxx_function_requires\tmacro', '__glibcxx_function_requires')
('__glibcxx_integral_traps\tmacro', '__glibcxx_integral_traps')
('__glibcxx_long_double_has_denorm_loss\tmacro', '__glibcxx_long_double_has_denorm_loss')
('__glibcxx_long_double_tinyness_before\tmacro', '__glibcxx_long_double_tinyness_before')
('__glibcxx_long_double_traps\tmacro', '__glibcxx_long_double_traps')
('__glibcxx_max\tmacro', '__glibcxx_max')
('__glibcxx_min\tmacro', '__glibcxx_min')
('__glibcxx_requires_cond\tmacro', '__glibcxx_requires_cond')
('__glibcxx_requires_heap\tmacro', '__glibcxx_requires_heap')
('__glibcxx_requires_heap_pred\tmacro', '__glibcxx_requires_heap_pred')
('__glibcxx_requires_nonempty\tmacro', '__glibcxx_requires_nonempty')
('__glibcxx_requires_partitioned\tmacro', '__glibcxx_requires_partitioned')
('__glibcxx_requires_partitioned_pred\tmacro', '__glibcxx_requires_partitioned_pred')
('__glibcxx_requires_sorted\tmacro', '__glibcxx_requires_sorted')
('__glibcxx_requires_sorted_pred\tmacro', '__glibcxx_requires_sorted_pred')
('__glibcxx_requires_string\tmacro', '__glibcxx_requires_string')
('__glibcxx_requires_string_len\tmacro', '__glibcxx_requires_string_len')
('__glibcxx_requires_subscript\tmacro', '__glibcxx_requires_subscript')
('__glibcxx_requires_valid_range\tmacro', '__glibcxx_requires_valid_range')
('__glibcxx_signed\tmacro', '__glibcxx_signed')
('__gnu_cxx\tnamespace', '__gnu_cxx')
('__gnu_debug\tnamespace', '__gnu_debug')
('__gthread_active_p()\tint', '__gthread_active_p()')
('__gthread_getspecific(__gthread_key_t key)\tvoid *', '__gthread_getspecific(${1:__gthread_key_t key})')
('__gthread_key_create(__gthread_key_t *key, void (*dtor)(void *))\tint', '__gthread_key_create(${1:__gthread_key_t *key}, ${2:void (*dtor)(void *)})')
('__gthread_key_delete(__gthread_key_t key)\tint', '__gthread_key_delete(${1:__gthread_key_t key})')
('__gthread_key_t\ttypedef', '__gthread_key_t')
('__gthread_mutex_lock(__gthread_mutex_t *mutex)\tint', '__gthread_mutex_lock(${1:__gthread_mutex_t *mutex})')
('__gthread_mutex_t\ttypedef', '__gthread_mutex_t')
('__gthread_mutex_trylock(__gthread_mutex_t *mutex)\tint', '__gthread_mutex_trylock(${1:__gthread_mutex_t *mutex})')
('__gthread_mutex_unlock(__gthread_mutex_t *mutex)\tint', '__gthread_mutex_unlock(${1:__gthread_mutex_t *mutex})')
('__gthread_once(__gthread_once_t *once, void (*func)())\tint', '__gthread_once(${1:__gthread_once_t *once}, ${2:void (*func)()})')
('__gthread_once_t\ttypedef', '__gthread_once_t')
('__gthread_recursive_mutex_init_function(__gthread_recursive_mutex_t *mutex)\tint', '__gthread_recursive_mutex_init_function(${1:__gthread_recursive_mutex_t *mutex})')
('__gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *mutex)\tint', '__gthread_recursive_mutex_lock(${1:__gthread_recursive_mutex_t *mutex})')
('__gthread_recursive_mutex_t\ttypedef', '__gthread_recursive_mutex_t')
('__gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *mutex)\tint', '__gthread_recursive_mutex_trylock(${1:__gthread_recursive_mutex_t *mutex})')
('__gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *mutex)\tint', '__gthread_recursive_mutex_unlock(${1:__gthread_recursive_mutex_t *mutex})')
('__gthread_setspecific(__gthread_key_t key, const void *ptr)\tint', '__gthread_setspecific(${1:__gthread_key_t key}, ${2:const void *ptr})')
('__gthrw\tmacro', '__gthrw')
('__gthrw2\tmacro', '__gthrw2')
('__gthrw_\tmacro', '__gthrw_')
('__inline\tmacro', '__inline')
('__int128_t\ttypedef', '__int128_t')
('__int16_t\ttypedef', '__int16_t')
('__int32_t\ttypedef', '__int32_t')
('__int64_t\ttypedef', '__int64_t')
('__int8_t\ttypedef', '__int8_t')
('__isctype(__darwin_ct_rune_t _c, unsigned long _f)\t__darwin_ct_rune_t', '__isctype(${1:__darwin_ct_rune_t _c}, ${2:unsigned long _f})')
('__istype(__darwin_ct_rune_t _c, unsigned long _f)\tint', '__istype(${1:__darwin_ct_rune_t _c}, ${2:unsigned long _f})')
('__llvm__\tmacro', '__llvm__')
('__maskrune(__darwin_ct_rune_t, unsigned long)\tint', '__maskrune(${1:__darwin_ct_rune_t}, ${2:unsigned long})')
('__mb_cur_max\tint', '__mb_cur_max')
('__mbstate8\tchar [128]', '__mbstate8')
('__mbstate_t\ttypedef', '__mbstate_t')
('__need_fd_set\tmacro', '__need_fd_set')
('__need_mcontext_t\tmacro', '__need_mcontext_t')
('__need_stack_t\tmacro', '__need_stack_t')
('__need_struct_mcontext\tmacro', '__need_struct_mcontext')
('__need_struct_sigaltstack\tmacro', '__need_struct_sigaltstack')
('__need_struct_sigcontext\tmacro', '__need_struct_sigcontext')
('__need_struct_timespec\tmacro', '__need_struct_timespec')
('__need_struct_timeval\tmacro', '__need_struct_timeval')
('__need_struct_ucontext\tmacro', '__need_struct_ucontext')
('__need_ucontext_t\tmacro', '__need_ucontext_t')
('__offsetof\tmacro', '__offsetof')
('__pic__\tmacro', '__pic__')
('__printflike\tmacro', '__printflike')
('__private_extern__\tmacro', '__private_extern__')
('__pure\tmacro', '__pure')
('__pure2\tmacro', '__pure2')
('__restrict\tmacro', '__restrict')
('__sFILE\tstruct', '__sFILE')
('__sFILEX\tstruct', '__sFILEX')
('__sa_handler\tvoid (*)(int)', '__sa_handler')
('__sa_sigaction\tvoid (*)(int, struct __siginfo *, void *)', '__sa_sigaction')
('__sbuf\tstruct', '__sbuf')
('__scanflike\tmacro', '__scanflike')
('__sclearerr\tmacro', '__sclearerr')
('__sfeof\tmacro', '__sfeof')
('__sferror\tmacro', '__sferror')
('__sfileno\tmacro', '__sfileno')
('__sgetc\tmacro', '__sgetc')
('__sigaction\tstruct', '__sigaction')
('__sigaction_u\tunion', '__sigaction_u')
('__siginfo\tstruct', '__siginfo')
('__signed\tmacro', '__signed')
('__sputc(int _c, FILE *_p)\tint', '__sputc(${1:int _c}, ${2:FILE *_p})')
('__srget(FILE *)\tint', '__srget(${1:FILE *})')
('__stderrp\tFILE *', '__stderrp')
('__stdinp\tFILE *', '__stdinp')
('__stdoutp\tFILE *', '__stdoutp')
('__strfmonlike\tmacro', '__strfmonlike')
('__strftimelike\tmacro', '__strftimelike')
('__strong\tmacro', '__strong')
('__svfscanf(FILE *, const char *, __va_list_tag *)\tint', '__svfscanf(${1:FILE *}, ${2:const char *}, ${3:__va_list_tag *})')
('__swbuf(int, FILE *)\tint', '__swbuf(${1:int}, ${2:FILE *})')
('__throw_exception_again\tmacro', '__throw_exception_again')
('__tolower(__darwin_ct_rune_t)\t__darwin_ct_rune_t', '__tolower(${1:__darwin_ct_rune_t})')
('__toupper(__darwin_ct_rune_t)\t__darwin_ct_rune_t', '__toupper(${1:__darwin_ct_rune_t})')
('__tune_core2__\tmacro', '__tune_core2__')
('__uint128_t\ttypedef', '__uint128_t')
('__uint16_t\ttypedef', '__uint16_t')
('__uint32_t\ttypedef', '__uint32_t')
('__uint64_t\ttypedef', '__uint64_t')
('__uint8_t\ttypedef', '__uint8_t')
('__unavailable\tmacro', '__unavailable')
('__unsafe_unretained\tmacro', '__unsafe_unretained')
('__unused\tmacro', '__unused')
('__used\tmacro', '__used')
('__va_list_tag\tstruct', '__va_list_tag')
('__va_list_tag\ttypedef', '__va_list_tag')
('__volatile\tmacro', '__volatile')
('__wcwidth(__darwin_ct_rune_t _c)\tint', '__wcwidth(${1:__darwin_ct_rune_t _c})')
('__weak\tmacro', '__weak')
('__x86_64\tmacro', '__x86_64')
('__x86_64__\tmacro', '__x86_64__')
('_exit(int)\tvoid', '_exit(${1:int})')
('_mbstateL\tlong long', '_mbstateL')
('_opaque_pthread_attr_t\tstruct', '_opaque_pthread_attr_t')
('_opaque_pthread_cond_t\tstruct', '_opaque_pthread_cond_t')
('_opaque_pthread_condattr_t\tstruct', '_opaque_pthread_condattr_t')
('_opaque_pthread_mutex_t\tstruct', '_opaque_pthread_mutex_t')
('_opaque_pthread_mutexattr_t\tstruct', '_opaque_pthread_mutexattr_t')
('_opaque_pthread_once_t\tstruct', '_opaque_pthread_once_t')
('_opaque_pthread_rwlock_t\tstruct', '_opaque_pthread_rwlock_t')
('_opaque_pthread_rwlockattr_t\tstruct', '_opaque_pthread_rwlockattr_t')
('_opaque_pthread_t\tstruct', '_opaque_pthread_t')
('_tolower\tmacro', '_tolower')
('_toupper\tmacro', '_toupper')
('a64l(const char *)\tlong', 'a64l(${1:const char *})')
('abort()\tvoid', 'abort()')
('abs(int)\tint', 'abs(${1:int})')
('access(const char *, int)\tint', 'access(${1:const char *}, ${2:int})')
('accessx_descriptor\tstruct', 'accessx_descriptor')
('accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t)\tint', 'accessx_np(${1:const struct accessx_descriptor *}, ${2:size_t}, ${3:int *}, ${4:uid_t})')
('acct(const char *)\tint', 'acct(${1:const char *})')
('add_profil(char *, size_t, unsigned long, unsigned int)\tint', 'add_profil(${1:char *}, ${2:size_t}, ${3:unsigned long}, ${4:unsigned int})')
('alarm(unsigned int)\tunsigned int', 'alarm(${1:unsigned int})')
('alloca\tmacro', 'alloca')
('alloca(size_t)\tvoid *', 'alloca(${1:size_t})')
('arc4random()\tu_int32_t', 'arc4random()')
('arc4random_addrandom(unsigned char *, int)\tvoid', 'arc4random_addrandom(${1:unsigned char *}, ${2:int})')
('arc4random_buf(void *, size_t)\tvoid', 'arc4random_buf(${1:void *}, ${2:size_t})')
('arc4random_stir()\tvoid', 'arc4random_stir()')
('arc4random_uniform(u_int32_t)\tu_int32_t', 'arc4random_uniform(${1:u_int32_t})')
('asctime(const struct tm *)\tchar *', 'asctime(${1:const struct tm *})')
('asctime_r(const struct tm *, char *)\tchar *', 'asctime_r(${1:const struct tm *}, ${2:char *})')
('asprintf(char **, const char *, ...)\tint', 'asprintf(${1:char **}, ${2:const char *, ...})')
('atexit(void (*)())\tint', 'atexit(${1:void (*)()})')
('atexit_b(^(void))\tint', 'atexit_b(${1:^(void)})')
('atof(const char *)\tdouble', 'atof(${1:const char *})')
('atoi(const char *)\tint', 'atoi(${1:const char *})')
('atol(const char *)\tlong', 'atol(${1:const char *})')
('atoll(const char *)\tlong long', 'atoll(${1:const char *})')
('bcmp(const void *, const void *, size_t)\tint', 'bcmp(${1:const void *}, ${2:const void *}, ${3:size_t})')
('bcopy(const void *, void *, size_t)\tvoid', 'bcopy(${1:const void *}, ${2:void *}, ${3:size_t})')
('brk(const void *)\tvoid *', 'brk(${1:const void *})')
('bsearch(const void *, const void *, size_t, size_t, int (*)(const void *, const void *))\tvoid *', 'bsearch(${1:const void *}, ${2:const void *}, ${3:size_t}, ${4:size_t}, ${5:int (*)(const void *, const void *)})')
('bsearch_b(const void *, const void *, size_t, size_t, ^int(const void *, const void *))\tvoid *', 'bsearch_b(${1:const void *}, ${2:const void *}, ${3:size_t}, ${4:size_t}, ${5:^int(const void *, const void *)})')
('btowc(int)\twint_t', 'btowc(${1:int})')
('bzero(void *, size_t)\tvoid', 'bzero(${1:void *}, ${2:size_t})')
('calloc(size_t, size_t)\tvoid *', 'calloc(${1:size_t}, ${2:size_t})')
('cgetcap(char *, const char *, int)\tchar *', 'cgetcap(${1:char *}, ${2:const char *}, ${3:int})')
('cgetclose()\tint', 'cgetclose()')
('cgetent(char **, char **, const char *)\tint', 'cgetent(${1:char **}, ${2:char **}, ${3:const char *})')
('cgetfirst(char **, char **)\tint', 'cgetfirst(${1:char **}, ${2:char **})')
('cgetmatch(const char *, const char *)\tint', 'cgetmatch(${1:const char *}, ${2:const char *})')
('cgetnext(char **, char **)\tint', 'cgetnext(${1:char **}, ${2:char **})')
('cgetnum(char *, const char *, long *)\tint', 'cgetnum(${1:char *}, ${2:const char *}, ${3:long *})')
('cgetset(const char *)\tint', 'cgetset(${1:const char *})')
('cgetstr(char *, const char *, char **)\tint', 'cgetstr(${1:char *}, ${2:const char *}, ${3:char **})')
('cgetustr(char *, const char *, char **)\tint', 'cgetustr(${1:char *}, ${2:const char *}, ${3:char **})')
('chdir(const char *)\tint', 'chdir(${1:const char *})')
('chown(const char *, uid_t, gid_t)\tint', 'chown(${1:const char *}, ${2:uid_t}, ${3:gid_t})')
('chroot(const char *)\tint', 'chroot(${1:const char *})')
('clearerr(FILE *)\tvoid', 'clearerr(${1:FILE *})')
('clearerr_unlocked\tmacro', 'clearerr_unlocked')
('clock()\tclock_t', 'clock()')
('clock_t\ttypedef', 'clock_t')
('close(int)\tint', 'close(${1:int})')
('confstr(int, char *, size_t)\tsize_t', 'confstr(${1:int}, ${2:char *}, ${3:size_t})')
('crypt(const char *, const char *)\tchar *', 'crypt(${1:const char *}, ${2:const char *})')
('ct_rune_t\ttypedef', 'ct_rune_t')
('ctermid(char *)\tchar *', 'ctermid(${1:char *})')
('ctermid_r(char *)\tchar *', 'ctermid_r(${1:char *})')
('ctime(const time_t *)\tchar *', 'ctime(${1:const time_t *})')
('ctime_r(const time_t *, char *)\tchar *', 'ctime_r(${1:const time_t *}, ${2:char *})')
('daemon(int, int)\tint', 'daemon(${1:int}, ${2:int})')
('daylight\tint', 'daylight')
('dev_t\ttypedef', 'dev_t')
('devname(dev_t, mode_t)\tchar *', 'devname(${1:dev_t}, ${2:mode_t})')
('devname_r(dev_t, mode_t, char *buf, int len)\tchar *', 'devname_r(${1:dev_t}, ${2:mode_t}, ${3:char *buf}, ${4:int len})')
('difftime(time_t, time_t)\tdouble', 'difftime(${1:time_t}, ${2:time_t})')
('digittoint(int _c)\tint', 'digittoint(${1:int _c})')
('div(int, int)\tdiv_t', 'div(${1:int}, ${2:int})')
('div_t\ttypedef', 'div_t')
('dprintf(int, const char *, ...)\tint', 'dprintf(${1:int}, ${2:const char *, ...})')
('drand48()\tdouble', 'drand48()')
('dup(int)\tint', 'dup(${1:int})')
('dup2(int, int)\tint', 'dup2(${1:int}, ${2:int})')
('ecvt(double, int, int *, int *)\tchar *', 'ecvt(${1:double}, ${2:int}, ${3:int *}, ${4:int *})')
('encrypt(char *, int)\tvoid', 'encrypt(${1:char *}, ${2:int})')
('endusershell()\tvoid', 'endusershell()')
('erand48(unsigned short *)\tdouble', 'erand48(${1:unsigned short *})')
('exchangedata(const char *, const char *, unsigned int)\tint', 'exchangedata(${1:const char *}, ${2:const char *}, ${3:unsigned int})')
('execl(const char *, const char *, ...)\tint', 'execl(${1:const char *}, ${2:const char *, ...})')
('execle(const char *, const char *, ...)\tint', 'execle(${1:const char *}, ${2:const char *, ...})')
('execlp(const char *, const char *, ...)\tint', 'execlp(${1:const char *}, ${2:const char *, ...})')
('execv(const char *, char *const *)\tint', 'execv(${1:const char *}, ${2:char *const *})')
('execvP(const char *, const char *, char *const *)\tint', 'execvP(${1:const char *}, ${2:const char *}, ${3:char *const *})')
('execve(const char *, char *const *, char *const *)\tint', 'execve(${1:const char *}, ${2:char *const *}, ${3:char *const *})')
('execvp(const char *, char *const *)\tint', 'execvp(${1:const char *}, ${2:char *const *})')
('exit(int)\tvoid', 'exit(${1:int})')
('fchdir(int)\tint', 'fchdir(${1:int})')
('fchown(int, uid_t, gid_t)\tint', 'fchown(${1:int}, ${2:uid_t}, ${3:gid_t})')
('fclose(FILE *)\tint', 'fclose(${1:FILE *})')
('fcvt(double, int, int *, int *)\tchar *', 'fcvt(${1:double}, ${2:int}, ${3:int *}, ${4:int *})')
('fd_set\tstruct', 'fd_set')
('fd_set\ttypedef', 'fd_set')
('fdopen(int, const char *)\tFILE *', 'fdopen(${1:int}, ${2:const char *})')
('feof(FILE *)\tint', 'feof(${1:FILE *})')
('feof_unlocked\tmacro', 'feof_unlocked')
('ferror(FILE *)\tint', 'ferror(${1:FILE *})')
('ferror_unlocked\tmacro', 'ferror_unlocked')
('fflagstostr(unsigned long)\tchar *', 'fflagstostr(${1:unsigned long})')
('fflush(FILE *)\tint', 'fflush(${1:FILE *})')
('ffs(int)\tint', 'ffs(${1:int})')
('ffsctl(int, unsigned long, void *, unsigned int)\tint', 'ffsctl(${1:int}, ${2:unsigned long}, ${3:void *}, ${4:unsigned int})')
('ffsl(long)\tint', 'ffsl(${1:long})')
('fgetattrlist(int, void *, void *, size_t, unsigned int)\tint', 'fgetattrlist(${1:int}, ${2:void *}, ${3:void *}, ${4:size_t}, ${5:unsigned int})')
('fgetc(FILE *)\tint', 'fgetc(${1:FILE *})')
('fgetln(FILE *, size_t *)\tchar *', 'fgetln(${1:FILE *}, ${2:size_t *})')
('fgetpos(FILE *, fpos_t *)\tint', 'fgetpos(${1:FILE *}, ${2:fpos_t *})')
('fgets(char *, int, FILE *)\tchar *', 'fgets(${1:char *}, ${2:int}, ${3:FILE *})')
('fgetwc(FILE *)\twint_t', 'fgetwc(${1:FILE *})')
('fgetwln(FILE *, size_t *)\twchar_t *', 'fgetwln(${1:FILE *}, ${2:size_t *})')
('fgetws(wchar_t *, int, FILE *)\twchar_t *', 'fgetws(${1:wchar_t *}, ${2:int}, ${3:FILE *})')
('fileno(FILE *)\tint', 'fileno(${1:FILE *})')
('fileno_unlocked\tmacro', 'fileno_unlocked')
('flockfile(FILE *)\tvoid', 'flockfile(${1:FILE *})')
('fls(int)\tint', 'fls(${1:int})')
('flsl(long)\tint', 'flsl(${1:long})')
('fmtcheck(const char *, const char *)\tconst char *', 'fmtcheck(${1:const char *}, ${2:const char *})')
('fopen(const char *, const char *)\tFILE *', 'fopen(${1:const char *}, ${2:const char *})')
('fork()\tpid_t', 'fork()')
('fpathconf(int, int)\tlong', 'fpathconf(${1:int}, ${2:int})')
('fpos_t\ttypedef', 'fpos_t')
('fprintf(FILE *, const char *, ...)\tint', 'fprintf(${1:FILE *}, ${2:const char *, ...})')
('fpurge(FILE *)\tint', 'fpurge(${1:FILE *})')
('fputc(int, FILE *)\tint', 'fputc(${1:int}, ${2:FILE *})')
('fputs(const char *, FILE *)\tint', 'fputs(${1:const char *}, ${2:FILE *})')
('fputwc(wchar_t, FILE *)\twint_t', 'fputwc(${1:wchar_t}, ${2:FILE *})')
('fputws(const wchar_t *, FILE *)\tint', 'fputws(${1:const wchar_t *}, ${2:FILE *})')
('fread(void *, size_t, size_t, FILE *)\tsize_t', 'fread(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:FILE *})')
('free(void *)\tvoid', 'free(${1:void *})')
('freopen(const char *, const char *, FILE *)\tFILE *', 'freopen(${1:const char *}, ${2:const char *}, ${3:FILE *})')
('fropen\tmacro', 'fropen')
('fscanf(FILE *, const char *, ...)\tint', 'fscanf(${1:FILE *}, ${2:const char *, ...})')
('fsctl(const char *, unsigned long, void *, unsigned int)\tint', 'fsctl(${1:const char *}, ${2:unsigned long}, ${3:void *}, ${4:unsigned int})')
('fseek(FILE *, long, int)\tint', 'fseek(${1:FILE *}, ${2:long}, ${3:int})')
('fseeko(FILE *, off_t, int)\tint', 'fseeko(${1:FILE *}, ${2:off_t}, ${3:int})')
('fsetattrlist(int, void *, void *, size_t, unsigned int)\tint', 'fsetattrlist(${1:int}, ${2:void *}, ${3:void *}, ${4:size_t}, ${5:unsigned int})')
('fsetpos(FILE *, const fpos_t *)\tint', 'fsetpos(${1:FILE *}, ${2:const fpos_t *})')
('fssearchblock\tstruct', 'fssearchblock')
('fsync(int)\tint', 'fsync(${1:int})')
('ftell(FILE *)\tlong', 'ftell(${1:FILE *})')
('ftello(FILE *)\toff_t', 'ftello(${1:FILE *})')
('ftruncate(int, off_t)\tint', 'ftruncate(${1:int}, ${2:off_t})')
('ftrylockfile(FILE *)\tint', 'ftrylockfile(${1:FILE *})')
('funlockfile(FILE *)\tvoid', 'funlockfile(${1:FILE *})')
('funopen(const void *, int (*)(void *, char *, int), int (*)(void *, const char *, int), fpos_t (*)(void *, fpos_t, int), int (*)(void *))\tFILE *', 'funopen(${1:const void *}, ${2:int (*)(void *, char *, int)}, ${3:int (*)(void *, const char *, int)}, ${4:fpos_t (*)(void *, fpos_t, int)}, ${5:int (*)(void *)})')
('fwide(FILE *, int)\tint', 'fwide(${1:FILE *}, ${2:int})')
('fwopen\tmacro', 'fwopen')
('fwprintf(FILE *, const wchar_t *, ...)\tint', 'fwprintf(${1:FILE *}, ${2:const wchar_t *, ...})')
('fwrite(const void *, size_t, size_t, FILE *)\tsize_t', 'fwrite(${1:const void *}, ${2:size_t}, ${3:size_t}, ${4:FILE *})')
('fwscanf(FILE *, const wchar_t *, ...)\tint', 'fwscanf(${1:FILE *}, ${2:const wchar_t *, ...})')
('gcvt(double, int, char *)\tchar *', 'gcvt(${1:double}, ${2:int}, ${3:char *})')
('getattrlist(const char *, void *, void *, size_t, unsigned int)\tint', 'getattrlist(${1:const char *}, ${2:void *}, ${3:void *}, ${4:size_t}, ${5:unsigned int})')
('getbsize(int *, long *)\tchar *', 'getbsize(${1:int *}, ${2:long *})')
('getc(FILE *)\tint', 'getc(${1:FILE *})')
('getc_unlocked\tmacro', 'getc_unlocked')
('getc_unlocked(FILE *)\tint', 'getc_unlocked(${1:FILE *})')
('getchar()\tint', 'getchar()')
('getchar_unlocked\tmacro', 'getchar_unlocked')
('getchar_unlocked()\tint', 'getchar_unlocked()')
('getcwd(char *, size_t)\tchar *', 'getcwd(${1:char *}, ${2:size_t})')
('getdate(const char *)\tstruct tm *', 'getdate(${1:const char *})')
('getdate_err\tint', 'getdate_err')
('getdelim(char **, size_t *, int, FILE *)\tssize_t', 'getdelim(${1:char **}, ${2:size_t *}, ${3:int}, ${4:FILE *})')
('getdirentriesattr(int, void *, void *, size_t, unsigned int *, unsigned int *, unsigned int *, unsigned int)\tint', 'getdirentriesattr(${1:int}, ${2:void *}, ${3:void *}, ${4:size_t}, ${5:unsigned int *}, ${6:unsigned int *}, ${7:unsigned int *}, ${8:unsigned int})')
('getdomainname(char *, int)\tint', 'getdomainname(${1:char *}, ${2:int})')
('getdtablesize()\tint', 'getdtablesize()')
('getegid()\tgid_t', 'getegid()')
('getenv(const char *)\tchar *', 'getenv(${1:const char *})')
('geteuid()\tuid_t', 'geteuid()')
('getgid()\tgid_t', 'getgid()')
('getgrouplist(const char *, int, int *, int *)\tint', 'getgrouplist(${1:const char *}, ${2:int}, ${3:int *}, ${4:int *})')
('getgroups(int, gid_t *)\tint', 'getgroups(${1:int}, ${2:gid_t *})')
('gethostid()\tlong', 'gethostid()')
('gethostname(char *, size_t)\tint', 'gethostname(${1:char *}, ${2:size_t})')
('gethostuuid(unsigned char *, const struct timespec *)\tint', 'gethostuuid(${1:unsigned char *}, ${2:const struct timespec *})')
('getiopolicy_np(int, int)\tint', 'getiopolicy_np(${1:int}, ${2:int})')
('getline(char **, size_t *, FILE *)\tssize_t', 'getline(${1:char **}, ${2:size_t *}, ${3:FILE *})')
('getloadavg(double *, int)\tint', 'getloadavg(${1:double *}, ${2:int})')
('getlogin()\tchar *', 'getlogin()')
('getlogin_r(char *, size_t)\tint', 'getlogin_r(${1:char *}, ${2:size_t})')
('getmode(const void *, mode_t)\tmode_t', 'getmode(${1:const void *}, ${2:mode_t})')
('getopt(int, char *const *, const char *)\tint', 'getopt(${1:int}, ${2:char *const *}, ${3:const char *})')
('getpagesize()\tint', 'getpagesize()')
('getpass(const char *)\tchar *', 'getpass(${1:const char *})')
('getpeereid(int, uid_t *, gid_t *)\tint', 'getpeereid(${1:int}, ${2:uid_t *}, ${3:gid_t *})')
('getpgid(pid_t)\tpid_t', 'getpgid(${1:pid_t})')
('getpgrp()\tpid_t', 'getpgrp()')
('getpid()\tpid_t', 'getpid()')
('getppid()\tpid_t', 'getppid()')
('getpriority(int, id_t)\tint', 'getpriority(${1:int}, ${2:id_t})')
('getprogname()\tconst char *', 'getprogname()')
('getrlimit(int, struct rlimit *)\tint', 'getrlimit(${1:int}, ${2:struct rlimit *})')
('getrusage(int, struct rusage *)\tint', 'getrusage(${1:int}, ${2:struct rusage *})')
('gets(char *)\tchar *', 'gets(${1:char *})')
('getsgroups_np(int *, unsigned char *)\tint', 'getsgroups_np(${1:int *}, ${2:unsigned char *})')
('getsid(pid_t)\tpid_t', 'getsid(${1:pid_t})')
('getsubopt(char **, char *const *, char **)\tint', 'getsubopt(${1:char **}, ${2:char *const *}, ${3:char **})')
('getuid()\tuid_t', 'getuid()')
('getusershell()\tchar *', 'getusershell()')
('getw(FILE *)\tint', 'getw(${1:FILE *})')
('getwc(FILE *)\twint_t', 'getwc(${1:FILE *})')
('getwchar()\twint_t', 'getwchar()')
('getwd(char *)\tchar *', 'getwd(${1:char *})')
('getwgroups_np(int *, unsigned char *)\tint', 'getwgroups_np(${1:int *}, ${2:unsigned char *})')
('gid_t\ttypedef', 'gid_t')
('gmtime(const time_t *)\tstruct tm *', 'gmtime(${1:const time_t *})')
('gmtime_r(const time_t *, struct tm *)\tstruct tm *', 'gmtime_r(${1:const time_t *}, ${2:struct tm *})')
('grantpt(int)\tint', 'grantpt(${1:int})')
('heapsort(void *, size_t, size_t, int (*)(const void *, const void *))\tint', 'heapsort(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:int (*)(const void *, const void *)})')
('heapsort_b(void *, size_t, size_t, ^int(const void *, const void *))\tint', 'heapsort_b(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:^int(const void *, const void *)})')
('htonl\tmacro', 'htonl')
('htons\tmacro', 'htons')
('id_t\ttypedef', 'id_t')
('idtype_t\ttypedef', 'idtype_t')
('index(const char *, int)\tchar *', 'index(${1:const char *}, ${2:int})')
('initgroups(const char *, int)\tint', 'initgroups(${1:const char *}, ${2:int})')
('initstate(unsigned int, char *, size_t)\tchar *', 'initstate(${1:unsigned int}, ${2:char *}, ${3:size_t})')
('int16_t\ttypedef', 'int16_t')
('int32_t\ttypedef', 'int32_t')
('int64_t\ttypedef', 'int64_t')
('int8_t\ttypedef', 'int8_t')
('int_fast16_t\ttypedef', 'int_fast16_t')
('int_fast32_t\ttypedef', 'int_fast32_t')
('int_fast64_t\ttypedef', 'int_fast64_t')
('int_fast8_t\ttypedef', 'int_fast8_t')
('int_least16_t\ttypedef', 'int_least16_t')
('int_least32_t\ttypedef', 'int_least32_t')
('int_least64_t\ttypedef', 'int_least64_t')
('int_least8_t\ttypedef', 'int_least8_t')
('intmax_t\ttypedef', 'intmax_t')
('intptr_t\ttypedef', 'intptr_t')
('iruserok(unsigned long, int, const char *, const char *)\tint', 'iruserok(${1:unsigned long}, ${2:int}, ${3:const char *}, ${4:const char *})')
('iruserok_sa(const void *, int, int, const char *, const char *)\tint', 'iruserok_sa(${1:const void *}, ${2:int}, ${3:int}, ${4:const char *}, ${5:const char *})')
('isalnum(int _c)\tint', 'isalnum(${1:int _c})')
('isalpha(int _c)\tint', 'isalpha(${1:int _c})')
('isascii(int _c)\tint', 'isascii(${1:int _c})')
('isatty(int)\tint', 'isatty(${1:int})')
('isblank(int _c)\tint', 'isblank(${1:int _c})')
('iscntrl(int _c)\tint', 'iscntrl(${1:int _c})')
('isdigit(int _c)\tint', 'isdigit(${1:int _c})')
('isgraph(int _c)\tint', 'isgraph(${1:int _c})')
('ishexnumber(int _c)\tint', 'ishexnumber(${1:int _c})')
('isideogram(int _c)\tint', 'isideogram(${1:int _c})')
('islower(int _c)\tint', 'islower(${1:int _c})')
('isnumber(int _c)\tint', 'isnumber(${1:int _c})')
('isphonogram(int _c)\tint', 'isphonogram(${1:int _c})')
('isprint(int _c)\tint', 'isprint(${1:int _c})')
('ispunct(int _c)\tint', 'ispunct(${1:int _c})')
('isrune(int _c)\tint', 'isrune(${1:int _c})')
('issetugid()\tint', 'issetugid()')
('isspace(int _c)\tint', 'isspace(${1:int _c})')
('isspecial(int _c)\tint', 'isspecial(${1:int _c})')
('isupper(int _c)\tint', 'isupper(${1:int _c})')
('iswalnum(wint_t _wc)\tint', 'iswalnum(${1:wint_t _wc})')
('iswalpha(wint_t _wc)\tint', 'iswalpha(${1:wint_t _wc})')
('iswcntrl(wint_t _wc)\tint', 'iswcntrl(${1:wint_t _wc})')
('iswctype(wint_t _wc, wctype_t _charclass)\tint', 'iswctype(${1:wint_t _wc}, ${2:wctype_t _charclass})')
('iswdigit(wint_t _wc)\tint', 'iswdigit(${1:wint_t _wc})')
('iswgraph(wint_t _wc)\tint', 'iswgraph(${1:wint_t _wc})')
('iswlower(wint_t _wc)\tint', 'iswlower(${1:wint_t _wc})')
('iswprint(wint_t _wc)\tint', 'iswprint(${1:wint_t _wc})')
('iswpunct(wint_t _wc)\tint', 'iswpunct(${1:wint_t _wc})')
('iswspace(wint_t _wc)\tint', 'iswspace(${1:wint_t _wc})')
('iswupper(wint_t _wc)\tint', 'iswupper(${1:wint_t _wc})')
('iswxdigit(wint_t _wc)\tint', 'iswxdigit(${1:wint_t _wc})')
('isxdigit(int _c)\tint', 'isxdigit(${1:int _c})')
('jrand48(unsigned short *)\tlong', 'jrand48(${1:unsigned short *})')
('l64a(long)\tchar *', 'l64a(${1:long})')
('labs(long)\tlong', 'labs(${1:long})')
('lchown(const char *, uid_t, gid_t)\tint', 'lchown(${1:const char *}, ${2:uid_t}, ${3:gid_t})')
('lcong48(unsigned short *)\tvoid', 'lcong48(${1:unsigned short *})')
('lconv\tstruct', 'lconv')
('ldiv(long, long)\tldiv_t', 'ldiv(${1:long}, ${2:long})')
('ldiv_t\ttypedef', 'ldiv_t')
('link(const char *, const char *)\tint', 'link(${1:const char *}, ${2:const char *})')
('llabs(long long)\tlong long', 'llabs(${1:long long})')
('lldiv(long long, long long)\tlldiv_t', 'lldiv(${1:long long}, ${2:long long})')
('lldiv_t\ttypedef', 'lldiv_t')
('localeconv()\tstruct lconv *', 'localeconv()')
('localtime(const time_t *)\tstruct tm *', 'localtime(${1:const time_t *})')
('localtime_r(const time_t *, struct tm *)\tstruct tm *', 'localtime_r(${1:const time_t *}, ${2:struct tm *})')
('lockf(int, int, off_t)\tint', 'lockf(${1:int}, ${2:int}, ${3:off_t})')
('lrand48()\tlong', 'lrand48()')
('lseek(int, off_t, int)\toff_t', 'lseek(${1:int}, ${2:off_t}, ${3:int})')
('mach_port_t\ttypedef', 'mach_port_t')
('malloc(size_t)\tvoid *', 'malloc(${1:size_t})')
('mblen(const char *, size_t)\tint', 'mblen(${1:const char *}, ${2:size_t})')
('mbrlen(const char *, size_t, mbstate_t *)\tsize_t', 'mbrlen(${1:const char *}, ${2:size_t}, ${3:mbstate_t *})')
('mbrtowc(wchar_t *, const char *, size_t, mbstate_t *)\tsize_t', 'mbrtowc(${1:wchar_t *}, ${2:const char *}, ${3:size_t}, ${4:mbstate_t *})')
('mbsinit(const mbstate_t *)\tint', 'mbsinit(${1:const mbstate_t *})')
('mbsnrtowcs(wchar_t *, const char **, size_t, size_t, mbstate_t *)\tsize_t', 'mbsnrtowcs(${1:wchar_t *}, ${2:const char **}, ${3:size_t}, ${4:size_t}, ${5:mbstate_t *})')
('mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *)\tsize_t', 'mbsrtowcs(${1:wchar_t *}, ${2:const char **}, ${3:size_t}, ${4:mbstate_t *})')
('mbstate_t\ttypedef', 'mbstate_t')
('mbstowcs(wchar_t *, const char *, size_t)\tsize_t', 'mbstowcs(${1:wchar_t *}, ${2:const char *}, ${3:size_t})')
('mbtowc(wchar_t *, const char *, size_t)\tint', 'mbtowc(${1:wchar_t *}, ${2:const char *}, ${3:size_t})')
('mcontext_t\ttypedef', 'mcontext_t')
('memccpy(void *, const void *, int, size_t)\tvoid *', 'memccpy(${1:void *}, ${2:const void *}, ${3:int}, ${4:size_t})')
('memchr(const void *, int, size_t)\tvoid *', 'memchr(${1:const void *}, ${2:int}, ${3:size_t})')
('memcmp(const void *, const void *, size_t)\tint', 'memcmp(${1:const void *}, ${2:const void *}, ${3:size_t})')
('memcpy(void *, const void *, size_t)\tvoid *', 'memcpy(${1:void *}, ${2:const void *}, ${3:size_t})')
('memmem(const void *, size_t, const void *, size_t)\tvoid *', 'memmem(${1:const void *}, ${2:size_t}, ${3:const void *}, ${4:size_t})')
('memmove(void *, const void *, size_t)\tvoid *', 'memmove(${1:void *}, ${2:const void *}, ${3:size_t})')
('memset(void *, int, size_t)\tvoid *', 'memset(${1:void *}, ${2:int}, ${3:size_t})')
('memset_pattern16(void *, const void *, size_t)\tvoid', 'memset_pattern16(${1:void *}, ${2:const void *}, ${3:size_t})')
('memset_pattern4(void *, const void *, size_t)\tvoid', 'memset_pattern4(${1:void *}, ${2:const void *}, ${3:size_t})')
('memset_pattern8(void *, const void *, size_t)\tvoid', 'memset_pattern8(${1:void *}, ${2:const void *}, ${3:size_t})')
('mergesort(void *, size_t, size_t, int (*)(const void *, const void *))\tint', 'mergesort(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:int (*)(const void *, const void *)})')
('mergesort_b(void *, size_t, size_t, ^int(const void *, const void *))\tint', 'mergesort_b(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:^int(const void *, const void *)})')
('mkdtemp(char *)\tchar *', 'mkdtemp(${1:char *})')
('mknod(const char *, mode_t, dev_t)\tint', 'mknod(${1:const char *}, ${2:mode_t}, ${3:dev_t})')
('mkstemp(char *)\tint', 'mkstemp(${1:char *})')
('mkstemps(char *, int)\tint', 'mkstemps(${1:char *}, ${2:int})')
('mktemp(char *)\tchar *', 'mktemp(${1:char *})')
('mktime(struct tm *)\ttime_t', 'mktime(${1:struct tm *})')
('mode_t\ttypedef', 'mode_t')
('mrand48()\tlong', 'mrand48()')
('nanosleep(const struct timespec *, struct timespec *)\tint', 'nanosleep(${1:const struct timespec *}, ${2:struct timespec *})')
('nfssvc(int, void *)\tint', 'nfssvc(${1:int}, ${2:void *})')
('nice(int)\tint', 'nice(${1:int})')
('nrand48(unsigned short *)\tlong', 'nrand48(${1:unsigned short *})')
('ntohl\tmacro', 'ntohl')
('ntohs\tmacro', 'ntohs')
('off_t\ttypedef', 'off_t')
('offsetof\tmacro', 'offsetof')
('operator delete(void *)\tvoid', 'operator delete(${1:void *})')
('operator delete(void *, const std::nothrow_t &)\tvoid', 'operator delete(${1:void *}, ${2:const std::nothrow_t &})')
('operator delete(void *, void *)\tvoid', 'operator delete(${1:void *}, ${2:void *})')
('operator delete[](void *)\tvoid', 'operator delete[](${1:void *})')
('operator delete[](void *, const std::nothrow_t &)\tvoid', 'operator delete[](${1:void *}, ${2:const std::nothrow_t &})')
('operator delete[](void *, void *)\tvoid', 'operator delete[](${1:void *}, ${2:void *})')
('operator new(std::size_t)\tvoid *', 'operator new(${1:std::size_t})')
('operator new(std::size_t, const std::nothrow_t &)\tvoid *', 'operator new(${1:std::size_t}, ${2:const std::nothrow_t &})')
('operator new(std::size_t, void *__p)\tvoid *', 'operator new(${1:std::size_t}, ${2:void *__p})')
('operator new[](std::size_t)\tvoid *', 'operator new[](${1:std::size_t})')
('operator new[](std::size_t, const std::nothrow_t &)\tvoid *', 'operator new[](${1:std::size_t}, ${2:const std::nothrow_t &})')
('operator new[](std::size_t, void *__p)\tvoid *', 'operator new[](${1:std::size_t}, ${2:void *__p})')
('optarg\tchar *', 'optarg')
('opterr\tint', 'opterr')
('optind\tint', 'optind')
('optopt\tint', 'optopt')
('optreset\tint', 'optreset')
('pathconf(const char *, int)\tlong', 'pathconf(${1:const char *}, ${2:int})')
('pause()\tint', 'pause()')
('pclose(FILE *)\tint', 'pclose(${1:FILE *})')
('perror(const char *)\tvoid', 'perror(${1:const char *})')
('pid_t\ttypedef', 'pid_t')
('pipe(int *)\tint', 'pipe(${1:int *})')
('popen(const char *, const char *)\tFILE *', 'popen(${1:const char *}, ${2:const char *})')
('posix2time(time_t)\ttime_t', 'posix2time(${1:time_t})')
('posix_memalign(void **, size_t, size_t)\tint', 'posix_memalign(${1:void **}, ${2:size_t}, ${3:size_t})')
('posix_openpt(int)\tint', 'posix_openpt(${1:int})')
('pread(int, void *, size_t, off_t)\tssize_t', 'pread(${1:int}, ${2:void *}, ${3:size_t}, ${4:off_t})')
('printf(const char *, ...)\tint', 'printf(${1:const char *, ...})')
('profil(char *, size_t, unsigned long, unsigned int)\tint', 'profil(${1:char *}, ${2:size_t}, ${3:unsigned long}, ${4:unsigned int})')
('pselect(int, fd_set *, fd_set *, fd_set *, const struct timespec *, const sigset_t *)\tint', 'pselect(${1:int}, ${2:fd_set *}, ${3:fd_set *}, ${4:fd_set *}, ${5:const struct timespec *}, ${6:const sigset_t *})')
('psort(void *, size_t, size_t, int (*)(const void *, const void *))\tvoid', 'psort(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:int (*)(const void *, const void *)})')
('psort_b(void *, size_t, size_t, ^int(const void *, const void *))\tvoid', 'psort_b(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:^int(const void *, const void *)})')
('psort_r(void *, size_t, size_t, void *, int (*)(void *, const void *, const void *))\tvoid', 'psort_r(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:void *}, ${5:int (*)(void *, const void *, const void *)})')
('pthread_atfork(void (*)(), void (*)(), void (*)())\tint', 'pthread_atfork(${1:void (*)()}, ${2:void (*)()}, ${3:void (*)()})')
('pthread_attr_destroy(pthread_attr_t *)\tint', 'pthread_attr_destroy(${1:pthread_attr_t *})')
('pthread_attr_getdetachstate(const pthread_attr_t *, int *)\tint', 'pthread_attr_getdetachstate(${1:const pthread_attr_t *}, ${2:int *})')
('pthread_attr_getguardsize(const pthread_attr_t *, size_t *)\tint', 'pthread_attr_getguardsize(${1:const pthread_attr_t *}, ${2:size_t *})')
('pthread_attr_getinheritsched(const pthread_attr_t *, int *)\tint', 'pthread_attr_getinheritsched(${1:const pthread_attr_t *}, ${2:int *})')
('pthread_attr_getschedparam(const pthread_attr_t *, struct sched_param *)\tint', 'pthread_attr_getschedparam(${1:const pthread_attr_t *}, ${2:struct sched_param *})')
('pthread_attr_getschedpolicy(const pthread_attr_t *, int *)\tint', 'pthread_attr_getschedpolicy(${1:const pthread_attr_t *}, ${2:int *})')
('pthread_attr_getscope(const pthread_attr_t *, int *)\tint', 'pthread_attr_getscope(${1:const pthread_attr_t *}, ${2:int *})')
('pthread_attr_getstack(const pthread_attr_t *, void **, size_t *)\tint', 'pthread_attr_getstack(${1:const pthread_attr_t *}, ${2:void **}, ${3:size_t *})')
('pthread_attr_getstackaddr(const pthread_attr_t *, void **)\tint', 'pthread_attr_getstackaddr(${1:const pthread_attr_t *}, ${2:void **})')
('pthread_attr_getstacksize(const pthread_attr_t *, size_t *)\tint', 'pthread_attr_getstacksize(${1:const pthread_attr_t *}, ${2:size_t *})')
('pthread_attr_init(pthread_attr_t *)\tint', 'pthread_attr_init(${1:pthread_attr_t *})')
('pthread_attr_setdetachstate(pthread_attr_t *, int)\tint', 'pthread_attr_setdetachstate(${1:pthread_attr_t *}, ${2:int})')
('pthread_attr_setguardsize(pthread_attr_t *, size_t)\tint', 'pthread_attr_setguardsize(${1:pthread_attr_t *}, ${2:size_t})')
('pthread_attr_setinheritsched(pthread_attr_t *, int)\tint', 'pthread_attr_setinheritsched(${1:pthread_attr_t *}, ${2:int})')
('pthread_attr_setschedparam(pthread_attr_t *, const struct sched_param *)\tint', 'pthread_attr_setschedparam(${1:pthread_attr_t *}, ${2:const struct sched_param *})')
('pthread_attr_setschedpolicy(pthread_attr_t *, int)\tint', 'pthread_attr_setschedpolicy(${1:pthread_attr_t *}, ${2:int})')
('pthread_attr_setscope(pthread_attr_t *, int)\tint', 'pthread_attr_setscope(${1:pthread_attr_t *}, ${2:int})')
('pthread_attr_setstack(pthread_attr_t *, void *, size_t)\tint', 'pthread_attr_setstack(${1:pthread_attr_t *}, ${2:void *}, ${3:size_t})')
('pthread_attr_setstackaddr(pthread_attr_t *, void *)\tint', 'pthread_attr_setstackaddr(${1:pthread_attr_t *}, ${2:void *})')
('pthread_attr_setstacksize(pthread_attr_t *, size_t)\tint', 'pthread_attr_setstacksize(${1:pthread_attr_t *}, ${2:size_t})')
('pthread_attr_t\ttypedef', 'pthread_attr_t')
('pthread_cancel(pthread_t)\tint', 'pthread_cancel(${1:pthread_t})')
('pthread_cleanup_pop\tmacro', 'pthread_cleanup_pop')
('pthread_cleanup_push\tmacro', 'pthread_cleanup_push')
('pthread_cond_broadcast(pthread_cond_t *)\tint', 'pthread_cond_broadcast(${1:pthread_cond_t *})')
('pthread_cond_destroy(pthread_cond_t *)\tint', 'pthread_cond_destroy(${1:pthread_cond_t *})')
('pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *)\tint', 'pthread_cond_init(${1:pthread_cond_t *}, ${2:const pthread_condattr_t *})')
('pthread_cond_signal(pthread_cond_t *)\tint', 'pthread_cond_signal(${1:pthread_cond_t *})')
('pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t)\tint', 'pthread_cond_signal_thread_np(${1:pthread_cond_t *}, ${2:pthread_t})')
('pthread_cond_t\ttypedef', 'pthread_cond_t')
('pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const struct timespec *)\tint', 'pthread_cond_timedwait(${1:pthread_cond_t *}, ${2:pthread_mutex_t *}, ${3:const struct timespec *})')
('pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const struct timespec *)\tint', 'pthread_cond_timedwait_relative_np(${1:pthread_cond_t *}, ${2:pthread_mutex_t *}, ${3:const struct timespec *})')
('pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *)\tint', 'pthread_cond_wait(${1:pthread_cond_t *}, ${2:pthread_mutex_t *})')
('pthread_condattr_destroy(pthread_condattr_t *)\tint', 'pthread_condattr_destroy(${1:pthread_condattr_t *})')
('pthread_condattr_getpshared(const pthread_condattr_t *, int *)\tint', 'pthread_condattr_getpshared(${1:const pthread_condattr_t *}, ${2:int *})')
('pthread_condattr_init(pthread_condattr_t *)\tint', 'pthread_condattr_init(${1:pthread_condattr_t *})')
('pthread_condattr_setpshared(pthread_condattr_t *, int)\tint', 'pthread_condattr_setpshared(${1:pthread_condattr_t *}, ${2:int})')
('pthread_condattr_t\ttypedef', 'pthread_condattr_t')
('pthread_create(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *)\tint', 'pthread_create(${1:pthread_t *}, ${2:const pthread_attr_t *}, ${3:void *(*)(void *)}, ${4:void *})')
('pthread_create_suspended_np(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *)\tint', 'pthread_create_suspended_np(${1:pthread_t *}, ${2:const pthread_attr_t *}, ${3:void *(*)(void *)}, ${4:void *})')
('pthread_detach(pthread_t)\tint', 'pthread_detach(${1:pthread_t})')
('pthread_equal(pthread_t, pthread_t)\tint', 'pthread_equal(${1:pthread_t}, ${2:pthread_t})')
('pthread_exit(void *)\tvoid', 'pthread_exit(${1:void *})')
('pthread_from_mach_thread_np(mach_port_t)\tpthread_t', 'pthread_from_mach_thread_np(${1:mach_port_t})')
('pthread_get_stackaddr_np(pthread_t)\tvoid *', 'pthread_get_stackaddr_np(${1:pthread_t})')
('pthread_get_stacksize_np(pthread_t)\tsize_t', 'pthread_get_stacksize_np(${1:pthread_t})')
('pthread_getconcurrency()\tint', 'pthread_getconcurrency()')
('pthread_getname_np(pthread_t, char *, size_t)\tint', 'pthread_getname_np(${1:pthread_t}, ${2:char *}, ${3:size_t})')
('pthread_getschedparam(pthread_t, int *, struct sched_param *)\tint', 'pthread_getschedparam(${1:pthread_t}, ${2:int *}, ${3:struct sched_param *})')
('pthread_getspecific(pthread_key_t)\tvoid *', 'pthread_getspecific(${1:pthread_key_t})')
('pthread_getugid_np(uid_t *, gid_t *)\tint', 'pthread_getugid_np(${1:uid_t *}, ${2:gid_t *})')
('pthread_is_threaded_np()\tint', 'pthread_is_threaded_np()')
('pthread_join(pthread_t, void **)\tint', 'pthread_join(${1:pthread_t}, ${2:void **})')
('pthread_key_create(pthread_key_t *, void (*)(void *))\tint', 'pthread_key_create(${1:pthread_key_t *}, ${2:void (*)(void *)})')
('pthread_key_delete(pthread_key_t)\tint', 'pthread_key_delete(${1:pthread_key_t})')
('pthread_key_t\ttypedef', 'pthread_key_t')
('pthread_kill(pthread_t, int)\tint', 'pthread_kill(${1:pthread_t}, ${2:int})')
('pthread_mach_thread_np(pthread_t)\tmach_port_t', 'pthread_mach_thread_np(${1:pthread_t})')
('pthread_main_np()\tint', 'pthread_main_np()')
('pthread_mutex_destroy(pthread_mutex_t *)\tint', 'pthread_mutex_destroy(${1:pthread_mutex_t *})')
('pthread_mutex_getprioceiling(const pthread_mutex_t *, int *)\tint', 'pthread_mutex_getprioceiling(${1:const pthread_mutex_t *}, ${2:int *})')
('pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *)\tint', 'pthread_mutex_init(${1:pthread_mutex_t *}, ${2:const pthread_mutexattr_t *})')
('pthread_mutex_lock(pthread_mutex_t *)\tint', 'pthread_mutex_lock(${1:pthread_mutex_t *})')
('pthread_mutex_setprioceiling(pthread_mutex_t *, int, int *)\tint', 'pthread_mutex_setprioceiling(${1:pthread_mutex_t *}, ${2:int}, ${3:int *})')
('pthread_mutex_t\ttypedef', 'pthread_mutex_t')
('pthread_mutex_trylock(pthread_mutex_t *)\tint', 'pthread_mutex_trylock(${1:pthread_mutex_t *})')
('pthread_mutex_unlock(pthread_mutex_t *)\tint', 'pthread_mutex_unlock(${1:pthread_mutex_t *})')
('pthread_mutexattr_destroy(pthread_mutexattr_t *)\tint', 'pthread_mutexattr_destroy(${1:pthread_mutexattr_t *})')
('pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *, int *)\tint', 'pthread_mutexattr_getprioceiling(${1:const pthread_mutexattr_t *}, ${2:int *})')
('pthread_mutexattr_getprotocol(const pthread_mutexattr_t *, int *)\tint', 'pthread_mutexattr_getprotocol(${1:const pthread_mutexattr_t *}, ${2:int *})')
('pthread_mutexattr_getpshared(const pthread_mutexattr_t *, int *)\tint', 'pthread_mutexattr_getpshared(${1:const pthread_mutexattr_t *}, ${2:int *})')
('pthread_mutexattr_gettype(const pthread_mutexattr_t *, int *)\tint', 'pthread_mutexattr_gettype(${1:const pthread_mutexattr_t *}, ${2:int *})')
('pthread_mutexattr_init(pthread_mutexattr_t *)\tint', 'pthread_mutexattr_init(${1:pthread_mutexattr_t *})')
('pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int)\tint', 'pthread_mutexattr_setprioceiling(${1:pthread_mutexattr_t *}, ${2:int})')
('pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int)\tint', 'pthread_mutexattr_setprotocol(${1:pthread_mutexattr_t *}, ${2:int})')
('pthread_mutexattr_setpshared(pthread_mutexattr_t *, int)\tint', 'pthread_mutexattr_setpshared(${1:pthread_mutexattr_t *}, ${2:int})')
('pthread_mutexattr_settype(pthread_mutexattr_t *, int)\tint', 'pthread_mutexattr_settype(${1:pthread_mutexattr_t *}, ${2:int})')
('pthread_mutexattr_t\ttypedef', 'pthread_mutexattr_t')
('pthread_once(pthread_once_t *, void (*)())\tint', 'pthread_once(${1:pthread_once_t *}, ${2:void (*)()})')
('pthread_once_t\ttypedef', 'pthread_once_t')
('pthread_rwlock_destroy(pthread_rwlock_t *)\tint', 'pthread_rwlock_destroy(${1:pthread_rwlock_t *})')
('pthread_rwlock_downgrade_np(pthread_rwlock_t *)\tint', 'pthread_rwlock_downgrade_np(${1:pthread_rwlock_t *})')
('pthread_rwlock_held_np(pthread_rwlock_t *)\tint', 'pthread_rwlock_held_np(${1:pthread_rwlock_t *})')
('pthread_rwlock_init(pthread_rwlock_t *, const pthread_rwlockattr_t *)\tint', 'pthread_rwlock_init(${1:pthread_rwlock_t *}, ${2:const pthread_rwlockattr_t *})')
('pthread_rwlock_longrdlock_np(pthread_rwlock_t *)\tint', 'pthread_rwlock_longrdlock_np(${1:pthread_rwlock_t *})')
('pthread_rwlock_rdheld_np(pthread_rwlock_t *)\tint', 'pthread_rwlock_rdheld_np(${1:pthread_rwlock_t *})')
('pthread_rwlock_rdlock(pthread_rwlock_t *)\tint', 'pthread_rwlock_rdlock(${1:pthread_rwlock_t *})')
('pthread_rwlock_t\ttypedef', 'pthread_rwlock_t')
('pthread_rwlock_tryrdlock(pthread_rwlock_t *)\tint', 'pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *})')
('pthread_rwlock_tryupgrade_np(pthread_rwlock_t *)\tint', 'pthread_rwlock_tryupgrade_np(${1:pthread_rwlock_t *})')
('pthread_rwlock_trywrlock(pthread_rwlock_t *)\tint', 'pthread_rwlock_trywrlock(${1:pthread_rwlock_t *})')
('pthread_rwlock_unlock(pthread_rwlock_t *)\tint', 'pthread_rwlock_unlock(${1:pthread_rwlock_t *})')
('pthread_rwlock_upgrade_np(pthread_rwlock_t *)\tint', 'pthread_rwlock_upgrade_np(${1:pthread_rwlock_t *})')
('pthread_rwlock_wrheld_np(pthread_rwlock_t *)\tint', 'pthread_rwlock_wrheld_np(${1:pthread_rwlock_t *})')
('pthread_rwlock_wrlock(pthread_rwlock_t *)\tint', 'pthread_rwlock_wrlock(${1:pthread_rwlock_t *})')
('pthread_rwlock_yieldwrlock_np(pthread_rwlock_t *)\tint', 'pthread_rwlock_yieldwrlock_np(${1:pthread_rwlock_t *})')
('pthread_rwlockattr_destroy(pthread_rwlockattr_t *)\tint', 'pthread_rwlockattr_destroy(${1:pthread_rwlockattr_t *})')
('pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *, int *)\tint', 'pthread_rwlockattr_getpshared(${1:const pthread_rwlockattr_t *}, ${2:int *})')
('pthread_rwlockattr_init(pthread_rwlockattr_t *)\tint', 'pthread_rwlockattr_init(${1:pthread_rwlockattr_t *})')
('pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int)\tint', 'pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *}, ${2:int})')
('pthread_rwlockattr_t\ttypedef', 'pthread_rwlockattr_t')
('pthread_self()\tpthread_t', 'pthread_self()')
('pthread_setcancelstate(int, int *)\tint', 'pthread_setcancelstate(${1:int}, ${2:int *})')
('pthread_setcanceltype(int, int *)\tint', 'pthread_setcanceltype(${1:int}, ${2:int *})')
('pthread_setconcurrency(int)\tint', 'pthread_setconcurrency(${1:int})')
('pthread_setname_np(const char *)\tint', 'pthread_setname_np(${1:const char *})')
('pthread_setschedparam(pthread_t, int, const struct sched_param *)\tint', 'pthread_setschedparam(${1:pthread_t}, ${2:int}, ${3:const struct sched_param *})')
('pthread_setspecific(pthread_key_t, const void *)\tint', 'pthread_setspecific(${1:pthread_key_t}, ${2:const void *})')
('pthread_setugid_np(uid_t, gid_t)\tint', 'pthread_setugid_np(${1:uid_t}, ${2:gid_t})')
('pthread_sigmask(int, const sigset_t *, sigset_t *)\tint', 'pthread_sigmask(${1:int}, ${2:const sigset_t *}, ${3:sigset_t *})')
('pthread_t\ttypedef', 'pthread_t')
('pthread_testcancel()\tvoid', 'pthread_testcancel()')
('pthread_threadid_np(pthread_t, __uint64_t *)\tint', 'pthread_threadid_np(${1:pthread_t}, ${2:__uint64_t *})')
('pthread_yield_np()\tvoid', 'pthread_yield_np()')
('ptrdiff_t\ttypedef', 'ptrdiff_t')
('ptsname(int)\tchar *', 'ptsname(${1:int})')
('putc(int, FILE *)\tint', 'putc(${1:int}, ${2:FILE *})')
('putc_unlocked\tmacro', 'putc_unlocked')
('putc_unlocked(int, FILE *)\tint', 'putc_unlocked(${1:int}, ${2:FILE *})')
('putchar(int)\tint', 'putchar(${1:int})')
('putchar_unlocked\tmacro', 'putchar_unlocked')
('putchar_unlocked(int)\tint', 'putchar_unlocked(${1:int})')
('putenv(char *)\tint', 'putenv(${1:char *})')
('puts(const char *)\tint', 'puts(${1:const char *})')
('putw(int, FILE *)\tint', 'putw(${1:int}, ${2:FILE *})')
('putwc(wchar_t, FILE *)\twint_t', 'putwc(${1:wchar_t}, ${2:FILE *})')
('putwchar(wchar_t)\twint_t', 'putwchar(${1:wchar_t})')
('pwrite(int, const void *, size_t, off_t)\tssize_t', 'pwrite(${1:int}, ${2:const void *}, ${3:size_t}, ${4:off_t})')
('qsort(void *, size_t, size_t, int (*)(const void *, const void *))\tvoid', 'qsort(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:int (*)(const void *, const void *)})')
('qsort_b(void *, size_t, size_t, ^int(const void *, const void *))\tvoid', 'qsort_b(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:^int(const void *, const void *)})')
('qsort_r(void *, size_t, size_t, void *, int (*)(void *, const void *, const void *))\tvoid', 'qsort_r(${1:void *}, ${2:size_t}, ${3:size_t}, ${4:void *}, ${5:int (*)(void *, const void *, const void *)})')
('radixsort(const unsigned char **, int, const unsigned char *, unsigned int)\tint', 'radixsort(${1:const unsigned char **}, ${2:int}, ${3:const unsigned char *}, ${4:unsigned int})')
('rand()\tint', 'rand()')
('rand_r(unsigned int *)\tint', 'rand_r(${1:unsigned int *})')
('random()\tlong', 'random()')
('rcmd(char **, int, const char *, const char *, const char *, int *)\tint', 'rcmd(${1:char **}, ${2:int}, ${3:const char *}, ${4:const char *}, ${5:const char *}, ${6:int *})')
('rcmd_af(char **, int, const char *, const char *, const char *, int *, int)\tint', 'rcmd_af(${1:char **}, ${2:int}, ${3:const char *}, ${4:const char *}, ${5:const char *}, ${6:int *}, ${7:int})')
('read(int, void *, size_t)\tssize_t', 'read(${1:int}, ${2:void *}, ${3:size_t})')
('readlink(const char *, char *, size_t)\tssize_t', 'readlink(${1:const char *}, ${2:char *}, ${3:size_t})')
('realloc(void *, size_t)\tvoid *', 'realloc(${1:void *}, ${2:size_t})')
('reallocf(void *, size_t)\tvoid *', 'reallocf(${1:void *}, ${2:size_t})')
('realpath(const char *, char *)\tchar *', 'realpath(${1:const char *}, ${2:char *})')
('reboot(int)\tint', 'reboot(${1:int})')
('register_t\ttypedef', 'register_t')
('remove(const char *)\tint', 'remove(${1:const char *})')
('rename(const char *, const char *)\tint', 'rename(${1:const char *}, ${2:const char *})')
('revoke(const char *)\tint', 'revoke(${1:const char *})')
('rewind(FILE *)\tvoid', 'rewind(${1:FILE *})')
('rindex(const char *, int)\tchar *', 'rindex(${1:const char *}, ${2:int})')
('rlim_t\ttypedef', 'rlim_t')
('rlimit\tstruct', 'rlimit')
('rmdir(const char *)\tint', 'rmdir(${1:const char *})')
('rresvport(int *)\tint', 'rresvport(${1:int *})')
('rresvport_af(int *, int)\tint', 'rresvport_af(${1:int *}, ${2:int})')
('ru_first\tmacro', 'ru_first')
('ru_last\tmacro', 'ru_last')
('rune_t\ttypedef', 'rune_t')
('rusage\tstruct', 'rusage')
('ruserok(const char *, int, const char *, const char *)\tint', 'ruserok(${1:const char *}, ${2:int}, ${3:const char *}, ${4:const char *})')
('sa_handler\tmacro', 'sa_handler')
('sa_sigaction\tmacro', 'sa_sigaction')
('sbrk(int)\tvoid *', 'sbrk(${1:int})')
('scanf(const char *, ...)\tint', 'scanf(${1:const char *, ...})')
('sched_get_priority_max(int)\tint', 'sched_get_priority_max(${1:int})')
('sched_get_priority_min(int)\tint', 'sched_get_priority_min(${1:int})')
('sched_param\tstruct', 'sched_param')
('sched_yield()\tint', 'sched_yield()')
('searchfs(const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *)\tint', 'searchfs(${1:const char *}, ${2:struct fssearchblock *}, ${3:unsigned long *}, ${4:unsigned int}, ${5:unsigned int}, ${6:struct searchstate *})')
('searchstate\tstruct', 'searchstate')
('seed48(unsigned short *)\tunsigned short *', 'seed48(${1:unsigned short *})')
('select(int, fd_set *, fd_set *, fd_set *, struct timeval *)\tint', 'select(${1:int}, ${2:fd_set *}, ${3:fd_set *}, ${4:fd_set *}, ${5:struct timeval *})')
('setattrlist(const char *, void *, void *, size_t, unsigned int)\tint', 'setattrlist(${1:const char *}, ${2:void *}, ${3:void *}, ${4:size_t}, ${5:unsigned int})')
('setbuf(FILE *, char *)\tvoid', 'setbuf(${1:FILE *}, ${2:char *})')
('setbuffer(FILE *, char *, int)\tvoid', 'setbuffer(${1:FILE *}, ${2:char *}, ${3:int})')
('setdomainname(const char *, int)\tint', 'setdomainname(${1:const char *}, ${2:int})')
('setegid(gid_t)\tint', 'setegid(${1:gid_t})')
('setenv(const char *, const char *, int)\tint', 'setenv(${1:const char *}, ${2:const char *}, ${3:int})')
('seteuid(uid_t)\tint', 'seteuid(${1:uid_t})')
('setgid(gid_t)\tint', 'setgid(${1:gid_t})')
('setgroups(int, const gid_t *)\tint', 'setgroups(${1:int}, ${2:const gid_t *})')
('sethostid(long)\tvoid', 'sethostid(${1:long})')
('sethostname(const char *, int)\tint', 'sethostname(${1:const char *}, ${2:int})')
('setiopolicy_np(int, int, int)\tint', 'setiopolicy_np(${1:int}, ${2:int}, ${3:int})')
('setkey(const char *)\tvoid', 'setkey(${1:const char *})')
('setlinebuf(FILE *)\tint', 'setlinebuf(${1:FILE *})')
('setlocale(int, const char *)\tchar *', 'setlocale(${1:int}, ${2:const char *})')
('setlogin(const char *)\tint', 'setlogin(${1:const char *})')
('setmode(const char *)\tvoid *', 'setmode(${1:const char *})')
('setpgid(pid_t, pid_t)\tint', 'setpgid(${1:pid_t}, ${2:pid_t})')
('setpgrp()\tpid_t', 'setpgrp()')
('setpriority(int, id_t, int)\tint', 'setpriority(${1:int}, ${2:id_t}, ${3:int})')
('setprogname(const char *)\tvoid', 'setprogname(${1:const char *})')
('setregid(gid_t, gid_t)\tint', 'setregid(${1:gid_t}, ${2:gid_t})')
('setreuid(uid_t, uid_t)\tint', 'setreuid(${1:uid_t}, ${2:uid_t})')
('setrgid(gid_t)\tint', 'setrgid(${1:gid_t})')
('setrlimit(int, const struct rlimit *)\tint', 'setrlimit(${1:int}, ${2:const struct rlimit *})')
('setruid(uid_t)\tint', 'setruid(${1:uid_t})')
('setsgroups_np(int, const unsigned char *)\tint', 'setsgroups_np(${1:int}, ${2:const unsigned char *})')
('setsid()\tpid_t', 'setsid()')
('setstate(const char *)\tchar *', 'setstate(${1:const char *})')
('setuid(uid_t)\tint', 'setuid(${1:uid_t})')
('setusershell()\tvoid', 'setusershell()')
('setvbuf(FILE *, char *, int, size_t)\tint', 'setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})')
('setwgroups_np(int, const unsigned char *)\tint', 'setwgroups_np(${1:int}, ${2:const unsigned char *})')
('sig_atomic_t\ttypedef', 'sig_atomic_t')
('sig_t\ttypedef', 'sig_t')
('sigaction\tstruct', 'sigaction')
('sigevent\tstruct', 'sigevent')
('siginfo_t\ttypedef', 'siginfo_t')
('sigmask\tmacro', 'sigmask')
('signal(int, void (*)(int))\tvoid (*)(int)', 'signal(${1:int}, ${2:void (*)(int)})')
('sigset_t\ttypedef', 'sigset_t')
('sigstack\tstruct', 'sigstack')
('sigval\tunion', 'sigval')
('sigvec\tstruct', 'sigvec')
('sival_int\tint', 'sival_int')
('sival_ptr\tvoid *', 'sival_ptr')
('size_t\ttypedef', 'size_t')
('sleep(unsigned int)\tunsigned int', 'sleep(${1:unsigned int})')
('snprintf(char *, size_t, const char *, ...)\tint', 'snprintf(${1:char *}, ${2:size_t}, ${3:const char *, ...})')
('sprintf(char *, const char *, ...)\tint', 'sprintf(${1:char *}, ${2:const char *, ...})')
('sradixsort(const unsigned char **, int, const unsigned char *, unsigned int)\tint', 'sradixsort(${1:const unsigned char **}, ${2:int}, ${3:const unsigned char *}, ${4:unsigned int})')
('srand(unsigned int)\tvoid', 'srand(${1:unsigned int})')
('srand48(long)\tvoid', 'srand48(${1:long})')
('sranddev()\tvoid', 'sranddev()')
('srandom(unsigned int)\tvoid', 'srandom(${1:unsigned int})')
('srandomdev()\tvoid', 'srandomdev()')
('sscanf(const char *, const char *, ...)\tint', 'sscanf(${1:const char *}, ${2:const char *, ...})')
('ssize_t\ttypedef', 'ssize_t')
('stack_t\ttypedef', 'stack_t')
('std\tnamespace', 'std')
('stderr\tmacro', 'stderr')
('stdin\tmacro', 'stdin')
('stdout\tmacro', 'stdout')
('stpcpy(char *, const char *)\tchar *', 'stpcpy(${1:char *}, ${2:const char *})')
('stpncpy(char *, const char *, size_t)\tchar *', 'stpncpy(${1:char *}, ${2:const char *}, ${3:size_t})')
('strcasecmp(const char *, const char *)\tint', 'strcasecmp(${1:const char *}, ${2:const char *})')
('strcasestr(const char *, const char *)\tchar *', 'strcasestr(${1:const char *}, ${2:const char *})')
('strcat(char *, const char *)\tchar *', 'strcat(${1:char *}, ${2:const char *})')
('strchr(const char *, int)\tchar *', 'strchr(${1:const char *}, ${2:int})')
('strcmp(const char *, const char *)\tint', 'strcmp(${1:const char *}, ${2:const char *})')
('strcoll(const char *, const char *)\tint', 'strcoll(${1:const char *}, ${2:const char *})')
('strcpy(char *, const char *)\tchar *', 'strcpy(${1:char *}, ${2:const char *})')
('strcspn(const char *, const char *)\tsize_t', 'strcspn(${1:const char *}, ${2:const char *})')
('strdup(const char *)\tchar *', 'strdup(${1:const char *})')
('strerror(int)\tchar *', 'strerror(${1:int})')
('strerror_r(int, char *, size_t)\tint', 'strerror_r(${1:int}, ${2:char *}, ${3:size_t})')
('strftime(char *, size_t, const char *, const struct tm *)\tsize_t', 'strftime(${1:char *}, ${2:size_t}, ${3:const char *}, ${4:const struct tm *})')
('strlcat(char *, const char *, size_t)\tsize_t', 'strlcat(${1:char *}, ${2:const char *}, ${3:size_t})')
('strlcpy(char *, const char *, size_t)\tsize_t', 'strlcpy(${1:char *}, ${2:const char *}, ${3:size_t})')
('strlen(const char *)\tsize_t', 'strlen(${1:const char *})')
('strmode(int, char *)\tvoid', 'strmode(${1:int}, ${2:char *})')
('strncasecmp(const char *, const char *, size_t)\tint', 'strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})')
('strncat(char *, const char *, size_t)\tchar *', 'strncat(${1:char *}, ${2:const char *}, ${3:size_t})')
('strncmp(const char *, const char *, size_t)\tint', 'strncmp(${1:const char *}, ${2:const char *}, ${3:size_t})')
('strncpy(char *, const char *, size_t)\tchar *', 'strncpy(${1:char *}, ${2:const char *}, ${3:size_t})')
('strndup(const char *, size_t)\tchar *', 'strndup(${1:const char *}, ${2:size_t})')
('strnlen(const char *, size_t)\tsize_t', 'strnlen(${1:const char *}, ${2:size_t})')
('strnstr(const char *, const char *, size_t)\tchar *', 'strnstr(${1:const char *}, ${2:const char *}, ${3:size_t})')
('strpbrk(const char *, const char *)\tchar *', 'strpbrk(${1:const char *}, ${2:const char *})')
('strptime(const char *, const char *, struct tm *)\tchar *', 'strptime(${1:const char *}, ${2:const char *}, ${3:struct tm *})')
('strrchr(const char *, int)\tchar *', 'strrchr(${1:const char *}, ${2:int})')
('strsep(char **, const char *)\tchar *', 'strsep(${1:char **}, ${2:const char *})')
('strsignal(int sig)\tchar *', 'strsignal(${1:int sig})')
('strspn(const char *, const char *)\tsize_t', 'strspn(${1:const char *}, ${2:const char *})')
('strstr(const char *, const char *)\tchar *', 'strstr(${1:const char *}, ${2:const char *})')
('strtod(const char *, char **)\tdouble', 'strtod(${1:const char *}, ${2:char **})')
('strtof(const char *, char **)\tfloat', 'strtof(${1:const char *}, ${2:char **})')
('strtofflags(char **, unsigned long *, unsigned long *)\tint', 'strtofflags(${1:char **}, ${2:unsigned long *}, ${3:unsigned long *})')
('strtok(char *, const char *)\tchar *', 'strtok(${1:char *}, ${2:const char *})')
('strtok_r(char *, const char *, char **)\tchar *', 'strtok_r(${1:char *}, ${2:const char *}, ${3:char **})')
('strtol(const char *, char **, int)\tlong', 'strtol(${1:const char *}, ${2:char **}, ${3:int})')
('strtold(const char *, char **)\tlong double', 'strtold(${1:const char *}, ${2:char **})')
('strtoll(const char *, char **, int)\tlong long', 'strtoll(${1:const char *}, ${2:char **}, ${3:int})')
('strtoq(const char *, char **, int)\tlong long', 'strtoq(${1:const char *}, ${2:char **}, ${3:int})')
('strtoul(const char *, char **, int)\tunsigned long', 'strtoul(${1:const char *}, ${2:char **}, ${3:int})')
('strtoull(const char *, char **, int)\tunsigned long long', 'strtoull(${1:const char *}, ${2:char **}, ${3:int})')
('strtouq(const char *, char **, int)\tunsigned long long', 'strtouq(${1:const char *}, ${2:char **}, ${3:int})')
('strxfrm(char *, const char *, size_t)\tsize_t', 'strxfrm(${1:char *}, ${2:const char *}, ${3:size_t})')
('suboptarg\tchar *', 'suboptarg')
('suseconds_t\ttypedef', 'suseconds_t')
('sv_onstack\tmacro', 'sv_onstack')
('swab(const void *, void *, ssize_t)\tvoid', 'swab(${1:const void *}, ${2:void *}, ${3:ssize_t})')
('swapon(const char *)\tint', 'swapon(${1:const char *})')
('swprintf(wchar_t *, size_t, const wchar_t *, ...)\tint', 'swprintf(${1:wchar_t *}, ${2:size_t}, ${3:const wchar_t *, ...})')
('swscanf(const wchar_t *, const wchar_t *, ...)\tint', 'swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})')
('symlink(const char *, const char *)\tint', 'symlink(${1:const char *}, ${2:const char *})')
('sync()\tvoid', 'sync()')
('sys_errlist\tconst char *const []', 'sys_errlist')
('sys_nerr\tconst int', 'sys_nerr')
('syscall(int, ...)\tint', 'syscall(${1:int, ...})')
('syscall_arg_t\ttypedef', 'syscall_arg_t')
('sysconf(int)\tlong', 'sysconf(${1:int})')
('system(const char *)\tint', 'system(${1:const char *})')
('tcgetpgrp(int)\tpid_t', 'tcgetpgrp(${1:int})')
('tcsetpgrp(int, pid_t)\tint', 'tcsetpgrp(${1:int}, ${2:pid_t})')
('tempnam(const char *, const char *)\tchar *', 'tempnam(${1:const char *}, ${2:const char *})')
('time(time_t *)\ttime_t', 'time(${1:time_t *})')
('time2posix(time_t)\ttime_t', 'time2posix(${1:time_t})')
('time_t\ttypedef', 'time_t')
('timegm(struct tm *const)\ttime_t', 'timegm(${1:struct tm *const})')
('timelocal(struct tm *const)\ttime_t', 'timelocal(${1:struct tm *const})')
('timespec\tstruct', 'timespec')
('timeval\tstruct', 'timeval')
('timezone\tlong', 'timezone')
('tm\tstruct', 'tm')
('tmpfile()\tFILE *', 'tmpfile()')
('tmpnam(char *)\tchar *', 'tmpnam(${1:char *})')
('toascii(int _c)\tint', 'toascii(${1:int _c})')
('tolower(int _c)\tint', 'tolower(${1:int _c})')
('toupper(int _c)\tint', 'toupper(${1:int _c})')
('towlower(wint_t _wc)\twint_t', 'towlower(${1:wint_t _wc})')
('towupper(wint_t _wc)\twint_t', 'towupper(${1:wint_t _wc})')
('truncate(const char *, off_t)\tint', 'truncate(${1:const char *}, ${2:off_t})')
('ttyname(int)\tchar *', 'ttyname(${1:int})')
('ttyname_r(int, char *, size_t)\tint', 'ttyname_r(${1:int}, ${2:char *}, ${3:size_t})')
('ttyslot()\tint', 'ttyslot()')
('tzname\tchar *[]', 'tzname')
('tzset()\tvoid', 'tzset()')
('tzsetwall()\tvoid', 'tzsetwall()')
('u_int16_t\ttypedef', 'u_int16_t')
('u_int32_t\ttypedef', 'u_int32_t')
('u_int64_t\ttypedef', 'u_int64_t')
('u_int8_t\ttypedef', 'u_int8_t')
('ualarm(useconds_t, useconds_t)\tuseconds_t', 'ualarm(${1:useconds_t}, ${2:useconds_t})')
('ucontext_t\ttypedef', 'ucontext_t')
('uid_t\ttypedef', 'uid_t')
('uint16_t\ttypedef', 'uint16_t')
('uint32_t\ttypedef', 'uint32_t')
('uint64_t\ttypedef', 'uint64_t')
('uint8_t\ttypedef', 'uint8_t')
('uint_fast16_t\ttypedef', 'uint_fast16_t')
('uint_fast32_t\ttypedef', 'uint_fast32_t')
('uint_fast64_t\ttypedef', 'uint_fast64_t')
('uint_fast8_t\ttypedef', 'uint_fast8_t')
('uint_least16_t\ttypedef', 'uint_least16_t')
('uint_least32_t\ttypedef', 'uint_least32_t')
('uint_least64_t\ttypedef', 'uint_least64_t')
('uint_least8_t\ttypedef', 'uint_least8_t')
('uintmax_t\ttypedef', 'uintmax_t')
('uintptr_t\ttypedef', 'uintptr_t')
('undelete(const char *)\tint', 'undelete(${1:const char *})')
('ungetc(int, FILE *)\tint', 'ungetc(${1:int}, ${2:FILE *})')
('ungetwc(wint_t, FILE *)\twint_t', 'ungetwc(${1:wint_t}, ${2:FILE *})')
('unlink(const char *)\tint', 'unlink(${1:const char *})')
('unlockpt(int)\tint', 'unlockpt(${1:int})')
('unsetenv(const char *)\tint', 'unsetenv(${1:const char *})')
('unwhiteout(const char *)\tint', 'unwhiteout(${1:const char *})')
('useconds_t\ttypedef', 'useconds_t')
('user_addr_t\ttypedef', 'user_addr_t')
('user_long_t\ttypedef', 'user_long_t')
('user_off_t\ttypedef', 'user_off_t')
('user_size_t\ttypedef', 'user_size_t')
('user_ssize_t\ttypedef', 'user_ssize_t')
('user_time_t\ttypedef', 'user_time_t')
('user_ulong_t\ttypedef', 'user_ulong_t')
('usleep(useconds_t)\tint', 'usleep(${1:useconds_t})')
('uuid_t\ttypedef', 'uuid_t')
('va_end\tmacro', 'va_end')
('va_list\ttypedef', 'va_list')
('valloc(size_t)\tvoid *', 'valloc(${1:size_t})')
('vasprintf(char **, const char *, __va_list_tag *)\tint', 'vasprintf(${1:char **}, ${2:const char *}, ${3:__va_list_tag *})')
('vdprintf(int, const char *, __va_list_tag *)\tint', 'vdprintf(${1:int}, ${2:const char *}, ${3:__va_list_tag *})')
('vfork()\tpid_t', 'vfork()')
('vfprintf(FILE *, const char *, __va_list_tag *)\tint', 'vfprintf(${1:FILE *}, ${2:const char *}, ${3:__va_list_tag *})')
('vfscanf(FILE *, const char *, __va_list_tag *)\tint', 'vfscanf(${1:FILE *}, ${2:const char *}, ${3:__va_list_tag *})')
('vfwprintf(FILE *, const wchar_t *, __va_list_tag *)\tint', 'vfwprintf(${1:FILE *}, ${2:const wchar_t *}, ${3:__va_list_tag *})')
('vfwscanf(FILE *, const wchar_t *, __va_list_tag *)\tint', 'vfwscanf(${1:FILE *}, ${2:const wchar_t *}, ${3:__va_list_tag *})')
('vprintf(const char *, __va_list_tag *)\tint', 'vprintf(${1:const char *}, ${2:__va_list_tag *})')
('vscanf(const char *, __va_list_tag *)\tint', 'vscanf(${1:const char *}, ${2:__va_list_tag *})')
('vsnprintf(char *, size_t, const char *, __va_list_tag *)\tint', 'vsnprintf(${1:char *}, ${2:size_t}, ${3:const char *}, ${4:__va_list_tag *})')
('vsprintf(char *, const char *, __va_list_tag *)\tint', 'vsprintf(${1:char *}, ${2:const char *}, ${3:__va_list_tag *})')
('vsscanf(const char *, const char *, __va_list_tag *)\tint', 'vsscanf(${1:const char *}, ${2:const char *}, ${3:__va_list_tag *})')
('vswprintf(wchar_t *, size_t, const wchar_t *, __va_list_tag *)\tint', 'vswprintf(${1:wchar_t *}, ${2:size_t}, ${3:const wchar_t *}, ${4:__va_list_tag *})')
('vswscanf(const wchar_t *, const wchar_t *, __va_list_tag *)\tint', 'vswscanf(${1:const wchar_t *}, ${2:const wchar_t *}, ${3:__va_list_tag *})')
('vwprintf(const wchar_t *, __va_list_tag *)\tint', 'vwprintf(${1:const wchar_t *}, ${2:__va_list_tag *})')
('vwscanf(const wchar_t *, __va_list_tag *)\tint', 'vwscanf(${1:const wchar_t *}, ${2:__va_list_tag *})')
('w_S\tstruct <anonymous>', 'w_S')
('w_T\tstruct <anonymous>', 'w_T')
('w_coredump\tmacro', 'w_coredump')
('w_retcode\tmacro', 'w_retcode')
('w_status\tint', 'w_status')
('w_stopsig\tmacro', 'w_stopsig')
('w_stopval\tmacro', 'w_stopval')
('w_termsig\tmacro', 'w_termsig')
('wait\tunion', 'wait')
('wait(int *)\tpid_t', 'wait(${1:int *})')
('wait3(int *, int, struct rusage *)\tpid_t', 'wait3(${1:int *}, ${2:int}, ${3:struct rusage *})')
('wait4(pid_t, int *, int, struct rusage *)\tpid_t', 'wait4(${1:pid_t}, ${2:int *}, ${3:int}, ${4:struct rusage *})')
('waitid(idtype_t, id_t, siginfo_t *, int)\tint', 'waitid(${1:idtype_t}, ${2:id_t}, ${3:siginfo_t *}, ${4:int})')
('waitpid(pid_t, int *, int)\tpid_t', 'waitpid(${1:pid_t}, ${2:int *}, ${3:int})')
('wcpcpy(wchar_t *, const wchar_t *)\twchar_t *', 'wcpcpy(${1:wchar_t *}, ${2:const wchar_t *})')
('wcpncpy(wchar_t *, const wchar_t *, size_t)\twchar_t *', 'wcpncpy(${1:wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wcrtomb(char *, wchar_t, mbstate_t *)\tsize_t', 'wcrtomb(${1:char *}, ${2:wchar_t}, ${3:mbstate_t *})')
('wcscasecmp(const wchar_t *, const wchar_t *)\tint', 'wcscasecmp(${1:const wchar_t *}, ${2:const wchar_t *})')
('wcscat(wchar_t *, const wchar_t *)\twchar_t *', 'wcscat(${1:wchar_t *}, ${2:const wchar_t *})')
('wcschr(const wchar_t *, wchar_t)\twchar_t *', 'wcschr(${1:const wchar_t *}, ${2:wchar_t})')
('wcscmp(const wchar_t *, const wchar_t *)\tint', 'wcscmp(${1:const wchar_t *}, ${2:const wchar_t *})')
('wcscoll(const wchar_t *, const wchar_t *)\tint', 'wcscoll(${1:const wchar_t *}, ${2:const wchar_t *})')
('wcscpy(wchar_t *, const wchar_t *)\twchar_t *', 'wcscpy(${1:wchar_t *}, ${2:const wchar_t *})')
('wcscspn(const wchar_t *, const wchar_t *)\tsize_t', 'wcscspn(${1:const wchar_t *}, ${2:const wchar_t *})')
('wcsdup(const wchar_t *)\twchar_t *', 'wcsdup(${1:const wchar_t *})')
('wcsftime(wchar_t *, size_t, const wchar_t *, const struct tm *)\tsize_t', 'wcsftime(${1:wchar_t *}, ${2:size_t}, ${3:const wchar_t *}, ${4:const struct tm *})')
('wcslcat(wchar_t *, const wchar_t *, size_t)\tsize_t', 'wcslcat(${1:wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wcslcpy(wchar_t *, const wchar_t *, size_t)\tsize_t', 'wcslcpy(${1:wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wcslen(const wchar_t *)\tsize_t', 'wcslen(${1:const wchar_t *})')
('wcsncasecmp(const wchar_t *, const wchar_t *, size_t n)\tint', 'wcsncasecmp(${1:const wchar_t *}, ${2:const wchar_t *}, ${3:size_t n})')
('wcsncat(wchar_t *, const wchar_t *, size_t)\twchar_t *', 'wcsncat(${1:wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wcsncmp(const wchar_t *, const wchar_t *, size_t)\tint', 'wcsncmp(${1:const wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wcsncpy(wchar_t *, const wchar_t *, size_t)\twchar_t *', 'wcsncpy(${1:wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wcsnlen(const wchar_t *, size_t)\tsize_t', 'wcsnlen(${1:const wchar_t *}, ${2:size_t})')
('wcsnrtombs(char *, const wchar_t **, size_t, size_t, mbstate_t *)\tsize_t', 'wcsnrtombs(${1:char *}, ${2:const wchar_t **}, ${3:size_t}, ${4:size_t}, ${5:mbstate_t *})')
('wcspbrk(const wchar_t *, const wchar_t *)\twchar_t *', 'wcspbrk(${1:const wchar_t *}, ${2:const wchar_t *})')
('wcsrchr(const wchar_t *, wchar_t)\twchar_t *', 'wcsrchr(${1:const wchar_t *}, ${2:wchar_t})')
('wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *)\tsize_t', 'wcsrtombs(${1:char *}, ${2:const wchar_t **}, ${3:size_t}, ${4:mbstate_t *})')
('wcsspn(const wchar_t *, const wchar_t *)\tsize_t', 'wcsspn(${1:const wchar_t *}, ${2:const wchar_t *})')
('wcsstr(const wchar_t *, const wchar_t *)\twchar_t *', 'wcsstr(${1:const wchar_t *}, ${2:const wchar_t *})')
('wcstod(const wchar_t *, wchar_t **)\tdouble', 'wcstod(${1:const wchar_t *}, ${2:wchar_t **})')
('wcstof(const wchar_t *, wchar_t **)\tfloat', 'wcstof(${1:const wchar_t *}, ${2:wchar_t **})')
('wcstok(wchar_t *, const wchar_t *, wchar_t **)\twchar_t *', 'wcstok(${1:wchar_t *}, ${2:const wchar_t *}, ${3:wchar_t **})')
('wcstol(const wchar_t *, wchar_t **, int)\tlong', 'wcstol(${1:const wchar_t *}, ${2:wchar_t **}, ${3:int})')
('wcstold(const wchar_t *, wchar_t **)\tlong double', 'wcstold(${1:const wchar_t *}, ${2:wchar_t **})')
('wcstoll(const wchar_t *, wchar_t **, int)\tlong long', 'wcstoll(${1:const wchar_t *}, ${2:wchar_t **}, ${3:int})')
('wcstombs(char *, const wchar_t *, size_t)\tsize_t', 'wcstombs(${1:char *}, ${2:const wchar_t *}, ${3:size_t})')
('wcstoul(const wchar_t *, wchar_t **, int)\tunsigned long', 'wcstoul(${1:const wchar_t *}, ${2:wchar_t **}, ${3:int})')
('wcstoull(const wchar_t *, wchar_t **, int)\tunsigned long long', 'wcstoull(${1:const wchar_t *}, ${2:wchar_t **}, ${3:int})')
('wcswidth(const wchar_t *, size_t)\tint', 'wcswidth(${1:const wchar_t *}, ${2:size_t})')
('wcsxfrm(wchar_t *, const wchar_t *, size_t)\tsize_t', 'wcsxfrm(${1:wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wctob(wint_t)\tint', 'wctob(${1:wint_t})')
('wctomb(char *, wchar_t)\tint', 'wctomb(${1:char *}, ${2:wchar_t})')
('wctype(const char *)\twctype_t', 'wctype(${1:const char *})')
('wctype_t\ttypedef', 'wctype_t')
('wcwidth(wchar_t)\tint', 'wcwidth(${1:wchar_t})')
('wint_t\ttypedef', 'wint_t')
('wmemchr(const wchar_t *, wchar_t, size_t)\twchar_t *', 'wmemchr(${1:const wchar_t *}, ${2:wchar_t}, ${3:size_t})')
('wmemcmp(const wchar_t *, const wchar_t *, size_t)\tint', 'wmemcmp(${1:const wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wmemcpy(wchar_t *, const wchar_t *, size_t)\twchar_t *', 'wmemcpy(${1:wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wmemmove(wchar_t *, const wchar_t *, size_t)\twchar_t *', 'wmemmove(${1:wchar_t *}, ${2:const wchar_t *}, ${3:size_t})')
('wmemset(wchar_t *, wchar_t, size_t)\twchar_t *', 'wmemset(${1:wchar_t *}, ${2:wchar_t}, ${3:size_t})')
('wprintf(const wchar_t *, ...)\tint', 'wprintf(${1:const wchar_t *, ...})')
('write(int, const void *, size_t)\tssize_t', 'write(${1:int}, ${2:const void *}, ${3:size_t})')
('wscanf(const wchar_t *, ...)\tint', 'wscanf(${1:const wchar_t *, ...})')
('zopen(const char *, const char *, int)\tFILE *', 'zopen(${1:const char *}, ${2:const char *}, ${3:int})')
('Class1\tclass', 'Class1')
('Field1\tint', 'Field1')
('Function1()\tvoid', 'Function1()')
('_Bit_const_iterator\tstruct', '_Bit_const_iterator')
('_Bit_iterator\tstruct', '_Bit_iterator')
('_Bit_iterator_base\tstruct', '_Bit_iterator_base')
('_Bit_reference\tstruct', '_Bit_reference')
('_Bit_type\ttypedef', '_Bit_type')
('_Bvector_base<class _Alloc>\tunion', '_Bvector_base<${1:class _Alloc}>')
('_Construct(_T1 *__p)\tvoid', '_Construct(${1:_T1 *__p})')
('_Construct(_T1 *__p, const _T2 &__value)\tvoid', '_Construct(${1:_T1 *__p}, ${2:const _T2 &__value})')
('_Destroy(_ForwardIterator __first, _ForwardIterator __last)\tvoid', '_Destroy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator __alloc)\tvoid', '_Destroy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Allocator __alloc})')
('_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator<_Tp>)\tvoid', '_Destroy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:allocator<_Tp>})')
('_Destroy(_Tp *__pointer)\tvoid', '_Destroy(${1:_Tp *__pointer})')
('_Identity<class _Tp>\tunion', '_Identity<${1:class _Tp}>')
('_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)\tvoid', '_M_assign_aux(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:std::forward_iterator_tag})')
('_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)\tvoid', '_M_assign_aux(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:std::input_iterator_tag})')
('_M_clone(const _Alloc &__alloc)\t_CharT *', '_M_clone(${1:const _Alloc &__alloc})')
('_M_destroy(const _Alloc &__a)\tvoid', '_M_destroy(${1:const _Alloc &__a})')
('_M_fill_assign(size_t __n, const value_type &__val)\tvoid', '_M_fill_assign(${1:size_t __n}, ${2:const value_type &__val})')
('_M_fill_insert(iterator __position, size_type __n, const value_type &__x)\tvoid', '_M_fill_insert(${1:iterator __position}, ${2:size_type __n}, ${3:const value_type &__x})')
('_M_insert_aux(iterator __position, const _Tp &__x)\tvoid', '_M_insert_aux(${1:iterator __position}, ${2:const _Tp &__x})')
('_M_leak_hard()\tvoid', '_M_leak_hard()')
('_M_mutate(size_type __pos, size_type __len1, size_type __len2)\tvoid', '_M_mutate(${1:size_type __pos}, ${2:size_type __len1}, ${3:size_type __len2})')
('_M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)\tvoid', '_M_range_insert(${1:iterator __pos}, ${2:_InputIterator __first}, ${3:_InputIterator __last}, ${4:std::input_iterator_tag})')
('_M_range_insert(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)\tvoid', '_M_range_insert(${1:iterator __position}, ${2:_ForwardIterator __first}, ${3:_ForwardIterator __last}, ${4:std::forward_iterator_tag})')
('_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c)\tbasic_string<_CharT, _Traits, _Alloc> &', '_M_replace_aux(${1:size_type __pos1}, ${2:size_type __n1}, ${3:size_type __n2}, ${4:_CharT __c})')
('_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type)\tbasic_string<_CharT, _Traits, _Alloc> &', '_M_replace_dispatch(${1:iterator __i1}, ${2:iterator __i2}, ${3:_InputIterator __k1}, ${4:_InputIterator __k2}, ${5:std::__false_type})')
('_M_replace_safe(size_type __pos1, size_type __n1, const _CharT *__s, size_type __n2)\tbasic_string<_CharT, _Traits, _Alloc> &', '_M_replace_safe(${1:size_type __pos1}, ${2:size_type __n1}, ${3:const _CharT *__s}, ${4:size_type __n2})')
('_S_chunk_size\tenum <anonymous>', '_S_chunk_size')
('_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, std::forward_iterator_tag)\t_CharT *', '_S_construct(${1:_InIterator __beg}, ${2:_InIterator __end}, ${3:const _Alloc &__a}, ${4:std::forward_iterator_tag})')
('_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, std::input_iterator_tag)\t_CharT *', '_S_construct(${1:_InIterator __beg}, ${2:_InIterator __end}, ${3:const _Alloc &__a}, ${4:std::input_iterator_tag})')
('_S_construct(size_type __n, _CharT __c, const _Alloc &__a)\t_CharT *', '_S_construct(${1:size_type __n}, ${2:_CharT __c}, ${3:const _Alloc &__a})')
('_S_create(size_type __capacity, size_type __old_capacity, const _Alloc &__alloc)\ttypename basic_string<_CharT, _Traits, _Alloc>::_Rep *', '_S_create(${1:size_type __capacity}, ${2:size_type __old_capacity}, ${3:const _Alloc &__alloc})')
('_S_empty_rep_storage\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type [(sizeof(std::basic_string::_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) / sizeof(size_type)]', '_S_empty_rep_storage')
('_S_max_size\tconst typename basic_string<_CharT, _Traits, _Alloc>::size_type', '_S_max_size')
('_S_terminal\tconst _CharT', '_S_terminal')
('_S_threshold\tenum <anonymous>', '_S_threshold')
('_S_word_bit\tenum <anonymous>', '_S_word_bit')
('_Select1st<class _Pair>\tunion', '_Select1st<${1:class _Pair}>')
('_Select2nd<class _Pair>\tunion', '_Select2nd<${1:class _Pair}>')
('_Temporary_buffer<typename _ForwardIterator, typename _Tp>\tunion', '_Temporary_buffer<${1:typename _ForwardIterator}, ${2:typename _Tp}>')
('_Vector_base<typename _Tp, typename _Alloc>\tunion', '_Vector_base<${1:typename _Tp}, ${2:typename _Alloc}>')
('__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value)\tvoid', '__adjust_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __holeIndex}, ${3:_Distance __len}, ${4:_Tp __value})')
('__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)\tvoid', '__adjust_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __holeIndex}, ${3:_Distance __len}, ${4:_Tp __value}, ${5:_Compare __comp})')
('__advance(_BidirectionalIterator &__i, _Distance __n, std::bidirectional_iterator_tag)\tvoid', '__advance(${1:_BidirectionalIterator &__i}, ${2:_Distance __n}, ${3:std::bidirectional_iterator_tag})')
('__advance(_InputIterator &__i, _Distance __n, std::input_iterator_tag)\tvoid', '__advance(${1:_InputIterator &__i}, ${2:_Distance __n}, ${3:std::input_iterator_tag})')
('__advance(_RandomAccessIterator &__i, _Distance __n, std::random_access_iterator_tag)\tvoid', '__advance(${1:_RandomAccessIterator &__i}, ${2:_Distance __n}, ${3:std::random_access_iterator_tag})')
('__alloc_swap<typename _Alloc>\tunion', '__alloc_swap<${1:typename _Alloc}>')
('__are_same<typename, typename>\tunion', '__are_same<${1:typename}, ${2:typename}>')
('__c_file\ttypedef', '__c_file')
('__c_locale\ttypedef', '__c_locale')
('__c_lock\ttypedef', '__c_lock')
('__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size)\tvoid', '__chunk_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Distance __chunk_size})')
('__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size, _Compare __comp)\tvoid', '__chunk_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Distance __chunk_size}, ${4:_Compare __comp})')
('__convert_from_v(const __c_locale &, char *__out, const int __size, const char *__fmt, ...)\tint', '__convert_from_v(${1:const __c_locale &}, ${2:char *__out}, ${3:const int __size}, ${4:const char *__fmt, ...})')
('__copy\tstruct', '__copy')
('__copy<bool, typename>\tunion', '__copy<${1:bool}, ${2:typename}>')
('__copy_aux(_CharT *, _CharT *, ostreambuf_iterator<_CharT>)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT> >::__type', '__copy_aux(${1:_CharT *}, ${2:_CharT *}, ${3:ostreambuf_iterator<_CharT>})')
('__copy_aux(_II __first, _II __last, _OI __result)\t_OI', '__copy_aux(${1:_II __first}, ${2:_II __last}, ${3:_OI __result})')
('__copy_aux(const _CharT *, const _CharT *, ostreambuf_iterator<_CharT>)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT> >::__type', '__copy_aux(${1:const _CharT *}, ${2:const _CharT *}, ${3:ostreambuf_iterator<_CharT>})')
('__copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT *)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, _CharT *>::__type', '__copy_aux(${1:istreambuf_iterator<_CharT>}, ${2:istreambuf_iterator<_CharT>}, ${3:_CharT *})')
('__copy_backward\tstruct', '__copy_backward')
('__copy_backward<bool, typename>\tunion', '__copy_backward<${1:bool}, ${2:typename}>')
('__copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)\t_BI2', '__copy_backward_aux(${1:_BI1 __first}, ${2:_BI1 __last}, ${3:_BI2 __result})')
('__copy_backward_normal\tstruct', '__copy_backward_normal')
('__copy_backward_normal<bool, bool>\tunion', '__copy_backward_normal<${1:bool}, ${2:bool}>')
('__copy_normal\tstruct', '__copy_normal')
('__copy_normal<bool, bool>\tunion', '__copy_normal<${1:bool}, ${2:bool}>')
('__debug\tnamespace', '__debug')
('__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, std::__false_type)\tvoid', '__destroy_aux(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:std::__false_type})')
('__destroy_aux(_ForwardIterator, _ForwardIterator, std::__true_type)\tvoid', '__destroy_aux(${1:_ForwardIterator}, ${2:_ForwardIterator}, ${3:std::__true_type})')
('__detail\tnamespace', '__detail')
('__distance(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)\ttypename iterator_traits<_InputIterator>::difference_type', '__distance(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:std::input_iterator_tag})')
('__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, std::random_access_iterator_tag)\ttypename iterator_traits<_RandomAccessIterator>::difference_type', '__distance(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:std::random_access_iterator_tag})')
('__false_type\tstruct', '__false_type')
('__fill\tstruct', '__fill')
('__fill<bool>\tunion', '__fill<${1:bool}>')
('__fill_bvector(std::_Bit_iterator __first, std::_Bit_iterator __last, bool __x)\tvoid', '__fill_bvector(${1:std::_Bit_iterator __first}, ${2:std::_Bit_iterator __last}, ${3:bool __x})')
('__fill_n\tstruct', '__fill_n')
('__fill_n<bool>\tunion', '__fill_n<${1:bool}>')
('__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', '__final_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__final_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('__find(_InputIterator __first, _InputIterator __last, const _Tp &__val, std::input_iterator_tag)\t_InputIterator', '__find(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:const _Tp &__val}, ${4:std::input_iterator_tag})')
('__find(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp &__val, std::random_access_iterator_tag)\t_RandomAccessIterator', '__find(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:const _Tp &__val}, ${4:std::random_access_iterator_tag})')
('__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, std::bidirectional_iterator_tag, std::bidirectional_iterator_tag)\t_BidirectionalIterator1', '__find_end(${1:_BidirectionalIterator1 __first1}, ${2:_BidirectionalIterator1 __last1}, ${3:_BidirectionalIterator2 __first2}, ${4:_BidirectionalIterator2 __last2}, ${5:std::bidirectional_iterator_tag}, ${6:std::bidirectional_iterator_tag})')
('__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, std::bidirectional_iterator_tag, std::bidirectional_iterator_tag, _BinaryPredicate __comp)\t_BidirectionalIterator1', '__find_end(${1:_BidirectionalIterator1 __first1}, ${2:_BidirectionalIterator1 __last1}, ${3:_BidirectionalIterator2 __first2}, ${4:_BidirectionalIterator2 __last2}, ${5:std::bidirectional_iterator_tag}, ${6:std::bidirectional_iterator_tag}, ${7:_BinaryPredicate __comp})')
('__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, std::forward_iterator_tag, std::forward_iterator_tag)\t_ForwardIterator1', '__find_end(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2}, ${5:std::forward_iterator_tag}, ${6:std::forward_iterator_tag})')
('__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, std::forward_iterator_tag, std::forward_iterator_tag, _BinaryPredicate __comp)\t_ForwardIterator1', '__find_end(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2}, ${5:std::forward_iterator_tag}, ${6:std::forward_iterator_tag}, ${7:_BinaryPredicate __comp})')
('__find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred, std::input_iterator_tag)\t_InputIterator', '__find_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_Predicate __pred}, ${4:std::input_iterator_tag})')
('__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate __pred, std::random_access_iterator_tag)\t_RandomAccessIterator', '__find_if(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Predicate __pred}, ${4:std::random_access_iterator_tag})')
('__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)\t_EuclideanRingElement', '__gcd(${1:_EuclideanRingElement __m}, ${2:_EuclideanRingElement __n})')
('__get_temporary_buffer(ptrdiff_t __len, _Tp *)\tpair<_Tp *, ptrdiff_t>', '__get_temporary_buffer(${1:ptrdiff_t __len}, ${2:_Tp *})')
('__heap_select(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)\tvoid', '__heap_select(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last})')
('__heap_select(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__heap_select(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last}, ${4:_Compare __comp})')
('__inplace_stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len)\t_ForwardIterator', '__inplace_stable_partition(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred}, ${4:_Distance __len})')
('__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', '__inplace_stable_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__inplace_stable_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', '__insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit)\tvoid', '__introselect(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __nth}, ${3:_RandomAccessIterator __last}, ${4:_Size __depth_limit})')
('__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)\tvoid', '__introselect(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __nth}, ${3:_RandomAccessIterator __last}, ${4:_Size __depth_limit}, ${5:_Compare __comp})')
('__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit)\tvoid', '__introsort_loop(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Size __depth_limit})')
('__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)\tvoid', '__introsort_loop(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Size __depth_limit}, ${4:_Compare __comp})')
('__is_arithmetic<typename _Tp>\tunion', '__is_arithmetic<${1:typename _Tp}>')
('__is_char\tstruct', '__is_char')
('__is_char<typename _Tp>\tunion', '__is_char<${1:typename _Tp}>')
('__is_empty<typename _Tp>\tunion', '__is_empty<${1:typename _Tp}>')
('__is_floating\tstruct', '__is_floating')
('__is_floating<typename _Tp>\tunion', '__is_floating<${1:typename _Tp}>')
('__is_fundamental<typename _Tp>\tunion', '__is_fundamental<${1:typename _Tp}>')
('__is_heap(_RandomAccessIterator __first, _Distance __n)\tbool', '__is_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __n})')
('__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tbool', '__is_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _StrictWeakOrdering __comp)\tbool', '__is_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_StrictWeakOrdering __comp})')
('__is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp, _Distance __n)\tbool', '__is_heap(${1:_RandomAccessIterator __first}, ${2:_StrictWeakOrdering __comp}, ${3:_Distance __n})')
('__is_integer\tstruct', '__is_integer')
('__is_integer<typename _Tp>\tunion', '__is_integer<${1:typename _Tp}>')
('__is_normal_iterator<typename _Tp>\tunion', '__is_normal_iterator<${1:typename _Tp}>')
('__is_null_pointer(_Type *__ptr)\tbool', '__is_null_pointer(${1:_Type *__ptr})')
('__is_null_pointer(_Type)\tbool', '__is_null_pointer(${1:_Type})')
('__is_pod<typename _Tp>\tunion', '__is_pod<${1:typename _Tp}>')
('__is_pointer<typename _Tp>\tunion', '__is_pointer<${1:typename _Tp}>')
('__is_scalar<typename _Tp>\tunion', '__is_scalar<${1:typename _Tp}>')
('__is_void\tstruct', '__is_void')
('__is_void<typename _Tp>\tunion', '__is_void<${1:typename _Tp}>')
('__iter_swap\tstruct', '__iter_swap')
('__iter_swap<bool _BoolType>\tunion', '__iter_swap<${1:bool _BoolType}>')
('__iterator_category(const _Iter &)\ttypename iterator_traits<_Iter>::iterator_category', '__iterator_category(${1:const _Iter &})')
('__lg(_Size __n)\t_Size', '__lg(${1:_Size __n})')
('__median(const _Tp &__a, const _Tp &__b, const _Tp &__c)\tconst _Tp &', '__median(${1:const _Tp &__a}, ${2:const _Tp &__b}, ${3:const _Tp &__c})')
('__median(const _Tp &__a, const _Tp &__b, const _Tp &__c, _Compare __comp)\tconst _Tp &', '__median(${1:const _Tp &__a}, ${2:const _Tp &__b}, ${3:const _Tp &__c}, ${4:_Compare __comp})')
('__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size)\tvoid', '__merge_adaptive(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Distance __len1}, ${5:_Distance __len2}, ${6:_Pointer __buffer}, ${7:_Distance __buffer_size})')
('__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)\tvoid', '__merge_adaptive(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Distance __len1}, ${5:_Distance __len2}, ${6:_Pointer __buffer}, ${7:_Distance __buffer_size}, ${8:_Compare __comp})')
('__merge_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result)\t_BidirectionalIterator3', '__merge_backward(${1:_BidirectionalIterator1 __first1}, ${2:_BidirectionalIterator1 __last1}, ${3:_BidirectionalIterator2 __first2}, ${4:_BidirectionalIterator2 __last2}, ${5:_BidirectionalIterator3 __result})')
('__merge_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result, _Compare __comp)\t_BidirectionalIterator3', '__merge_backward(${1:_BidirectionalIterator1 __first1}, ${2:_BidirectionalIterator1 __last1}, ${3:_BidirectionalIterator2 __first2}, ${4:_BidirectionalIterator2 __last2}, ${5:_BidirectionalIterator3 __result}, ${6:_Compare __comp})')
('__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size)\tvoid', '__merge_sort_loop(${1:_RandomAccessIterator1 __first}, ${2:_RandomAccessIterator1 __last}, ${3:_RandomAccessIterator2 __result}, ${4:_Distance __step_size})')
('__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size, _Compare __comp)\tvoid', '__merge_sort_loop(${1:_RandomAccessIterator1 __first}, ${2:_RandomAccessIterator1 __last}, ${3:_RandomAccessIterator2 __result}, ${4:_Distance __step_size}, ${5:_Compare __comp})')
('__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer)\tvoid', '__merge_sort_with_buffer(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Pointer __buffer})')
('__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Compare __comp)\tvoid', '__merge_sort_with_buffer(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Pointer __buffer}, ${4:_Compare __comp})')
('__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2)\tvoid', '__merge_without_buffer(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Distance __len1}, ${5:_Distance __len2})')
('__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Compare __comp)\tvoid', '__merge_without_buffer(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Distance __len1}, ${5:_Distance __len2}, ${6:_Compare __comp})')
('__numeric_limits_base\tstruct', '__numeric_limits_base')
('__ostream_fill(basic_ostream<_CharT, _Traits> &__out, streamsize __n)\tvoid', '__ostream_fill(${1:basic_ostream<_CharT, _Traits> &__out}, ${2:streamsize __n})')
('__ostream_insert(basic_ostream<_CharT, _Traits> &__out, const _CharT *__s, streamsize __n)\tbasic_ostream<_CharT, _Traits> &', '__ostream_insert(${1:basic_ostream<_CharT, _Traits> &__out}, ${2:const _CharT *__s}, ${3:streamsize __n})')
('__ostream_write(basic_ostream<_CharT, _Traits> &__out, const _CharT *__s, streamsize __n)\tvoid', '__ostream_write(${1:basic_ostream<_CharT, _Traits> &__out}, ${2:const _CharT *__s}, ${3:streamsize __n})')
('__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, std::bidirectional_iterator_tag)\t_BidirectionalIterator', '__partition(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:_Predicate __pred}, ${4:std::bidirectional_iterator_tag})')
('__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, std::forward_iterator_tag)\t_ForwardIterator', '__partition(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred}, ${4:std::forward_iterator_tag})')
('__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value)\tvoid', '__pop_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_RandomAccessIterator __result}, ${4:_Tp __value})')
('__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Compare __comp)\tvoid', '__pop_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_RandomAccessIterator __result}, ${4:_Tp __value}, ${5:_Compare __comp})')
('__push_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value)\tvoid', '__push_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __holeIndex}, ${3:_Distance __topIndex}, ${4:_Tp __value})')
('__push_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)\tvoid', '__push_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __holeIndex}, ${3:_Distance __topIndex}, ${4:_Tp __value}, ${5:_Compare __comp})')
('__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, std::bidirectional_iterator_tag)\tvoid', '__reverse(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:std::bidirectional_iterator_tag})')
('__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, std::random_access_iterator_tag)\tvoid', '__reverse(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:std::random_access_iterator_tag})')
('__rotate(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, std::bidirectional_iterator_tag)\tvoid', '__rotate(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:std::bidirectional_iterator_tag})')
('__rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, std::forward_iterator_tag)\tvoid', '__rotate(${1:_ForwardIterator __first}, ${2:_ForwardIterator __middle}, ${3:_ForwardIterator __last}, ${4:std::forward_iterator_tag})')
('__rotate(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, std::random_access_iterator_tag)\tvoid', '__rotate(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last}, ${4:std::random_access_iterator_tag})')
('__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1 __middle, _BidirectionalIterator1 __last, _Distance __len1, _Distance __len2, _BidirectionalIterator2 __buffer, _Distance __buffer_size)\t_BidirectionalIterator1', '__rotate_adaptive(${1:_BidirectionalIterator1 __first}, ${2:_BidirectionalIterator1 __middle}, ${3:_BidirectionalIterator1 __last}, ${4:_Distance __len1}, ${5:_Distance __len2}, ${6:_BidirectionalIterator2 __buffer}, ${7:_Distance __buffer_size})')
('__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val, _BinaryPredicate __binary_pred, std::forward_iterator_tag)\t_ForwardIterator', '__search_n(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:_BinaryPredicate __binary_pred}, ${6:std::forward_iterator_tag})')
('__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val, std::forward_iterator_tag)\t_ForwardIterator', '__search_n(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:std::forward_iterator_tag})')
('__search_n(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp &__val, _BinaryPredicate __binary_pred, std::random_access_iterator_tag)\t_RandomAccessIter', '__search_n(${1:_RandomAccessIter __first}, ${2:_RandomAccessIter __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:_BinaryPredicate __binary_pred}, ${6:std::random_access_iterator_tag})')
('__search_n(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp &__val, std::random_access_iterator_tag)\t_RandomAccessIter', '__search_n(${1:_RandomAccessIter __first}, ${2:_RandomAccessIter __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:std::random_access_iterator_tag})')
('__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)\t_ForwardIterator', '__stable_partition_adaptive(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred}, ${4:_Distance __len}, ${5:_Pointer __buffer}, ${6:_Distance __buffer_size})')
('__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size)\tvoid', '__stable_sort_adaptive(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Pointer __buffer}, ${4:_Distance __buffer_size})')
('__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)\tvoid', '__stable_sort_adaptive(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Pointer __buffer}, ${4:_Distance __buffer_size}, ${5:_Compare __comp})')
('__throw_bad_alloc()\tvoid', '__throw_bad_alloc()')
('__throw_bad_cast()\tvoid', '__throw_bad_cast()')
('__throw_bad_exception()\tvoid', '__throw_bad_exception()')
('__throw_bad_typeid()\tvoid', '__throw_bad_typeid()')
('__throw_domain_error(const char *)\tvoid', '__throw_domain_error(${1:const char *})')
('__throw_invalid_argument(const char *)\tvoid', '__throw_invalid_argument(${1:const char *})')
('__throw_ios_failure(const char *)\tvoid', '__throw_ios_failure(${1:const char *})')
('__throw_length_error(const char *)\tvoid', '__throw_length_error(${1:const char *})')
('__throw_logic_error(const char *)\tvoid', '__throw_logic_error(${1:const char *})')
('__throw_out_of_range(const char *)\tvoid', '__throw_out_of_range(${1:const char *})')
('__throw_overflow_error(const char *)\tvoid', '__throw_overflow_error(${1:const char *})')
('__throw_range_error(const char *)\tvoid', '__throw_range_error(${1:const char *})')
('__throw_runtime_error(const char *)\tvoid', '__throw_runtime_error(${1:const char *})')
('__throw_underflow_error(const char *)\tvoid', '__throw_underflow_error(${1:const char *})')
('__traitor<class _Sp, class _Tp>\tunion', '__traitor<${1:class _Sp}, ${2:class _Tp}>')
('__true_type\tstruct', '__true_type')
('__truth_type\tstruct', '__truth_type')
('__truth_type<bool>\tunion', '__truth_type<${1:bool}>')
('__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', '__unguarded_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__unguarded_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('__unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)\tvoid', '__unguarded_linear_insert(${1:_RandomAccessIterator __last}, ${2:_Tp __val})')
('__unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val, _Compare __comp)\tvoid', '__unguarded_linear_insert(${1:_RandomAccessIterator __last}, ${2:_Tp __val}, ${3:_Compare __comp})')
('__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot)\t_RandomAccessIterator', '__unguarded_partition(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Tp __pivot})')
('__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot, _Compare __comp)\t_RandomAccessIterator', '__unguarded_partition(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Tp __pivot}, ${4:_Compare __comp})')
('__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator __alloc)\t_ForwardIterator', '__uninitialized_copy_a(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:_Allocator __alloc})')
('__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, allocator<_Tp>)\t_ForwardIterator', '__uninitialized_copy_a(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:allocator<_Tp>})')
('__uninitialized_copy_aux(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, std::__false_type)\t_ForwardIterator', '__uninitialized_copy_aux(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:std::__false_type})')
('__uninitialized_copy_aux(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, std::__true_type)\t_ForwardIterator', '__uninitialized_copy_aux(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:std::__true_type})')
('__uninitialized_copy_copy(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator __alloc)\t_ForwardIterator', '__uninitialized_copy_copy(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_ForwardIterator __result}, ${6:_Allocator __alloc})')
('__uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, const _Tp &__x, _Allocator __alloc)\tvoid', '__uninitialized_copy_fill(${1:_InputIterator __first1}, ${2:_InputIterator __last1}, ${3:_ForwardIterator __first2}, ${4:_ForwardIterator __last2}, ${5:const _Tp &__x}, ${6:_Allocator __alloc})')
('__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, _Allocator __alloc)\tvoid', '__uninitialized_fill_a(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x}, ${4:_Allocator __alloc})')
('__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, allocator<_Tp2>)\tvoid', '__uninitialized_fill_a(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x}, ${4:allocator<_Tp2>})')
('__uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, std::__false_type)\tvoid', '__uninitialized_fill_aux(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x}, ${4:std::__false_type})')
('__uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, std::__true_type)\tvoid', '__uninitialized_fill_aux(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x}, ${4:std::__true_type})')
('__uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &__x, _InputIterator __first, _InputIterator __last, _Allocator __alloc)\t_ForwardIterator', '__uninitialized_fill_copy(${1:_ForwardIterator __result}, ${2:_ForwardIterator __mid}, ${3:const _Tp &__x}, ${4:_InputIterator __first}, ${5:_InputIterator __last}, ${6:_Allocator __alloc})')
('__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &__x, _Allocator __alloc)\tvoid', '__uninitialized_fill_n_a(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x}, ${4:_Allocator __alloc})')
('__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &__x, allocator<_Tp2>)\tvoid', '__uninitialized_fill_n_a(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x}, ${4:allocator<_Tp2>})')
('__uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n, const _Tp &__x, std::__false_type)\tvoid', '__uninitialized_fill_n_aux(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x}, ${4:std::__false_type})')
('__uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n, const _Tp &__x, std::__true_type)\tvoid', '__uninitialized_fill_n_aux(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x}, ${4:std::__true_type})')
('__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, std::forward_iterator_tag, std::output_iterator_tag)\t_OutputIterator', '__unique_copy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_OutputIterator __result}, ${4:_BinaryPredicate __binary_pred}, ${5:std::forward_iterator_tag}, ${6:std::output_iterator_tag})')
('__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::forward_iterator_tag, std::output_iterator_tag)\t_OutputIterator', '__unique_copy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_OutputIterator __result}, ${4:std::forward_iterator_tag}, ${5:std::output_iterator_tag})')
('__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _BinaryPredicate __binary_pred, std::input_iterator_tag, std::forward_iterator_tag)\t_ForwardIterator', '__unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:_BinaryPredicate __binary_pred}, ${5:std::input_iterator_tag}, ${6:std::forward_iterator_tag})')
('__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, std::input_iterator_tag, std::forward_iterator_tag)\t_ForwardIterator', '__unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:std::input_iterator_tag}, ${5:std::forward_iterator_tag})')
('__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, std::input_iterator_tag, std::output_iterator_tag)\t_OutputIterator', '__unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_BinaryPredicate __binary_pred}, ${5:std::input_iterator_tag}, ${6:std::output_iterator_tag})')
('__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, std::input_iterator_tag, std::output_iterator_tag)\t_OutputIterator', '__unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:std::input_iterator_tag}, ${5:std::output_iterator_tag})')
('abs(long __i)\tlong', 'abs(${1:long __i})')
('adjacent_find(_ForwardIterator __first, _ForwardIterator __last)\t_ForwardIterator', 'adjacent_find(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)\t_ForwardIterator', 'adjacent_find(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_BinaryPredicate __binary_pred})')
('advance(_InputIterator &__i, _Distance __n)\tvoid', 'advance(${1:_InputIterator &__i}, ${2:_Distance __n})')
('allocator\tclass', 'allocator')
('allocator<typename _Alloc>\tunion', 'allocator<${1:typename _Alloc}>')
('allocator<typename _Tp>\tunion', 'allocator<${1:typename _Tp}>')
('append(const _CharT *__s, size_type __n)\tbasic_string<_CharT, _Traits, _Alloc> &', 'append(${1:const _CharT *__s}, ${2:size_type __n})')
('append(const basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_string<_CharT, _Traits, _Alloc> &', 'append(${1:const basic_string<_CharT, _Traits, _Alloc> &__str})')
('append(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n)\tbasic_string<_CharT, _Traits, _Alloc> &', 'append(${1:const basic_string<_CharT, _Traits, _Alloc> &__str}, ${2:size_type __pos}, ${3:size_type __n})')
('append(size_type __n, _CharT __c)\tbasic_string<_CharT, _Traits, _Alloc> &', 'append(${1:size_type __n}, ${2:_CharT __c})')
('assign(const _CharT *__s, size_type __n)\tbasic_string<_CharT, _Traits, _Alloc> &', 'assign(${1:const _CharT *__s}, ${2:size_type __n})')
('assign(const basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_string<_CharT, _Traits, _Alloc> &', 'assign(${1:const basic_string<_CharT, _Traits, _Alloc> &__str})')
('auto_ptr<typename _Tp>\tunion', 'auto_ptr<${1:typename _Tp}>')
('auto_ptr_ref<typename _Tp1>\tunion', 'auto_ptr_ref<${1:typename _Tp1}>')
('back_insert_iterator<typename _Container>\tunion', 'back_insert_iterator<${1:typename _Container}>')
('back_inserter(_Container &__x)\tback_insert_iterator<_Container>', 'back_inserter(${1:_Container &__x})')
('bad_alloc\tclass', 'bad_alloc')
('bad_exception\tclass', 'bad_exception')
('basic_filebuf<typename _CharT>\tunion', 'basic_filebuf<${1:typename _CharT}>')
('basic_fstream<typename _CharT>\tunion', 'basic_fstream<${1:typename _CharT}>')
('basic_ifstream<typename _CharT>\tunion', 'basic_ifstream<${1:typename _CharT}>')
('basic_ios<typename _CharT>\tunion', 'basic_ios<${1:typename _CharT}>')
('basic_iostream<typename _CharT>\tunion', 'basic_iostream<${1:typename _CharT}>')
('basic_istream<typename _CharT>\tunion', 'basic_istream<${1:typename _CharT}>')
('basic_istringstream<typename _CharT>\tunion', 'basic_istringstream<${1:typename _CharT}>')
('basic_ofstream<typename _CharT>\tunion', 'basic_ofstream<${1:typename _CharT}>')
('basic_ostream<typename _CharT>\tunion', 'basic_ostream<${1:typename _CharT}>')
('basic_ostringstream<typename _CharT>\tunion', 'basic_ostringstream<${1:typename _CharT}>')
('basic_streambuf<typename _CharT>\tunion', 'basic_streambuf<${1:typename _CharT}>')
('basic_string\tclass', 'basic_string')
('basic_string<typename _CharT>\tunion', 'basic_string<${1:typename _CharT}>')
('basic_string<typename _CharT>(_InputIterator __beg, _InputIterator __end)\tvoid', 'basic_string<${1:typename _CharT}>(${2:_InputIterator __beg}, ${3:_InputIterator __end})')
('basic_stringbuf<typename _CharT>\tunion', 'basic_stringbuf<${1:typename _CharT}>')
('basic_stringstream<typename _CharT>\tunion', 'basic_stringstream<${1:typename _CharT}>')
('bidirectional_iterator_tag\tstruct', 'bidirectional_iterator_tag')
('binary_function<class _Arg1, class _Arg2, class _Result>\tunion', 'binary_function<${1:class _Arg1}, ${2:class _Arg2}, ${3:class _Result}>')
('binary_negate<class _Predicate>\tunion', 'binary_negate<${1:class _Predicate}>')
('binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)\tbool', 'binary_search(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val})')
('binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)\tbool', 'binary_search(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val}, ${4:_Compare __comp})')
('bind1st(const _Operation &__fn, const _Tp &__x)\tbinder1st<_Operation>', 'bind1st(${1:const _Operation &__fn}, ${2:const _Tp &__x})')
('bind2nd(const _Operation &__fn, const _Tp &__x)\tbinder2nd<_Operation>', 'bind2nd(${1:const _Operation &__fn}, ${2:const _Tp &__x})')
('binder1st<class _Operation>\tunion', 'binder1st<${1:class _Operation}>')
('binder2nd<class _Operation>\tunion', 'binder2nd<${1:class _Operation}>')
('char_traits\tstruct', 'char_traits')
('char_traits<class _CharT>\tunion', 'char_traits<${1:class _CharT}>')
('compare(const _CharT *__s) const\tint', 'compare(${1:const _CharT *__s})')
('compare(size_type __pos, size_type __n, const basic_string<_CharT, _Traits, _Alloc> &__str) const\tint', 'compare(${1:size_type __pos}, ${2:size_type __n}, ${3:const basic_string<_CharT, _Traits, _Alloc> &__str})')
('compare(size_type __pos, size_type __n1, const _CharT *__s) const\tint', 'compare(${1:size_type __pos}, ${2:size_type __n1}, ${3:const _CharT *__s})')
('compare(size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const\tint', 'compare(${1:size_type __pos}, ${2:size_type __n1}, ${3:const _CharT *__s}, ${4:size_type __n2})')
('compare(size_type __pos1, size_type __n1, const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos2, size_type __n2) const\tint', 'compare(${1:size_type __pos1}, ${2:size_type __n1}, ${3:const basic_string<_CharT, _Traits, _Alloc> &__str}, ${4:size_type __pos2}, ${5:size_type __n2})')
('const_mem_fun1_ref_t<class _Ret, class _Tp, class _Arg>\tunion', 'const_mem_fun1_ref_t<${1:class _Ret}, ${2:class _Tp}, ${3:class _Arg}>')
('const_mem_fun1_t<class _Ret, class _Tp, class _Arg>\tunion', 'const_mem_fun1_t<${1:class _Ret}, ${2:class _Tp}, ${3:class _Arg}>')
('const_mem_fun_ref_t<class _Ret, class _Tp>\tunion', 'const_mem_fun_ref_t<${1:class _Ret}, ${2:class _Tp}>')
('const_mem_fun_t<class _Ret, class _Tp>\tunion', 'const_mem_fun_t<${1:class _Ret}, ${2:class _Tp}>')
('copy(_CharT *__s, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'copy(${1:_CharT *__s}, ${2:size_type __n})')
('copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\t_OutputIterator', 'copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result})')
('copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT> >::__type', 'copy(${1:istreambuf_iterator<_CharT>}, ${2:istreambuf_iterator<_CharT>}, ${3:ostreambuf_iterator<_CharT>})')
('copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\t_BI2', 'copy_backward(${1:_BI1 __first}, ${2:_BI1 __last}, ${3:_BI2 __result})')
('count(_InputIterator __first, _InputIterator __last, const _Tp &__value)\ttypename iterator_traits<_InputIterator>::difference_type', 'count(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:const _Tp &__value})')
('count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\ttypename iterator_traits<_InputIterator>::difference_type', 'count_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_Predicate __pred})')
('denorm_absent\tstd::float_denorm_style', 'denorm_absent')
('denorm_indeterminate\tstd::float_denorm_style', 'denorm_indeterminate')
('denorm_present\tstd::float_denorm_style', 'denorm_present')
('distance(_InputIterator __first, _InputIterator __last)\ttypename iterator_traits<_InputIterator>::difference_type', 'distance(${1:_InputIterator __first}, ${2:_InputIterator __last})')
('div(long __i, long __j)\tldiv_t', 'div(${1:long __i}, ${2:long __j})')
('divides<class _Tp>\tunion', 'divides<${1:class _Tp}>')
('equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\tbool', 'equal(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2})')
('equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)\tbool', 'equal(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_BinaryPredicate __binary_pred})')
('equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)\tpair<_ForwardIterator, _ForwardIterator>', 'equal_range(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val})')
('equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)\tpair<_ForwardIterator, _ForwardIterator>', 'equal_range(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val}, ${4:_Compare __comp})')
('equal_to<class _Tp>\tunion', 'equal_to<${1:class _Tp}>')
('erase(iterator __first, iterator __last)\ttypename vector<_Tp, _Alloc>::iterator', 'erase(${1:iterator __first}, ${2:iterator __last})')
('erase(iterator __position)\ttypename vector<_Tp, _Alloc>::iterator', 'erase(${1:iterator __position})')
('exception\tclass', 'exception')
('filebuf\ttypedef', 'filebuf')
('fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)\tvoid', 'fill(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__value})')
('fill(char *__first, char *__last, const char &__c)\tvoid', 'fill(${1:char *__first}, ${2:char *__last}, ${3:const char &__c})')
('fill(signed char *__first, signed char *__last, const signed char &__c)\tvoid', 'fill(${1:signed char *__first}, ${2:signed char *__last}, ${3:const signed char &__c})')
('fill(std::_Bit_iterator __first, std::_Bit_iterator __last, const bool &__x)\tvoid', 'fill(${1:std::_Bit_iterator __first}, ${2:std::_Bit_iterator __last}, ${3:const bool &__x})')
('fill(unsigned char *__first, unsigned char *__last, const unsigned char &__c)\tvoid', 'fill(${1:unsigned char *__first}, ${2:unsigned char *__last}, ${3:const unsigned char &__c})')
('fill_n(_OutputIterator __first, _Size __n, const _Tp &__value)\t_OutputIterator', 'fill_n(${1:_OutputIterator __first}, ${2:_Size __n}, ${3:const _Tp &__value})')
('fill_n(char *__first, _Size __n, const char &__c)\tchar *', 'fill_n(${1:char *__first}, ${2:_Size __n}, ${3:const char &__c})')
('fill_n(signed char *__first, _Size __n, const signed char &__c)\tsigned char *', 'fill_n(${1:signed char *__first}, ${2:_Size __n}, ${3:const signed char &__c})')
('fill_n(unsigned char *__first, _Size __n, const unsigned char &__c)\tunsigned char *', 'fill_n(${1:unsigned char *__first}, ${2:_Size __n}, ${3:const unsigned char &__c})')
('find(_CharT __c) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find(${1:_CharT __c})')
('find(_InputIterator __first, _InputIterator __last, const _Tp &__val)\t_InputIterator', 'find(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:const _Tp &__val})')
('find(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, const _CharT &)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, istreambuf_iterator<_CharT> >::__type', 'find(${1:istreambuf_iterator<_CharT>}, ${2:istreambuf_iterator<_CharT>}, ${3:const _CharT &})')
('find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)\t_ForwardIterator1', 'find_end(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2})')
('find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __comp)\t_ForwardIterator1', 'find_end(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2}, ${5:_BinaryPredicate __comp})')
('find_first_not_of(_CharT __c) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_first_not_of(${1:_CharT __c})')
('find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_first_not_of(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2)\t_InputIterator', 'find_first_of(${1:_InputIterator __first1}, ${2:_InputIterator __last1}, ${3:_ForwardIterator __first2}, ${4:_ForwardIterator __last2})')
('find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, _BinaryPredicate __comp)\t_InputIterator', 'find_first_of(${1:_InputIterator __first1}, ${2:_InputIterator __last1}, ${3:_ForwardIterator __first2}, ${4:_ForwardIterator __last2}, ${5:_BinaryPredicate __comp})')
('find_first_of(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_first_of(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\t_InputIterator', 'find_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_Predicate __pred})')
('find_last_not_of(_CharT __c) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_last_not_of(${1:_CharT __c})')
('find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_last_not_of(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('find_last_of(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_last_of(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('float_denorm_style\tenum', 'float_denorm_style')
('float_round_style\tenum', 'float_round_style')
('for_each(_InputIterator __first, _InputIterator __last, _Function __f)\t_Function', 'for_each(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_Function __f})')
('forward_iterator_tag\tstruct', 'forward_iterator_tag')
('fpos<typename _StateT>\tunion', 'fpos<${1:typename _StateT}>')
('front_insert_iterator<typename _Container>\tunion', 'front_insert_iterator<${1:typename _Container}>')
('front_inserter(_Container &__x)\tfront_insert_iterator<_Container>', 'front_inserter(${1:_Container &__x})')
('fstream\ttypedef', 'fstream')
('generate(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)\tvoid', 'generate(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Generator __gen})')
('generate_n(_OutputIterator __first, _Size __n, _Generator __gen)\t_OutputIterator', 'generate_n(${1:_OutputIterator __first}, ${2:_Size __n}, ${3:_Generator __gen})')
('get_temporary_buffer<typename _Tp>(ptrdiff_t __len)\tpair<_Tp *, ptrdiff_t>', 'get_temporary_buffer<${1:typename _Tp}>(${2:ptrdiff_t __len})')
('getline(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_istream<_CharT, _Traits> &', 'getline(${1:basic_istream<_CharT, _Traits> &__is}, ${2:basic_string<_CharT, _Traits, _Alloc> &__str})')
('getline(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str, _CharT __delim)\tbasic_istream<_CharT, _Traits> &', 'getline(${1:basic_istream<_CharT, _Traits> &__is}, ${2:basic_string<_CharT, _Traits, _Alloc> &__str}, ${3:_CharT __delim})')
('getline(basic_istream<char> &__in, basic_string<char> &__str, char __delim)\tbasic_istream<char> &', 'getline(${1:basic_istream<char> &__in}, ${2:basic_string<char> &__str}, ${3:char __delim})')
('getline(basic_istream<wchar_t> &__in, basic_string<wchar_t> &__str, wchar_t __delim)\tbasic_istream<wchar_t> &', 'getline(${1:basic_istream<wchar_t> &__in}, ${2:basic_string<wchar_t> &__str}, ${3:wchar_t __delim})')
('greater<class _Tp>\tunion', 'greater<${1:class _Tp}>')
('greater_equal<class _Tp>\tunion', 'greater_equal<${1:class _Tp}>')
('ifstream\ttypedef', 'ifstream')
('includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)\tbool', 'includes(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2})')
('includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\tbool', 'includes(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_Compare __comp})')
('inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)\tvoid', 'inplace_merge(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last})')
('inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)\tvoid', 'inplace_merge(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Compare __comp})')
('input_iterator_tag\tstruct', 'input_iterator_tag')
('insert(iterator __position, const value_type &__x)\ttypename vector<_Tp, _Alloc>::iterator', 'insert(${1:iterator __position}, ${2:const value_type &__x})')
('insert(size_type __pos, const _CharT *__s, size_type __n)\tbasic_string<_CharT, _Traits, _Alloc> &', 'insert(${1:size_type __pos}, ${2:const _CharT *__s}, ${3:size_type __n})')
('insert_iterator<typename _Container>\tunion', 'insert_iterator<${1:typename _Container}>')
('inserter(_Container &__x, _Iterator __i)\tinsert_iterator<_Container>', 'inserter(${1:_Container &__x}, ${2:_Iterator __i})')
('ios\ttypedef', 'ios')
('ios_base\tclass', 'ios_base')
('iostream\ttypedef', 'iostream')
('istream\ttypedef', 'istream')
('istreambuf_iterator<typename _CharT>\tunion', 'istreambuf_iterator<${1:typename _CharT}>')
('istringstream\ttypedef', 'istringstream')
('iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\tvoid', 'iter_swap(${1:_ForwardIterator1 __a}, ${2:_ForwardIterator2 __b})')
('iterator<typename _Category, typename _Tp>\tunion', 'iterator<${1:typename _Category}, ${2:typename _Tp}>')
('iterator_traits<typename _Iterator>\tunion', 'iterator_traits<${1:typename _Iterator}>')
('less<class _Tp>\tunion', 'less<${1:class _Tp}>')
('less_equal<class _Tp>\tunion', 'less_equal<${1:class _Tp}>')
('lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)\tbool', 'lexicographical_compare(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2})')
('lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\tbool', 'lexicographical_compare(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_Compare __comp})')
('lexicographical_compare(const char *__first1, const char *__last1, const char *__first2, const char *__last2)\tbool', 'lexicographical_compare(${1:const char *__first1}, ${2:const char *__last1}, ${3:const char *__first2}, ${4:const char *__last2})')
('lexicographical_compare(const unsigned char *__first1, const unsigned char *__last1, const unsigned char *__first2, const unsigned char *__last2)\tbool', 'lexicographical_compare(${1:const unsigned char *__first1}, ${2:const unsigned char *__last1}, ${3:const unsigned char *__first2}, ${4:const unsigned char *__last2})')
('logical_and<class _Tp>\tunion', 'logical_and<${1:class _Tp}>')
('logical_not<class _Tp>\tunion', 'logical_not<${1:class _Tp}>')
('logical_or<class _Tp>\tunion', 'logical_or<${1:class _Tp}>')
('lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)\t_ForwardIterator', 'lower_bound(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val})')
('lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)\t_ForwardIterator', 'lower_bound(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val}, ${4:_Compare __comp})')
('make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'make_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'make_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('make_pair(_T1 __x, _T2 __y)\tpair<_T1, _T2>', 'make_pair(${1:_T1 __x}, ${2:_T2 __y})')
('max(const _Tp &__a, const _Tp &__b)\tconst _Tp &', 'max(${1:const _Tp &__a}, ${2:const _Tp &__b})')
('max(const _Tp &__a, const _Tp &__b, _Compare __comp)\tconst _Tp &', 'max(${1:const _Tp &__a}, ${2:const _Tp &__b}, ${3:_Compare __comp})')
('max_element(_ForwardIterator __first, _ForwardIterator __last)\t_ForwardIterator', 'max_element(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\t_ForwardIterator', 'max_element(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Compare __comp})')
('mem_fun(_Ret (_Tp::*__f)() const)\tconst_mem_fun_t<_Ret, _Tp>', 'mem_fun(${1:_Ret (_Tp::*__f)() const})')
('mem_fun(_Ret (_Tp::*__f)())\tmem_fun_t<_Ret, _Tp>', 'mem_fun(${1:_Ret (_Tp::*__f)()})')
('mem_fun(_Ret (_Tp::*__f)(_Arg) const)\tconst_mem_fun1_t<_Ret, _Tp, _Arg>', 'mem_fun(${1:_Ret (_Tp::*__f)(_Arg) const})')
('mem_fun(_Ret (_Tp::*__f)(_Arg))\tmem_fun1_t<_Ret, _Tp, _Arg>', 'mem_fun(${1:_Ret (_Tp::*__f)(_Arg)})')
('mem_fun1_ref_t<class _Ret, class _Tp, class _Arg>\tunion', 'mem_fun1_ref_t<${1:class _Ret}, ${2:class _Tp}, ${3:class _Arg}>')
('mem_fun1_t<class _Ret, class _Tp, class _Arg>\tunion', 'mem_fun1_t<${1:class _Ret}, ${2:class _Tp}, ${3:class _Arg}>')
('mem_fun_ref(_Ret (_Tp::*__f)() const)\tconst_mem_fun_ref_t<_Ret, _Tp>', 'mem_fun_ref(${1:_Ret (_Tp::*__f)() const})')
('mem_fun_ref(_Ret (_Tp::*__f)())\tmem_fun_ref_t<_Ret, _Tp>', 'mem_fun_ref(${1:_Ret (_Tp::*__f)()})')
('mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)\tconst_mem_fun1_ref_t<_Ret, _Tp, _Arg>', 'mem_fun_ref(${1:_Ret (_Tp::*__f)(_Arg) const})')
('mem_fun_ref(_Ret (_Tp::*__f)(_Arg))\tmem_fun1_ref_t<_Ret, _Tp, _Arg>', 'mem_fun_ref(${1:_Ret (_Tp::*__f)(_Arg)})')
('mem_fun_ref_t<class _Ret, class _Tp>\tunion', 'mem_fun_ref_t<${1:class _Ret}, ${2:class _Tp}>')
('mem_fun_t<class _Ret, class _Tp>\tunion', 'mem_fun_t<${1:class _Ret}, ${2:class _Tp}>')
('memchr(void *__p, int __c, size_t __n)\tvoid *', 'memchr(${1:void *__p}, ${2:int __c}, ${3:size_t __n})')
('merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'merge(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'merge(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('min(const _Tp &__a, const _Tp &__b)\tconst _Tp &', 'min(${1:const _Tp &__a}, ${2:const _Tp &__b})')
('min(const _Tp &__a, const _Tp &__b, _Compare __comp)\tconst _Tp &', 'min(${1:const _Tp &__a}, ${2:const _Tp &__b}, ${3:_Compare __comp})')
('min_element(_ForwardIterator __first, _ForwardIterator __last)\t_ForwardIterator', 'min_element(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\t_ForwardIterator', 'min_element(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Compare __comp})')
('minus<class _Tp>\tunion', 'minus<${1:class _Tp}>')
('mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\tpair<_InputIterator1, _InputIterator2>', 'mismatch(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2})')
('mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)\tpair<_InputIterator1, _InputIterator2>', 'mismatch(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_BinaryPredicate __binary_pred})')
('modulus<class _Tp>\tunion', 'modulus<${1:class _Tp}>')
('multiplies<class _Tp>\tunion', 'multiplies<${1:class _Tp}>')
('negate<class _Tp>\tunion', 'negate<${1:class _Tp}>')
('new_handler\ttypedef', 'new_handler')
('next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)\tbool', 'next_permutation(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last})')
('next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)\tbool', 'next_permutation(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:_Compare __comp})')
('not1(const _Predicate &__pred)\tunary_negate<_Predicate>', 'not1(${1:const _Predicate &__pred})')
('not2(const _Predicate &__pred)\tbinary_negate<_Predicate>', 'not2(${1:const _Predicate &__pred})')
('not_equal_to<class _Tp>\tunion', 'not_equal_to<${1:class _Tp}>')
('nothrow\tconst std::nothrow_t', 'nothrow')
('nothrow_t\tstruct', 'nothrow_t')
('npos\tconst typename basic_string<_CharT, _Traits, _Alloc>::size_type', 'npos')
('nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)\tvoid', 'nth_element(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __nth}, ${3:_RandomAccessIterator __last})')
('nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'nth_element(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __nth}, ${3:_RandomAccessIterator __last}, ${4:_Compare __comp})')
('numeric_limits\tstruct', 'numeric_limits')
('numeric_limits<typename _Tp>\tunion', 'numeric_limits<${1:typename _Tp}>')
('ofstream\ttypedef', 'ofstream')
('operator!=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator!=(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator!=(const allocator<_T1> &, const allocator<_T2> &)\tbool', 'operator!=(${1:const allocator<_T1> &}, ${2:const allocator<_T2> &})')
('operator!=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator!=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator!=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator!=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator!=(const fpos<_StateT> &__lhs, const fpos<_StateT> &__rhs)\tbool', 'operator!=(${1:const fpos<_StateT> &__lhs}, ${2:const fpos<_StateT> &__rhs})')
('operator!=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator!=(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator!=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator!=(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator!=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator!=(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator!=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator!=(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:_CharT __lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator+(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, _CharT __rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:_CharT __rhs})')
('operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator+(ptrdiff_t __n, const std::_Bit_const_iterator &__x)\tstd::_Bit_const_iterator', 'operator+(${1:ptrdiff_t __n}, ${2:const std::_Bit_const_iterator &__x})')
('operator+(ptrdiff_t __n, const std::_Bit_iterator &__x)\tstd::_Bit_iterator', 'operator+(${1:ptrdiff_t __n}, ${2:const std::_Bit_iterator &__x})')
('operator+(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator> &__x)\treverse_iterator<_Iterator>', 'operator+(${1:typename reverse_iterator<_Iterator>::difference_type __n}, ${2:const reverse_iterator<_Iterator> &__x})')
('operator-(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\ttypename reverse_iterator<_Iterator>::difference_type', 'operator-(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator-(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\ttypename reverse_iterator<_IteratorL>::difference_type', 'operator-(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator-(const std::_Bit_iterator_base &__x, const std::_Bit_iterator_base &__y)\tptrdiff_t', 'operator-(${1:const std::_Bit_iterator_base &__x}, ${2:const std::_Bit_iterator_base &__y})')
('operator<(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator<(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator<(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator<(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator<(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator<(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator<(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator<(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator<(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator<(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator<(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator<(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator<(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator<(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator<<(basic_ostream<_CharT, _Traits> &__os, const basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_ostream<_CharT, _Traits> &', 'operator<<(${1:basic_ostream<_CharT, _Traits> &__os}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__str})')
('operator<=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator<=(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator<=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator<=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator<=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator<=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator<=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator<=(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator<=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator<=(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator<=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator<=(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator<=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator<=(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator=(const vector<_Tp, _Alloc> &__x)\tvector<_Tp, _Alloc> &', 'operator=(${1:const vector<_Tp, _Alloc> &__x})')
('operator==(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator==(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator==(const allocator<_T1> &, const allocator<_T2> &)\tbool', 'operator==(${1:const allocator<_T1> &}, ${2:const allocator<_T2> &})')
('operator==(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator==(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator==(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator==(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator==(const fpos<_StateT> &__lhs, const fpos<_StateT> &__rhs)\tbool', 'operator==(${1:const fpos<_StateT> &__lhs}, ${2:const fpos<_StateT> &__rhs})')
('operator==(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator==(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator==(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator==(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator==(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator==(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator==(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator==(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator>(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator>(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator>(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator>(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator>(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator>(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator>(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator>(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator>(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator>(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator>(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator>(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator>(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator>(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator>=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator>=(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator>=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator>=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator>=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator>=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator>=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator>=(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator>=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator>=(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator>=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator>=(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator>=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator>=(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator>>(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_istream<_CharT, _Traits> &', 'operator>>(${1:basic_istream<_CharT, _Traits> &__is}, ${2:basic_string<_CharT, _Traits, _Alloc> &__str})')
('operator>>(basic_istream<char> &__is, basic_string<char> &__str)\tbasic_istream<char> &', 'operator>>(${1:basic_istream<char> &__is}, ${2:basic_string<char> &__str})')
('ostream\ttypedef', 'ostream')
('ostreambuf_iterator<typename _CharT>\tunion', 'ostreambuf_iterator<${1:typename _CharT}>')
('ostringstream\ttypedef', 'ostringstream')
('output_iterator_tag\tstruct', 'output_iterator_tag')
('pair<class _T1, class _T2>\tunion', 'pair<${1:class _T1}, ${2:class _T2}>')
('partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)\tvoid', 'partial_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last})')
('partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'partial_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last}, ${4:_Compare __comp})')
('partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last)\t_RandomAccessIterator', 'partial_sort_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_RandomAccessIterator __result_first}, ${4:_RandomAccessIterator __result_last})')
('partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)\t_RandomAccessIterator', 'partial_sort_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_RandomAccessIterator __result_first}, ${4:_RandomAccessIterator __result_last}, ${5:_Compare __comp})')
('partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\t_ForwardIterator', 'partition(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred})')
('plus<class _Tp>\tunion', 'plus<${1:class _Tp}>')
('pointer_to_binary_function<class _Arg1, class _Arg2, class _Result>\tunion', 'pointer_to_binary_function<${1:class _Arg1}, ${2:class _Arg2}, ${3:class _Result}>')
('pointer_to_unary_function<class _Arg, class _Result>\tunion', 'pointer_to_unary_function<${1:class _Arg}, ${2:class _Result}>')
('pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'pop_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'pop_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)\tbool', 'prev_permutation(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last})')
('prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)\tbool', 'prev_permutation(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:_Compare __comp})')
('ptr_fun(_Result (*__x)(_Arg))\tpointer_to_unary_function<_Arg, _Result>', 'ptr_fun(${1:_Result (*__x)(_Arg)})')
('ptr_fun(_Result (*__x)(_Arg1, _Arg2))\tpointer_to_binary_function<_Arg1, _Arg2, _Result>', 'ptr_fun(${1:_Result (*__x)(_Arg1, _Arg2)})')
('push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'push_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'push_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('random_access_iterator_tag\tstruct', 'random_access_iterator_tag')
('random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'random_shuffle(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &__rand)\tvoid', 'random_shuffle(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_RandomNumberGenerator &__rand})')
('raw_storage_iterator<class _ForwardIterator, class _Tp>\tunion', 'raw_storage_iterator<${1:class _ForwardIterator}, ${2:class _Tp}>')
('rel_ops\tnamespace', 'rel_ops')
('remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)\t_ForwardIterator', 'remove(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__value})')
('remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp &__value)\t_OutputIterator', 'remove_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:const _Tp &__value})')
('remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)\t_OutputIterator', 'remove_copy_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_Predicate __pred})')
('remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\t_ForwardIterator', 'remove_if(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred})')
('replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__old_value, const _Tp &__new_value)\tvoid', 'replace(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__old_value}, ${4:const _Tp &__new_value})')
('replace(size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)\tbasic_string<_CharT, _Traits, _Alloc> &', 'replace(${1:size_type __pos}, ${2:size_type __n1}, ${3:const _CharT *__s}, ${4:size_type __n2})')
('replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp &__old_value, const _Tp &__new_value)\t_OutputIterator', 'replace_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:const _Tp &__old_value}, ${5:const _Tp &__new_value})')
('replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp &__new_value)\t_OutputIterator', 'replace_copy_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_Predicate __pred}, ${5:const _Tp &__new_value})')
('replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp &__new_value)\tvoid', 'replace_if(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred}, ${4:const _Tp &__new_value})')
('reserve()\tvoid', 'reserve()')
('reserve(size_type __n)\tvoid', 'reserve(${1:size_type __n})')
('resize(size_type __n, _CharT __c)\tvoid', 'resize(${1:size_type __n}, ${2:_CharT __c})')
('return_temporary_buffer(_Tp *__p)\tvoid', 'return_temporary_buffer(${1:_Tp *__p})')
('reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\tvoid', 'reverse(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last})')
('reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)\t_OutputIterator', 'reverse_copy(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:_OutputIterator __result})')
('reverse_iterator<typename _Iterator>\tunion', 'reverse_iterator<${1:typename _Iterator}>')
('rfind(_CharT __c) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'rfind(${1:_CharT __c})')
('rfind(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'rfind(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)\tvoid', 'rotate(${1:_ForwardIterator __first}, ${2:_ForwardIterator __middle}, ${3:_ForwardIterator __last})')
('rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)\t_OutputIterator', 'rotate_copy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __middle}, ${3:_ForwardIterator __last}, ${4:_OutputIterator __result})')
('round_indeterminate\tstd::float_round_style', 'round_indeterminate')
('round_to_nearest\tstd::float_round_style', 'round_to_nearest')
('round_toward_infinity\tstd::float_round_style', 'round_toward_infinity')
('round_toward_neg_infinity\tstd::float_round_style', 'round_toward_neg_infinity')
('round_toward_zero\tstd::float_round_style', 'round_toward_zero')
('search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)\t_ForwardIterator1', 'search(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2})')
('search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)\t_ForwardIterator1', 'search(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2}, ${5:_BinaryPredicate __predicate})')
('search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val)\t_ForwardIterator', 'search_n(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Integer __count}, ${4:const _Tp &__val})')
('search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val, _BinaryPredicate __binary_pred)\t_ForwardIterator', 'search_n(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:_BinaryPredicate __binary_pred})')
('set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'set_difference(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'set_difference(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'set_intersection(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'set_intersection(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('set_new_handler(new_handler)\tnew_handler', 'set_new_handler(${1:new_handler})')
('set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'set_symmetric_difference(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'set_symmetric_difference(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('set_terminate(terminate_handler)\tterminate_handler', 'set_terminate(${1:terminate_handler})')
('set_unexpected(unexpected_handler)\tunexpected_handler', 'set_unexpected(${1:unexpected_handler})')
('set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'set_union(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'set_union(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'sort_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'sort_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\t_ForwardIterator', 'stable_partition(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred})')
('stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'stable_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'stable_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('strchr(char *__s1, int __n)\tchar *', 'strchr(${1:char *__s1}, ${2:int __n})')
('streambuf\ttypedef', 'streambuf')
('streamoff\ttypedef', 'streamoff')
('streampos\ttypedef', 'streampos')
('streamsize\ttypedef', 'streamsize')
('string\ttypedef', 'string')
('stringbuf\ttypedef', 'stringbuf')
('stringstream\ttypedef', 'stringstream')
('strpbrk(char *__s1, const char *__s2)\tchar *', 'strpbrk(${1:char *__s1}, ${2:const char *__s2})')
('strrchr(char *__s1, int __n)\tchar *', 'strrchr(${1:char *__s1}, ${2:int __n})')
('strstr(char *__s1, const char *__s2)\tchar *', 'strstr(${1:char *__s1}, ${2:const char *__s2})')
('swap(_Tp &__a, _Tp &__b)\tvoid', 'swap(${1:_Tp &__a}, ${2:_Tp &__b})')
('swap(basic_string<_CharT, _Traits, _Alloc> &__lhs, basic_string<_CharT, _Traits, _Alloc> &__rhs)\tvoid', 'swap(${1:basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('swap(basic_string<_CharT, _Traits, _Alloc> &__s)\tvoid', 'swap(${1:basic_string<_CharT, _Traits, _Alloc> &__s})')
('swap(vector<_Tp, _Alloc> &__x, vector<_Tp, _Alloc> &__y)\tvoid', 'swap(${1:vector<_Tp, _Alloc> &__x}, ${2:vector<_Tp, _Alloc> &__y})')
('swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)\t_ForwardIterator2', 'swap_ranges(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2})')
('terminate()\tvoid', 'terminate()')
('terminate_handler\ttypedef', 'terminate_handler')
('transform(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __unary_op)\t_OutputIterator', 'transform(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_UnaryOperation __unary_op})')
('transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _OutputIterator __result, _BinaryOperation __binary_op)\t_OutputIterator', 'transform(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_OutputIterator __result}, ${5:_BinaryOperation __binary_op})')
('unary_function<class _Arg, class _Result>\tunion', 'unary_function<${1:class _Arg}, ${2:class _Result}>')
('unary_negate<class _Predicate>\tunion', 'unary_negate<${1:class _Predicate}>')
('uncaught_exception()\tbool', 'uncaught_exception()')
('unexpected()\tvoid', 'unexpected()')
('unexpected_handler\ttypedef', 'unexpected_handler')
('uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)\t_ForwardIterator', 'uninitialized_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result})')
('uninitialized_copy(const char *__first, const char *__last, char *__result)\tchar *', 'uninitialized_copy(${1:const char *__first}, ${2:const char *__last}, ${3:char *__result})')
('uninitialized_copy(const wchar_t *__first, const wchar_t *__last, wchar_t *__result)\twchar_t *', 'uninitialized_copy(${1:const wchar_t *__first}, ${2:const wchar_t *__last}, ${3:wchar_t *__result})')
('uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x)\tvoid', 'uninitialized_fill(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x})')
('uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x)\tvoid', 'uninitialized_fill_n(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x})')
('unique(_ForwardIterator __first, _ForwardIterator __last)\t_ForwardIterator', 'unique(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)\t_ForwardIterator', 'unique(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_BinaryPredicate __binary_pred})')
('unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\t_OutputIterator', 'unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result})')
('unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)\t_OutputIterator', 'unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_BinaryPredicate __binary_pred})')
('upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)\t_ForwardIterator', 'upper_bound(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val})')
('upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)\t_ForwardIterator', 'upper_bound(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val}, ${4:_Compare __comp})')
('vector<typename _Tp>\tunion', 'vector<${1:typename _Tp}>')
('wcschr(wchar_t *__p, wchar_t __c)\twchar_t *', 'wcschr(${1:wchar_t *__p}, ${2:wchar_t __c})')
('wcspbrk(wchar_t *__s1, const wchar_t *__s2)\twchar_t *', 'wcspbrk(${1:wchar_t *__s1}, ${2:const wchar_t *__s2})')
('wcsrchr(wchar_t *__p, wchar_t __c)\twchar_t *', 'wcsrchr(${1:wchar_t *__p}, ${2:wchar_t __c})')
('wcsstr(wchar_t *__s1, const wchar_t *__s2)\twchar_t *', 'wcsstr(${1:wchar_t *__s1}, ${2:const wchar_t *__s2})')
('wfilebuf\ttypedef', 'wfilebuf')
('wfstream\ttypedef', 'wfstream')
('wifstream\ttypedef', 'wifstream')
('wios\ttypedef', 'wios')
('wiostream\ttypedef', 'wiostream')
('wistream\ttypedef', 'wistream')
('wistringstream\ttypedef', 'wistringstream')
('wmemchr(wchar_t *__p, wchar_t __c, size_t __n)\twchar_t *', 'wmemchr(${1:wchar_t *__p}, ${2:wchar_t __c}, ${3:size_t __n})')
('wofstream\ttypedef', 'wofstream')
('wostream\ttypedef', 'wostream')
('wostringstream\ttypedef', 'wostringstream')
('wstreambuf\ttypedef', 'wstreambuf')
('wstreampos\ttypedef', 'wstreampos')
('wstring\ttypedef', 'wstring')
('wstringbuf\ttypedef', 'wstringbuf')
('wstringstream\ttypedef', 'wstringstream')
