('_Bit_const_iterator\tstruct', '_Bit_const_iterator')
('_Bit_iterator\tstruct', '_Bit_iterator')
('_Bit_iterator_base\tstruct', '_Bit_iterator_base')
('_Bit_reference\tstruct', '_Bit_reference')
('_Bit_type\ttypedef', '_Bit_type')
('_Bvector_base<class _Alloc>\tunion', '_Bvector_base<${1:class _Alloc}>')
('_Construct(_T1 *__p)\tvoid', '_Construct(${1:_T1 *__p})')
('_Construct(_T1 *__p, const _T2 &__value)\tvoid', '_Construct(${1:_T1 *__p}, ${2:const _T2 &__value})')
('_Destroy(_ForwardIterator __first, _ForwardIterator __last)\tvoid', '_Destroy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator __alloc)\tvoid', '_Destroy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Allocator __alloc})')
('_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator<_Tp>)\tvoid', '_Destroy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:allocator<_Tp>})')
('_Destroy(_Tp *__pointer)\tvoid', '_Destroy(${1:_Tp *__pointer})')
('_Identity<class _Tp>\tunion', '_Identity<${1:class _Tp}>')
('_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)\tvoid', '_M_assign_aux(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:std::forward_iterator_tag})')
('_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)\tvoid', '_M_assign_aux(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:std::input_iterator_tag})')
('_M_clone(const _Alloc &__alloc)\t_CharT *', '_M_clone(${1:const _Alloc &__alloc})')
('_M_destroy(const _Alloc &__a)\tvoid', '_M_destroy(${1:const _Alloc &__a})')
('_M_fill_assign(size_t __n, const value_type &__val)\tvoid', '_M_fill_assign(${1:size_t __n}, ${2:const value_type &__val})')
('_M_fill_insert(iterator __position, size_type __n, const value_type &__x)\tvoid', '_M_fill_insert(${1:iterator __position}, ${2:size_type __n}, ${3:const value_type &__x})')
('_M_insert_aux(iterator __position, const _Tp &__x)\tvoid', '_M_insert_aux(${1:iterator __position}, ${2:const _Tp &__x})')
('_M_leak_hard()\tvoid', '_M_leak_hard()')
('_M_mutate(size_type __pos, size_type __len1, size_type __len2)\tvoid', '_M_mutate(${1:size_type __pos}, ${2:size_type __len1}, ${3:size_type __len2})')
('_M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)\tvoid', '_M_range_insert(${1:iterator __pos}, ${2:_InputIterator __first}, ${3:_InputIterator __last}, ${4:std::input_iterator_tag})')
('_M_range_insert(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)\tvoid', '_M_range_insert(${1:iterator __position}, ${2:_ForwardIterator __first}, ${3:_ForwardIterator __last}, ${4:std::forward_iterator_tag})')
('_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c)\tbasic_string<_CharT, _Traits, _Alloc> &', '_M_replace_aux(${1:size_type __pos1}, ${2:size_type __n1}, ${3:size_type __n2}, ${4:_CharT __c})')
('_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type)\tbasic_string<_CharT, _Traits, _Alloc> &', '_M_replace_dispatch(${1:iterator __i1}, ${2:iterator __i2}, ${3:_InputIterator __k1}, ${4:_InputIterator __k2}, ${5:std::__false_type})')
('_M_replace_safe(size_type __pos1, size_type __n1, const _CharT *__s, size_type __n2)\tbasic_string<_CharT, _Traits, _Alloc> &', '_M_replace_safe(${1:size_type __pos1}, ${2:size_type __n1}, ${3:const _CharT *__s}, ${4:size_type __n2})')
('_S_chunk_size\tenum <anonymous>', '_S_chunk_size')
('_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, std::forward_iterator_tag)\t_CharT *', '_S_construct(${1:_InIterator __beg}, ${2:_InIterator __end}, ${3:const _Alloc &__a}, ${4:std::forward_iterator_tag})')
('_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, std::input_iterator_tag)\t_CharT *', '_S_construct(${1:_InIterator __beg}, ${2:_InIterator __end}, ${3:const _Alloc &__a}, ${4:std::input_iterator_tag})')
('_S_construct(size_type __n, _CharT __c, const _Alloc &__a)\t_CharT *', '_S_construct(${1:size_type __n}, ${2:_CharT __c}, ${3:const _Alloc &__a})')
('_S_create(size_type __capacity, size_type __old_capacity, const _Alloc &__alloc)\ttypename basic_string<_CharT, _Traits, _Alloc>::_Rep *', '_S_create(${1:size_type __capacity}, ${2:size_type __old_capacity}, ${3:const _Alloc &__alloc})')
('_S_empty_rep_storage\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type [(sizeof(std::basic_string::_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) / sizeof(size_type)]', '_S_empty_rep_storage')
('_S_max_size\tconst typename basic_string<_CharT, _Traits, _Alloc>::size_type', '_S_max_size')
('_S_terminal\tconst _CharT', '_S_terminal')
('_S_threshold\tenum <anonymous>', '_S_threshold')
('_S_word_bit\tenum <anonymous>', '_S_word_bit')
('_Select1st<class _Pair>\tunion', '_Select1st<${1:class _Pair}>')
('_Select2nd<class _Pair>\tunion', '_Select2nd<${1:class _Pair}>')
('_Temporary_buffer<typename _ForwardIterator, typename _Tp>\tunion', '_Temporary_buffer<${1:typename _ForwardIterator}, ${2:typename _Tp}>')
('_Vector_base<typename _Tp, typename _Alloc>\tunion', '_Vector_base<${1:typename _Tp}, ${2:typename _Alloc}>')
('__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value)\tvoid', '__adjust_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __holeIndex}, ${3:_Distance __len}, ${4:_Tp __value})')
('__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)\tvoid', '__adjust_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __holeIndex}, ${3:_Distance __len}, ${4:_Tp __value}, ${5:_Compare __comp})')
('__advance(_BidirectionalIterator &__i, _Distance __n, std::bidirectional_iterator_tag)\tvoid', '__advance(${1:_BidirectionalIterator &__i}, ${2:_Distance __n}, ${3:std::bidirectional_iterator_tag})')
('__advance(_InputIterator &__i, _Distance __n, std::input_iterator_tag)\tvoid', '__advance(${1:_InputIterator &__i}, ${2:_Distance __n}, ${3:std::input_iterator_tag})')
('__advance(_RandomAccessIterator &__i, _Distance __n, std::random_access_iterator_tag)\tvoid', '__advance(${1:_RandomAccessIterator &__i}, ${2:_Distance __n}, ${3:std::random_access_iterator_tag})')
('__alloc_swap<typename _Alloc>\tunion', '__alloc_swap<${1:typename _Alloc}>')
('__are_same<typename, typename>\tunion', '__are_same<${1:typename}, ${2:typename}>')
('__c_file\ttypedef', '__c_file')
('__c_locale\ttypedef', '__c_locale')
('__c_lock\ttypedef', '__c_lock')
('__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size)\tvoid', '__chunk_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Distance __chunk_size})')
('__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size, _Compare __comp)\tvoid', '__chunk_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Distance __chunk_size}, ${4:_Compare __comp})')
('__convert_from_v(const __c_locale &, char *__out, const int __size, const char *__fmt, ...)\tint', '__convert_from_v(${1:const __c_locale &}, ${2:char *__out}, ${3:const int __size}, ${4:const char *__fmt, ...})')
('__copy\tstruct', '__copy')
('__copy<bool, typename>\tunion', '__copy<${1:bool}, ${2:typename}>')
('__copy_aux(_CharT *, _CharT *, ostreambuf_iterator<_CharT>)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT> >::__type', '__copy_aux(${1:_CharT *}, ${2:_CharT *}, ${3:ostreambuf_iterator<_CharT>})')
('__copy_aux(_II __first, _II __last, _OI __result)\t_OI', '__copy_aux(${1:_II __first}, ${2:_II __last}, ${3:_OI __result})')
('__copy_aux(const _CharT *, const _CharT *, ostreambuf_iterator<_CharT>)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT> >::__type', '__copy_aux(${1:const _CharT *}, ${2:const _CharT *}, ${3:ostreambuf_iterator<_CharT>})')
('__copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT *)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, _CharT *>::__type', '__copy_aux(${1:istreambuf_iterator<_CharT>}, ${2:istreambuf_iterator<_CharT>}, ${3:_CharT *})')
('__copy_backward\tstruct', '__copy_backward')
('__copy_backward<bool, typename>\tunion', '__copy_backward<${1:bool}, ${2:typename}>')
('__copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)\t_BI2', '__copy_backward_aux(${1:_BI1 __first}, ${2:_BI1 __last}, ${3:_BI2 __result})')
('__copy_backward_normal\tstruct', '__copy_backward_normal')
('__copy_backward_normal<bool, bool>\tunion', '__copy_backward_normal<${1:bool}, ${2:bool}>')
('__copy_normal\tstruct', '__copy_normal')
('__copy_normal<bool, bool>\tunion', '__copy_normal<${1:bool}, ${2:bool}>')
('__debug\tnamespace', '__debug')
('__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, std::__false_type)\tvoid', '__destroy_aux(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:std::__false_type})')
('__destroy_aux(_ForwardIterator, _ForwardIterator, std::__true_type)\tvoid', '__destroy_aux(${1:_ForwardIterator}, ${2:_ForwardIterator}, ${3:std::__true_type})')
('__detail\tnamespace', '__detail')
('__distance(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)\ttypename iterator_traits<_InputIterator>::difference_type', '__distance(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:std::input_iterator_tag})')
('__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, std::random_access_iterator_tag)\ttypename iterator_traits<_RandomAccessIterator>::difference_type', '__distance(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:std::random_access_iterator_tag})')
('__false_type\tstruct', '__false_type')
('__fill\tstruct', '__fill')
('__fill<bool>\tunion', '__fill<${1:bool}>')
('__fill_bvector(std::_Bit_iterator __first, std::_Bit_iterator __last, bool __x)\tvoid', '__fill_bvector(${1:std::_Bit_iterator __first}, ${2:std::_Bit_iterator __last}, ${3:bool __x})')
('__fill_n\tstruct', '__fill_n')
('__fill_n<bool>\tunion', '__fill_n<${1:bool}>')
('__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', '__final_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__final_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('__find(_InputIterator __first, _InputIterator __last, const _Tp &__val, std::input_iterator_tag)\t_InputIterator', '__find(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:const _Tp &__val}, ${4:std::input_iterator_tag})')
('__find(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp &__val, std::random_access_iterator_tag)\t_RandomAccessIterator', '__find(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:const _Tp &__val}, ${4:std::random_access_iterator_tag})')
('__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, std::bidirectional_iterator_tag, std::bidirectional_iterator_tag)\t_BidirectionalIterator1', '__find_end(${1:_BidirectionalIterator1 __first1}, ${2:_BidirectionalIterator1 __last1}, ${3:_BidirectionalIterator2 __first2}, ${4:_BidirectionalIterator2 __last2}, ${5:std::bidirectional_iterator_tag}, ${6:std::bidirectional_iterator_tag})')
('__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, std::bidirectional_iterator_tag, std::bidirectional_iterator_tag, _BinaryPredicate __comp)\t_BidirectionalIterator1', '__find_end(${1:_BidirectionalIterator1 __first1}, ${2:_BidirectionalIterator1 __last1}, ${3:_BidirectionalIterator2 __first2}, ${4:_BidirectionalIterator2 __last2}, ${5:std::bidirectional_iterator_tag}, ${6:std::bidirectional_iterator_tag}, ${7:_BinaryPredicate __comp})')
('__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, std::forward_iterator_tag, std::forward_iterator_tag)\t_ForwardIterator1', '__find_end(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2}, ${5:std::forward_iterator_tag}, ${6:std::forward_iterator_tag})')
('__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, std::forward_iterator_tag, std::forward_iterator_tag, _BinaryPredicate __comp)\t_ForwardIterator1', '__find_end(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2}, ${5:std::forward_iterator_tag}, ${6:std::forward_iterator_tag}, ${7:_BinaryPredicate __comp})')
('__find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred, std::input_iterator_tag)\t_InputIterator', '__find_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_Predicate __pred}, ${4:std::input_iterator_tag})')
('__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate __pred, std::random_access_iterator_tag)\t_RandomAccessIterator', '__find_if(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Predicate __pred}, ${4:std::random_access_iterator_tag})')
('__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)\t_EuclideanRingElement', '__gcd(${1:_EuclideanRingElement __m}, ${2:_EuclideanRingElement __n})')
('__get_temporary_buffer(ptrdiff_t __len, _Tp *)\tpair<_Tp *, ptrdiff_t>', '__get_temporary_buffer(${1:ptrdiff_t __len}, ${2:_Tp *})')
('__heap_select(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)\tvoid', '__heap_select(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last})')
('__heap_select(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__heap_select(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last}, ${4:_Compare __comp})')
('__inplace_stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len)\t_ForwardIterator', '__inplace_stable_partition(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred}, ${4:_Distance __len})')
('__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', '__inplace_stable_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__inplace_stable_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', '__insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit)\tvoid', '__introselect(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __nth}, ${3:_RandomAccessIterator __last}, ${4:_Size __depth_limit})')
('__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)\tvoid', '__introselect(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __nth}, ${3:_RandomAccessIterator __last}, ${4:_Size __depth_limit}, ${5:_Compare __comp})')
('__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit)\tvoid', '__introsort_loop(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Size __depth_limit})')
('__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)\tvoid', '__introsort_loop(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Size __depth_limit}, ${4:_Compare __comp})')
('__is_arithmetic<typename _Tp>\tunion', '__is_arithmetic<${1:typename _Tp}>')
('__is_char\tstruct', '__is_char')
('__is_char<typename _Tp>\tunion', '__is_char<${1:typename _Tp}>')
('__is_empty<typename _Tp>\tunion', '__is_empty<${1:typename _Tp}>')
('__is_floating\tstruct', '__is_floating')
('__is_floating<typename _Tp>\tunion', '__is_floating<${1:typename _Tp}>')
('__is_fundamental<typename _Tp>\tunion', '__is_fundamental<${1:typename _Tp}>')
('__is_heap(_RandomAccessIterator __first, _Distance __n)\tbool', '__is_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __n})')
('__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tbool', '__is_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _StrictWeakOrdering __comp)\tbool', '__is_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_StrictWeakOrdering __comp})')
('__is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp, _Distance __n)\tbool', '__is_heap(${1:_RandomAccessIterator __first}, ${2:_StrictWeakOrdering __comp}, ${3:_Distance __n})')
('__is_integer\tstruct', '__is_integer')
('__is_integer<typename _Tp>\tunion', '__is_integer<${1:typename _Tp}>')
('__is_normal_iterator<typename _Tp>\tunion', '__is_normal_iterator<${1:typename _Tp}>')
('__is_null_pointer(_Type *__ptr)\tbool', '__is_null_pointer(${1:_Type *__ptr})')
('__is_null_pointer(_Type)\tbool', '__is_null_pointer(${1:_Type})')
('__is_pod<typename _Tp>\tunion', '__is_pod<${1:typename _Tp}>')
('__is_pointer<typename _Tp>\tunion', '__is_pointer<${1:typename _Tp}>')
('__is_scalar<typename _Tp>\tunion', '__is_scalar<${1:typename _Tp}>')
('__is_void\tstruct', '__is_void')
('__is_void<typename _Tp>\tunion', '__is_void<${1:typename _Tp}>')
('__iter_swap\tstruct', '__iter_swap')
('__iter_swap<bool _BoolType>\tunion', '__iter_swap<${1:bool _BoolType}>')
('__iterator_category(const _Iter &)\ttypename iterator_traits<_Iter>::iterator_category', '__iterator_category(${1:const _Iter &})')
('__lg(_Size __n)\t_Size', '__lg(${1:_Size __n})')
('__median(const _Tp &__a, const _Tp &__b, const _Tp &__c)\tconst _Tp &', '__median(${1:const _Tp &__a}, ${2:const _Tp &__b}, ${3:const _Tp &__c})')
('__median(const _Tp &__a, const _Tp &__b, const _Tp &__c, _Compare __comp)\tconst _Tp &', '__median(${1:const _Tp &__a}, ${2:const _Tp &__b}, ${3:const _Tp &__c}, ${4:_Compare __comp})')
('__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size)\tvoid', '__merge_adaptive(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Distance __len1}, ${5:_Distance __len2}, ${6:_Pointer __buffer}, ${7:_Distance __buffer_size})')
('__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)\tvoid', '__merge_adaptive(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Distance __len1}, ${5:_Distance __len2}, ${6:_Pointer __buffer}, ${7:_Distance __buffer_size}, ${8:_Compare __comp})')
('__merge_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result)\t_BidirectionalIterator3', '__merge_backward(${1:_BidirectionalIterator1 __first1}, ${2:_BidirectionalIterator1 __last1}, ${3:_BidirectionalIterator2 __first2}, ${4:_BidirectionalIterator2 __last2}, ${5:_BidirectionalIterator3 __result})')
('__merge_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result, _Compare __comp)\t_BidirectionalIterator3', '__merge_backward(${1:_BidirectionalIterator1 __first1}, ${2:_BidirectionalIterator1 __last1}, ${3:_BidirectionalIterator2 __first2}, ${4:_BidirectionalIterator2 __last2}, ${5:_BidirectionalIterator3 __result}, ${6:_Compare __comp})')
('__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size)\tvoid', '__merge_sort_loop(${1:_RandomAccessIterator1 __first}, ${2:_RandomAccessIterator1 __last}, ${3:_RandomAccessIterator2 __result}, ${4:_Distance __step_size})')
('__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size, _Compare __comp)\tvoid', '__merge_sort_loop(${1:_RandomAccessIterator1 __first}, ${2:_RandomAccessIterator1 __last}, ${3:_RandomAccessIterator2 __result}, ${4:_Distance __step_size}, ${5:_Compare __comp})')
('__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer)\tvoid', '__merge_sort_with_buffer(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Pointer __buffer})')
('__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Compare __comp)\tvoid', '__merge_sort_with_buffer(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Pointer __buffer}, ${4:_Compare __comp})')
('__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2)\tvoid', '__merge_without_buffer(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Distance __len1}, ${5:_Distance __len2})')
('__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Compare __comp)\tvoid', '__merge_without_buffer(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Distance __len1}, ${5:_Distance __len2}, ${6:_Compare __comp})')
('__numeric_limits_base\tstruct', '__numeric_limits_base')
('__ostream_fill(basic_ostream<_CharT, _Traits> &__out, streamsize __n)\tvoid', '__ostream_fill(${1:basic_ostream<_CharT, _Traits> &__out}, ${2:streamsize __n})')
('__ostream_insert(basic_ostream<_CharT, _Traits> &__out, const _CharT *__s, streamsize __n)\tbasic_ostream<_CharT, _Traits> &', '__ostream_insert(${1:basic_ostream<_CharT, _Traits> &__out}, ${2:const _CharT *__s}, ${3:streamsize __n})')
('__ostream_write(basic_ostream<_CharT, _Traits> &__out, const _CharT *__s, streamsize __n)\tvoid', '__ostream_write(${1:basic_ostream<_CharT, _Traits> &__out}, ${2:const _CharT *__s}, ${3:streamsize __n})')
('__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, std::bidirectional_iterator_tag)\t_BidirectionalIterator', '__partition(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:_Predicate __pred}, ${4:std::bidirectional_iterator_tag})')
('__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, std::forward_iterator_tag)\t_ForwardIterator', '__partition(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred}, ${4:std::forward_iterator_tag})')
('__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value)\tvoid', '__pop_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_RandomAccessIterator __result}, ${4:_Tp __value})')
('__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Compare __comp)\tvoid', '__pop_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_RandomAccessIterator __result}, ${4:_Tp __value}, ${5:_Compare __comp})')
('__push_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value)\tvoid', '__push_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __holeIndex}, ${3:_Distance __topIndex}, ${4:_Tp __value})')
('__push_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)\tvoid', '__push_heap(${1:_RandomAccessIterator __first}, ${2:_Distance __holeIndex}, ${3:_Distance __topIndex}, ${4:_Tp __value}, ${5:_Compare __comp})')
('__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, std::bidirectional_iterator_tag)\tvoid', '__reverse(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:std::bidirectional_iterator_tag})')
('__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, std::random_access_iterator_tag)\tvoid', '__reverse(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:std::random_access_iterator_tag})')
('__rotate(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, std::bidirectional_iterator_tag)\tvoid', '__rotate(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:std::bidirectional_iterator_tag})')
('__rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, std::forward_iterator_tag)\tvoid', '__rotate(${1:_ForwardIterator __first}, ${2:_ForwardIterator __middle}, ${3:_ForwardIterator __last}, ${4:std::forward_iterator_tag})')
('__rotate(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, std::random_access_iterator_tag)\tvoid', '__rotate(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last}, ${4:std::random_access_iterator_tag})')
('__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1 __middle, _BidirectionalIterator1 __last, _Distance __len1, _Distance __len2, _BidirectionalIterator2 __buffer, _Distance __buffer_size)\t_BidirectionalIterator1', '__rotate_adaptive(${1:_BidirectionalIterator1 __first}, ${2:_BidirectionalIterator1 __middle}, ${3:_BidirectionalIterator1 __last}, ${4:_Distance __len1}, ${5:_Distance __len2}, ${6:_BidirectionalIterator2 __buffer}, ${7:_Distance __buffer_size})')
('__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val, _BinaryPredicate __binary_pred, std::forward_iterator_tag)\t_ForwardIterator', '__search_n(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:_BinaryPredicate __binary_pred}, ${6:std::forward_iterator_tag})')
('__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val, std::forward_iterator_tag)\t_ForwardIterator', '__search_n(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:std::forward_iterator_tag})')
('__search_n(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp &__val, _BinaryPredicate __binary_pred, std::random_access_iterator_tag)\t_RandomAccessIter', '__search_n(${1:_RandomAccessIter __first}, ${2:_RandomAccessIter __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:_BinaryPredicate __binary_pred}, ${6:std::random_access_iterator_tag})')
('__search_n(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp &__val, std::random_access_iterator_tag)\t_RandomAccessIter', '__search_n(${1:_RandomAccessIter __first}, ${2:_RandomAccessIter __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:std::random_access_iterator_tag})')
('__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)\t_ForwardIterator', '__stable_partition_adaptive(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred}, ${4:_Distance __len}, ${5:_Pointer __buffer}, ${6:_Distance __buffer_size})')
('__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size)\tvoid', '__stable_sort_adaptive(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Pointer __buffer}, ${4:_Distance __buffer_size})')
('__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)\tvoid', '__stable_sort_adaptive(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Pointer __buffer}, ${4:_Distance __buffer_size}, ${5:_Compare __comp})')
('__throw_bad_alloc()\tvoid', '__throw_bad_alloc()')
('__throw_bad_cast()\tvoid', '__throw_bad_cast()')
('__throw_bad_exception()\tvoid', '__throw_bad_exception()')
('__throw_bad_typeid()\tvoid', '__throw_bad_typeid()')
('__throw_domain_error(const char *)\tvoid', '__throw_domain_error(${1:const char *})')
('__throw_invalid_argument(const char *)\tvoid', '__throw_invalid_argument(${1:const char *})')
('__throw_ios_failure(const char *)\tvoid', '__throw_ios_failure(${1:const char *})')
('__throw_length_error(const char *)\tvoid', '__throw_length_error(${1:const char *})')
('__throw_logic_error(const char *)\tvoid', '__throw_logic_error(${1:const char *})')
('__throw_out_of_range(const char *)\tvoid', '__throw_out_of_range(${1:const char *})')
('__throw_overflow_error(const char *)\tvoid', '__throw_overflow_error(${1:const char *})')
('__throw_range_error(const char *)\tvoid', '__throw_range_error(${1:const char *})')
('__throw_runtime_error(const char *)\tvoid', '__throw_runtime_error(${1:const char *})')
('__throw_underflow_error(const char *)\tvoid', '__throw_underflow_error(${1:const char *})')
('__traitor<class _Sp, class _Tp>\tunion', '__traitor<${1:class _Sp}, ${2:class _Tp}>')
('__true_type\tstruct', '__true_type')
('__truth_type\tstruct', '__truth_type')
('__truth_type<bool>\tunion', '__truth_type<${1:bool}>')
('__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', '__unguarded_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', '__unguarded_insertion_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('__unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)\tvoid', '__unguarded_linear_insert(${1:_RandomAccessIterator __last}, ${2:_Tp __val})')
('__unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val, _Compare __comp)\tvoid', '__unguarded_linear_insert(${1:_RandomAccessIterator __last}, ${2:_Tp __val}, ${3:_Compare __comp})')
('__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot)\t_RandomAccessIterator', '__unguarded_partition(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Tp __pivot})')
('__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot, _Compare __comp)\t_RandomAccessIterator', '__unguarded_partition(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Tp __pivot}, ${4:_Compare __comp})')
('__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator __alloc)\t_ForwardIterator', '__uninitialized_copy_a(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:_Allocator __alloc})')
('__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, allocator<_Tp>)\t_ForwardIterator', '__uninitialized_copy_a(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:allocator<_Tp>})')
('__uninitialized_copy_aux(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, std::__false_type)\t_ForwardIterator', '__uninitialized_copy_aux(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:std::__false_type})')
('__uninitialized_copy_aux(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, std::__true_type)\t_ForwardIterator', '__uninitialized_copy_aux(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:std::__true_type})')
('__uninitialized_copy_copy(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator __alloc)\t_ForwardIterator', '__uninitialized_copy_copy(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_ForwardIterator __result}, ${6:_Allocator __alloc})')
('__uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, const _Tp &__x, _Allocator __alloc)\tvoid', '__uninitialized_copy_fill(${1:_InputIterator __first1}, ${2:_InputIterator __last1}, ${3:_ForwardIterator __first2}, ${4:_ForwardIterator __last2}, ${5:const _Tp &__x}, ${6:_Allocator __alloc})')
('__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, _Allocator __alloc)\tvoid', '__uninitialized_fill_a(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x}, ${4:_Allocator __alloc})')
('__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, allocator<_Tp2>)\tvoid', '__uninitialized_fill_a(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x}, ${4:allocator<_Tp2>})')
('__uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, std::__false_type)\tvoid', '__uninitialized_fill_aux(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x}, ${4:std::__false_type})')
('__uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, std::__true_type)\tvoid', '__uninitialized_fill_aux(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x}, ${4:std::__true_type})')
('__uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &__x, _InputIterator __first, _InputIterator __last, _Allocator __alloc)\t_ForwardIterator', '__uninitialized_fill_copy(${1:_ForwardIterator __result}, ${2:_ForwardIterator __mid}, ${3:const _Tp &__x}, ${4:_InputIterator __first}, ${5:_InputIterator __last}, ${6:_Allocator __alloc})')
('__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &__x, _Allocator __alloc)\tvoid', '__uninitialized_fill_n_a(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x}, ${4:_Allocator __alloc})')
('__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &__x, allocator<_Tp2>)\tvoid', '__uninitialized_fill_n_a(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x}, ${4:allocator<_Tp2>})')
('__uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n, const _Tp &__x, std::__false_type)\tvoid', '__uninitialized_fill_n_aux(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x}, ${4:std::__false_type})')
('__uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n, const _Tp &__x, std::__true_type)\tvoid', '__uninitialized_fill_n_aux(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x}, ${4:std::__true_type})')
('__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, std::forward_iterator_tag, std::output_iterator_tag)\t_OutputIterator', '__unique_copy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_OutputIterator __result}, ${4:_BinaryPredicate __binary_pred}, ${5:std::forward_iterator_tag}, ${6:std::output_iterator_tag})')
('__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::forward_iterator_tag, std::output_iterator_tag)\t_OutputIterator', '__unique_copy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_OutputIterator __result}, ${4:std::forward_iterator_tag}, ${5:std::output_iterator_tag})')
('__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _BinaryPredicate __binary_pred, std::input_iterator_tag, std::forward_iterator_tag)\t_ForwardIterator', '__unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:_BinaryPredicate __binary_pred}, ${5:std::input_iterator_tag}, ${6:std::forward_iterator_tag})')
('__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, std::input_iterator_tag, std::forward_iterator_tag)\t_ForwardIterator', '__unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result}, ${4:std::input_iterator_tag}, ${5:std::forward_iterator_tag})')
('__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, std::input_iterator_tag, std::output_iterator_tag)\t_OutputIterator', '__unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_BinaryPredicate __binary_pred}, ${5:std::input_iterator_tag}, ${6:std::output_iterator_tag})')
('__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, std::input_iterator_tag, std::output_iterator_tag)\t_OutputIterator', '__unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:std::input_iterator_tag}, ${5:std::output_iterator_tag})')
('abs(long __i)\tlong', 'abs(${1:long __i})')
('adjacent_find(_ForwardIterator __first, _ForwardIterator __last)\t_ForwardIterator', 'adjacent_find(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)\t_ForwardIterator', 'adjacent_find(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_BinaryPredicate __binary_pred})')
('advance(_InputIterator &__i, _Distance __n)\tvoid', 'advance(${1:_InputIterator &__i}, ${2:_Distance __n})')
('allocator\tclass', 'allocator')
('allocator<typename _Alloc>\tunion', 'allocator<${1:typename _Alloc}>')
('allocator<typename _Tp>\tunion', 'allocator<${1:typename _Tp}>')
('append(const _CharT *__s, size_type __n)\tbasic_string<_CharT, _Traits, _Alloc> &', 'append(${1:const _CharT *__s}, ${2:size_type __n})')
('append(const basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_string<_CharT, _Traits, _Alloc> &', 'append(${1:const basic_string<_CharT, _Traits, _Alloc> &__str})')
('append(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n)\tbasic_string<_CharT, _Traits, _Alloc> &', 'append(${1:const basic_string<_CharT, _Traits, _Alloc> &__str}, ${2:size_type __pos}, ${3:size_type __n})')
('append(size_type __n, _CharT __c)\tbasic_string<_CharT, _Traits, _Alloc> &', 'append(${1:size_type __n}, ${2:_CharT __c})')
('assign(const _CharT *__s, size_type __n)\tbasic_string<_CharT, _Traits, _Alloc> &', 'assign(${1:const _CharT *__s}, ${2:size_type __n})')
('assign(const basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_string<_CharT, _Traits, _Alloc> &', 'assign(${1:const basic_string<_CharT, _Traits, _Alloc> &__str})')
('auto_ptr<typename _Tp>\tunion', 'auto_ptr<${1:typename _Tp}>')
('auto_ptr_ref<typename _Tp1>\tunion', 'auto_ptr_ref<${1:typename _Tp1}>')
('back_insert_iterator<typename _Container>\tunion', 'back_insert_iterator<${1:typename _Container}>')
('back_inserter(_Container &__x)\tback_insert_iterator<_Container>', 'back_inserter(${1:_Container &__x})')
('bad_alloc\tclass', 'bad_alloc')
('bad_exception\tclass', 'bad_exception')
('basic_filebuf<typename _CharT>\tunion', 'basic_filebuf<${1:typename _CharT}>')
('basic_fstream<typename _CharT>\tunion', 'basic_fstream<${1:typename _CharT}>')
('basic_ifstream<typename _CharT>\tunion', 'basic_ifstream<${1:typename _CharT}>')
('basic_ios<typename _CharT>\tunion', 'basic_ios<${1:typename _CharT}>')
('basic_iostream<typename _CharT>\tunion', 'basic_iostream<${1:typename _CharT}>')
('basic_istream<typename _CharT>\tunion', 'basic_istream<${1:typename _CharT}>')
('basic_istringstream<typename _CharT>\tunion', 'basic_istringstream<${1:typename _CharT}>')
('basic_ofstream<typename _CharT>\tunion', 'basic_ofstream<${1:typename _CharT}>')
('basic_ostream<typename _CharT>\tunion', 'basic_ostream<${1:typename _CharT}>')
('basic_ostringstream<typename _CharT>\tunion', 'basic_ostringstream<${1:typename _CharT}>')
('basic_streambuf<typename _CharT>\tunion', 'basic_streambuf<${1:typename _CharT}>')
('basic_string\tclass', 'basic_string')
('basic_string<typename _CharT>\tunion', 'basic_string<${1:typename _CharT}>')
('basic_string<typename _CharT>(_InputIterator __beg, _InputIterator __end)\tvoid', 'basic_string<${1:typename _CharT}>(${2:_InputIterator __beg}, ${3:_InputIterator __end})')
('basic_stringbuf<typename _CharT>\tunion', 'basic_stringbuf<${1:typename _CharT}>')
('basic_stringstream<typename _CharT>\tunion', 'basic_stringstream<${1:typename _CharT}>')
('bidirectional_iterator_tag\tstruct', 'bidirectional_iterator_tag')
('binary_function<class _Arg1, class _Arg2, class _Result>\tunion', 'binary_function<${1:class _Arg1}, ${2:class _Arg2}, ${3:class _Result}>')
('binary_negate<class _Predicate>\tunion', 'binary_negate<${1:class _Predicate}>')
('binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)\tbool', 'binary_search(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val})')
('binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)\tbool', 'binary_search(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val}, ${4:_Compare __comp})')
('bind1st(const _Operation &__fn, const _Tp &__x)\tbinder1st<_Operation>', 'bind1st(${1:const _Operation &__fn}, ${2:const _Tp &__x})')
('bind2nd(const _Operation &__fn, const _Tp &__x)\tbinder2nd<_Operation>', 'bind2nd(${1:const _Operation &__fn}, ${2:const _Tp &__x})')
('binder1st<class _Operation>\tunion', 'binder1st<${1:class _Operation}>')
('binder2nd<class _Operation>\tunion', 'binder2nd<${1:class _Operation}>')
('char_traits\tstruct', 'char_traits')
('char_traits<class _CharT>\tunion', 'char_traits<${1:class _CharT}>')
('compare(const _CharT *__s) const\tint', 'compare(${1:const _CharT *__s})')
('compare(size_type __pos, size_type __n, const basic_string<_CharT, _Traits, _Alloc> &__str) const\tint', 'compare(${1:size_type __pos}, ${2:size_type __n}, ${3:const basic_string<_CharT, _Traits, _Alloc> &__str})')
('compare(size_type __pos, size_type __n1, const _CharT *__s) const\tint', 'compare(${1:size_type __pos}, ${2:size_type __n1}, ${3:const _CharT *__s})')
('compare(size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const\tint', 'compare(${1:size_type __pos}, ${2:size_type __n1}, ${3:const _CharT *__s}, ${4:size_type __n2})')
('compare(size_type __pos1, size_type __n1, const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos2, size_type __n2) const\tint', 'compare(${1:size_type __pos1}, ${2:size_type __n1}, ${3:const basic_string<_CharT, _Traits, _Alloc> &__str}, ${4:size_type __pos2}, ${5:size_type __n2})')
('const_mem_fun1_ref_t<class _Ret, class _Tp, class _Arg>\tunion', 'const_mem_fun1_ref_t<${1:class _Ret}, ${2:class _Tp}, ${3:class _Arg}>')
('const_mem_fun1_t<class _Ret, class _Tp, class _Arg>\tunion', 'const_mem_fun1_t<${1:class _Ret}, ${2:class _Tp}, ${3:class _Arg}>')
('const_mem_fun_ref_t<class _Ret, class _Tp>\tunion', 'const_mem_fun_ref_t<${1:class _Ret}, ${2:class _Tp}>')
('const_mem_fun_t<class _Ret, class _Tp>\tunion', 'const_mem_fun_t<${1:class _Ret}, ${2:class _Tp}>')
('copy(_CharT *__s, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'copy(${1:_CharT *__s}, ${2:size_type __n})')
('copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\t_OutputIterator', 'copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result})')
('copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT> >::__type', 'copy(${1:istreambuf_iterator<_CharT>}, ${2:istreambuf_iterator<_CharT>}, ${3:ostreambuf_iterator<_CharT>})')
('copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\t_BI2', 'copy_backward(${1:_BI1 __first}, ${2:_BI1 __last}, ${3:_BI2 __result})')
('count(_InputIterator __first, _InputIterator __last, const _Tp &__value)\ttypename iterator_traits<_InputIterator>::difference_type', 'count(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:const _Tp &__value})')
('count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\ttypename iterator_traits<_InputIterator>::difference_type', 'count_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_Predicate __pred})')
('denorm_absent\tstd::float_denorm_style', 'denorm_absent')
('denorm_indeterminate\tstd::float_denorm_style', 'denorm_indeterminate')
('denorm_present\tstd::float_denorm_style', 'denorm_present')
('distance(_InputIterator __first, _InputIterator __last)\ttypename iterator_traits<_InputIterator>::difference_type', 'distance(${1:_InputIterator __first}, ${2:_InputIterator __last})')
('div(long __i, long __j)\tldiv_t', 'div(${1:long __i}, ${2:long __j})')
('divides<class _Tp>\tunion', 'divides<${1:class _Tp}>')
('equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\tbool', 'equal(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2})')
('equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)\tbool', 'equal(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_BinaryPredicate __binary_pred})')
('equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)\tpair<_ForwardIterator, _ForwardIterator>', 'equal_range(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val})')
('equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)\tpair<_ForwardIterator, _ForwardIterator>', 'equal_range(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val}, ${4:_Compare __comp})')
('equal_to<class _Tp>\tunion', 'equal_to<${1:class _Tp}>')
('erase(iterator __first, iterator __last)\ttypename vector<_Tp, _Alloc>::iterator', 'erase(${1:iterator __first}, ${2:iterator __last})')
('erase(iterator __position)\ttypename vector<_Tp, _Alloc>::iterator', 'erase(${1:iterator __position})')
('exception\tclass', 'exception')
('filebuf\ttypedef', 'filebuf')
('fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)\tvoid', 'fill(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__value})')
('fill(char *__first, char *__last, const char &__c)\tvoid', 'fill(${1:char *__first}, ${2:char *__last}, ${3:const char &__c})')
('fill(signed char *__first, signed char *__last, const signed char &__c)\tvoid', 'fill(${1:signed char *__first}, ${2:signed char *__last}, ${3:const signed char &__c})')
('fill(std::_Bit_iterator __first, std::_Bit_iterator __last, const bool &__x)\tvoid', 'fill(${1:std::_Bit_iterator __first}, ${2:std::_Bit_iterator __last}, ${3:const bool &__x})')
('fill(unsigned char *__first, unsigned char *__last, const unsigned char &__c)\tvoid', 'fill(${1:unsigned char *__first}, ${2:unsigned char *__last}, ${3:const unsigned char &__c})')
('fill_n(_OutputIterator __first, _Size __n, const _Tp &__value)\t_OutputIterator', 'fill_n(${1:_OutputIterator __first}, ${2:_Size __n}, ${3:const _Tp &__value})')
('fill_n(char *__first, _Size __n, const char &__c)\tchar *', 'fill_n(${1:char *__first}, ${2:_Size __n}, ${3:const char &__c})')
('fill_n(signed char *__first, _Size __n, const signed char &__c)\tsigned char *', 'fill_n(${1:signed char *__first}, ${2:_Size __n}, ${3:const signed char &__c})')
('fill_n(unsigned char *__first, _Size __n, const unsigned char &__c)\tunsigned char *', 'fill_n(${1:unsigned char *__first}, ${2:_Size __n}, ${3:const unsigned char &__c})')
('find(_CharT __c) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find(${1:_CharT __c})')
('find(_InputIterator __first, _InputIterator __last, const _Tp &__val)\t_InputIterator', 'find(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:const _Tp &__val})')
('find(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, const _CharT &)\ttypename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, istreambuf_iterator<_CharT> >::__type', 'find(${1:istreambuf_iterator<_CharT>}, ${2:istreambuf_iterator<_CharT>}, ${3:const _CharT &})')
('find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)\t_ForwardIterator1', 'find_end(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2})')
('find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __comp)\t_ForwardIterator1', 'find_end(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2}, ${5:_BinaryPredicate __comp})')
('find_first_not_of(_CharT __c) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_first_not_of(${1:_CharT __c})')
('find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_first_not_of(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2)\t_InputIterator', 'find_first_of(${1:_InputIterator __first1}, ${2:_InputIterator __last1}, ${3:_ForwardIterator __first2}, ${4:_ForwardIterator __last2})')
('find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, _BinaryPredicate __comp)\t_InputIterator', 'find_first_of(${1:_InputIterator __first1}, ${2:_InputIterator __last1}, ${3:_ForwardIterator __first2}, ${4:_ForwardIterator __last2}, ${5:_BinaryPredicate __comp})')
('find_first_of(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_first_of(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\t_InputIterator', 'find_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_Predicate __pred})')
('find_last_not_of(_CharT __c) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_last_not_of(${1:_CharT __c})')
('find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_last_not_of(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('find_last_of(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'find_last_of(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('float_denorm_style\tenum', 'float_denorm_style')
('float_round_style\tenum', 'float_round_style')
('for_each(_InputIterator __first, _InputIterator __last, _Function __f)\t_Function', 'for_each(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_Function __f})')
('forward_iterator_tag\tstruct', 'forward_iterator_tag')
('fpos<typename _StateT>\tunion', 'fpos<${1:typename _StateT}>')
('front_insert_iterator<typename _Container>\tunion', 'front_insert_iterator<${1:typename _Container}>')
('front_inserter(_Container &__x)\tfront_insert_iterator<_Container>', 'front_inserter(${1:_Container &__x})')
('fstream\ttypedef', 'fstream')
('generate(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)\tvoid', 'generate(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Generator __gen})')
('generate_n(_OutputIterator __first, _Size __n, _Generator __gen)\t_OutputIterator', 'generate_n(${1:_OutputIterator __first}, ${2:_Size __n}, ${3:_Generator __gen})')
('get_temporary_buffer<typename _Tp>(ptrdiff_t __len)\tpair<_Tp *, ptrdiff_t>', 'get_temporary_buffer<${1:typename _Tp}>(${2:ptrdiff_t __len})')
('getline(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_istream<_CharT, _Traits> &', 'getline(${1:basic_istream<_CharT, _Traits> &__is}, ${2:basic_string<_CharT, _Traits, _Alloc> &__str})')
('getline(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str, _CharT __delim)\tbasic_istream<_CharT, _Traits> &', 'getline(${1:basic_istream<_CharT, _Traits> &__is}, ${2:basic_string<_CharT, _Traits, _Alloc> &__str}, ${3:_CharT __delim})')
('getline(basic_istream<char> &__in, basic_string<char> &__str, char __delim)\tbasic_istream<char> &', 'getline(${1:basic_istream<char> &__in}, ${2:basic_string<char> &__str}, ${3:char __delim})')
('getline(basic_istream<wchar_t> &__in, basic_string<wchar_t> &__str, wchar_t __delim)\tbasic_istream<wchar_t> &', 'getline(${1:basic_istream<wchar_t> &__in}, ${2:basic_string<wchar_t> &__str}, ${3:wchar_t __delim})')
('greater<class _Tp>\tunion', 'greater<${1:class _Tp}>')
('greater_equal<class _Tp>\tunion', 'greater_equal<${1:class _Tp}>')
('ifstream\ttypedef', 'ifstream')
('includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)\tbool', 'includes(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2})')
('includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\tbool', 'includes(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_Compare __comp})')
('inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)\tvoid', 'inplace_merge(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last})')
('inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)\tvoid', 'inplace_merge(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __middle}, ${3:_BidirectionalIterator __last}, ${4:_Compare __comp})')
('input_iterator_tag\tstruct', 'input_iterator_tag')
('insert(iterator __position, const value_type &__x)\ttypename vector<_Tp, _Alloc>::iterator', 'insert(${1:iterator __position}, ${2:const value_type &__x})')
('insert(size_type __pos, const _CharT *__s, size_type __n)\tbasic_string<_CharT, _Traits, _Alloc> &', 'insert(${1:size_type __pos}, ${2:const _CharT *__s}, ${3:size_type __n})')
('insert_iterator<typename _Container>\tunion', 'insert_iterator<${1:typename _Container}>')
('inserter(_Container &__x, _Iterator __i)\tinsert_iterator<_Container>', 'inserter(${1:_Container &__x}, ${2:_Iterator __i})')
('ios\ttypedef', 'ios')
('ios_base\tclass', 'ios_base')
('iostream\ttypedef', 'iostream')
('istream\ttypedef', 'istream')
('istreambuf_iterator<typename _CharT>\tunion', 'istreambuf_iterator<${1:typename _CharT}>')
('istringstream\ttypedef', 'istringstream')
('iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\tvoid', 'iter_swap(${1:_ForwardIterator1 __a}, ${2:_ForwardIterator2 __b})')
('iterator<typename _Category, typename _Tp>\tunion', 'iterator<${1:typename _Category}, ${2:typename _Tp}>')
('iterator_traits<typename _Iterator>\tunion', 'iterator_traits<${1:typename _Iterator}>')
('less<class _Tp>\tunion', 'less<${1:class _Tp}>')
('less_equal<class _Tp>\tunion', 'less_equal<${1:class _Tp}>')
('lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)\tbool', 'lexicographical_compare(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2})')
('lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\tbool', 'lexicographical_compare(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_Compare __comp})')
('lexicographical_compare(const char *__first1, const char *__last1, const char *__first2, const char *__last2)\tbool', 'lexicographical_compare(${1:const char *__first1}, ${2:const char *__last1}, ${3:const char *__first2}, ${4:const char *__last2})')
('lexicographical_compare(const unsigned char *__first1, const unsigned char *__last1, const unsigned char *__first2, const unsigned char *__last2)\tbool', 'lexicographical_compare(${1:const unsigned char *__first1}, ${2:const unsigned char *__last1}, ${3:const unsigned char *__first2}, ${4:const unsigned char *__last2})')
('logical_and<class _Tp>\tunion', 'logical_and<${1:class _Tp}>')
('logical_not<class _Tp>\tunion', 'logical_not<${1:class _Tp}>')
('logical_or<class _Tp>\tunion', 'logical_or<${1:class _Tp}>')
('lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)\t_ForwardIterator', 'lower_bound(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val})')
('lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)\t_ForwardIterator', 'lower_bound(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val}, ${4:_Compare __comp})')
('make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'make_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'make_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('make_pair(_T1 __x, _T2 __y)\tpair<_T1, _T2>', 'make_pair(${1:_T1 __x}, ${2:_T2 __y})')
('max(const _Tp &__a, const _Tp &__b)\tconst _Tp &', 'max(${1:const _Tp &__a}, ${2:const _Tp &__b})')
('max(const _Tp &__a, const _Tp &__b, _Compare __comp)\tconst _Tp &', 'max(${1:const _Tp &__a}, ${2:const _Tp &__b}, ${3:_Compare __comp})')
('max_element(_ForwardIterator __first, _ForwardIterator __last)\t_ForwardIterator', 'max_element(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\t_ForwardIterator', 'max_element(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Compare __comp})')
('mem_fun(_Ret (_Tp::*__f)() const)\tconst_mem_fun_t<_Ret, _Tp>', 'mem_fun(${1:_Ret (_Tp::*__f)() const})')
('mem_fun(_Ret (_Tp::*__f)())\tmem_fun_t<_Ret, _Tp>', 'mem_fun(${1:_Ret (_Tp::*__f)()})')
('mem_fun(_Ret (_Tp::*__f)(_Arg) const)\tconst_mem_fun1_t<_Ret, _Tp, _Arg>', 'mem_fun(${1:_Ret (_Tp::*__f)(_Arg) const})')
('mem_fun(_Ret (_Tp::*__f)(_Arg))\tmem_fun1_t<_Ret, _Tp, _Arg>', 'mem_fun(${1:_Ret (_Tp::*__f)(_Arg)})')
('mem_fun1_ref_t<class _Ret, class _Tp, class _Arg>\tunion', 'mem_fun1_ref_t<${1:class _Ret}, ${2:class _Tp}, ${3:class _Arg}>')
('mem_fun1_t<class _Ret, class _Tp, class _Arg>\tunion', 'mem_fun1_t<${1:class _Ret}, ${2:class _Tp}, ${3:class _Arg}>')
('mem_fun_ref(_Ret (_Tp::*__f)() const)\tconst_mem_fun_ref_t<_Ret, _Tp>', 'mem_fun_ref(${1:_Ret (_Tp::*__f)() const})')
('mem_fun_ref(_Ret (_Tp::*__f)())\tmem_fun_ref_t<_Ret, _Tp>', 'mem_fun_ref(${1:_Ret (_Tp::*__f)()})')
('mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)\tconst_mem_fun1_ref_t<_Ret, _Tp, _Arg>', 'mem_fun_ref(${1:_Ret (_Tp::*__f)(_Arg) const})')
('mem_fun_ref(_Ret (_Tp::*__f)(_Arg))\tmem_fun1_ref_t<_Ret, _Tp, _Arg>', 'mem_fun_ref(${1:_Ret (_Tp::*__f)(_Arg)})')
('mem_fun_ref_t<class _Ret, class _Tp>\tunion', 'mem_fun_ref_t<${1:class _Ret}, ${2:class _Tp}>')
('mem_fun_t<class _Ret, class _Tp>\tunion', 'mem_fun_t<${1:class _Ret}, ${2:class _Tp}>')
('memchr(void *__p, int __c, size_t __n)\tvoid *', 'memchr(${1:void *__p}, ${2:int __c}, ${3:size_t __n})')
('merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'merge(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'merge(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('min(const _Tp &__a, const _Tp &__b)\tconst _Tp &', 'min(${1:const _Tp &__a}, ${2:const _Tp &__b})')
('min(const _Tp &__a, const _Tp &__b, _Compare __comp)\tconst _Tp &', 'min(${1:const _Tp &__a}, ${2:const _Tp &__b}, ${3:_Compare __comp})')
('min_element(_ForwardIterator __first, _ForwardIterator __last)\t_ForwardIterator', 'min_element(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\t_ForwardIterator', 'min_element(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Compare __comp})')
('minus<class _Tp>\tunion', 'minus<${1:class _Tp}>')
('mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\tpair<_InputIterator1, _InputIterator2>', 'mismatch(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2})')
('mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)\tpair<_InputIterator1, _InputIterator2>', 'mismatch(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_BinaryPredicate __binary_pred})')
('modulus<class _Tp>\tunion', 'modulus<${1:class _Tp}>')
('multiplies<class _Tp>\tunion', 'multiplies<${1:class _Tp}>')
('negate<class _Tp>\tunion', 'negate<${1:class _Tp}>')
('new_handler\ttypedef', 'new_handler')
('next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)\tbool', 'next_permutation(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last})')
('next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)\tbool', 'next_permutation(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:_Compare __comp})')
('not1(const _Predicate &__pred)\tunary_negate<_Predicate>', 'not1(${1:const _Predicate &__pred})')
('not2(const _Predicate &__pred)\tbinary_negate<_Predicate>', 'not2(${1:const _Predicate &__pred})')
('not_equal_to<class _Tp>\tunion', 'not_equal_to<${1:class _Tp}>')
('nothrow\tconst std::nothrow_t', 'nothrow')
('nothrow_t\tstruct', 'nothrow_t')
('npos\tconst typename basic_string<_CharT, _Traits, _Alloc>::size_type', 'npos')
('nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)\tvoid', 'nth_element(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __nth}, ${3:_RandomAccessIterator __last})')
('nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'nth_element(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __nth}, ${3:_RandomAccessIterator __last}, ${4:_Compare __comp})')
('numeric_limits\tstruct', 'numeric_limits')
('numeric_limits<typename _Tp>\tunion', 'numeric_limits<${1:typename _Tp}>')
('ofstream\ttypedef', 'ofstream')
('operator!=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator!=(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator!=(const allocator<_T1> &, const allocator<_T2> &)\tbool', 'operator!=(${1:const allocator<_T1> &}, ${2:const allocator<_T2> &})')
('operator!=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator!=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator!=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator!=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator!=(const fpos<_StateT> &__lhs, const fpos<_StateT> &__rhs)\tbool', 'operator!=(${1:const fpos<_StateT> &__lhs}, ${2:const fpos<_StateT> &__rhs})')
('operator!=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator!=(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator!=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator!=(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator!=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator!=(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator!=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator!=(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:_CharT __lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator+(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, _CharT __rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:_CharT __rhs})')
('operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbasic_string<_CharT, _Traits, _Alloc>', 'operator+(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator+(ptrdiff_t __n, const std::_Bit_const_iterator &__x)\tstd::_Bit_const_iterator', 'operator+(${1:ptrdiff_t __n}, ${2:const std::_Bit_const_iterator &__x})')
('operator+(ptrdiff_t __n, const std::_Bit_iterator &__x)\tstd::_Bit_iterator', 'operator+(${1:ptrdiff_t __n}, ${2:const std::_Bit_iterator &__x})')
('operator+(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator> &__x)\treverse_iterator<_Iterator>', 'operator+(${1:typename reverse_iterator<_Iterator>::difference_type __n}, ${2:const reverse_iterator<_Iterator> &__x})')
('operator-(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\ttypename reverse_iterator<_Iterator>::difference_type', 'operator-(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator-(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\ttypename reverse_iterator<_IteratorL>::difference_type', 'operator-(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator-(const std::_Bit_iterator_base &__x, const std::_Bit_iterator_base &__y)\tptrdiff_t', 'operator-(${1:const std::_Bit_iterator_base &__x}, ${2:const std::_Bit_iterator_base &__y})')
('operator<(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator<(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator<(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator<(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator<(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator<(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator<(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator<(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator<(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator<(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator<(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator<(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator<(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator<(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator<<(basic_ostream<_CharT, _Traits> &__os, const basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_ostream<_CharT, _Traits> &', 'operator<<(${1:basic_ostream<_CharT, _Traits> &__os}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__str})')
('operator<=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator<=(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator<=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator<=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator<=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator<=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator<=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator<=(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator<=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator<=(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator<=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator<=(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator<=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator<=(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator=(const vector<_Tp, _Alloc> &__x)\tvector<_Tp, _Alloc> &', 'operator=(${1:const vector<_Tp, _Alloc> &__x})')
('operator==(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator==(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator==(const allocator<_T1> &, const allocator<_T2> &)\tbool', 'operator==(${1:const allocator<_T1> &}, ${2:const allocator<_T2> &})')
('operator==(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator==(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator==(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator==(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator==(const fpos<_StateT> &__lhs, const fpos<_StateT> &__rhs)\tbool', 'operator==(${1:const fpos<_StateT> &__lhs}, ${2:const fpos<_StateT> &__rhs})')
('operator==(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator==(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator==(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator==(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator==(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator==(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator==(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator==(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator>(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator>(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator>(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator>(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator>(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator>(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator>(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator>(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator>(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator>(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator>(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator>(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator>(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator>(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator>=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator>=(${1:const _CharT *__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator>=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs)\tbool', 'operator>=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const _CharT *__rhs})')
('operator>=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs)\tbool', 'operator>=(${1:const basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:const basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('operator>=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)\tbool', 'operator>=(${1:const pair<_T1, _T2> &__x}, ${2:const pair<_T1, _T2> &__y})')
('operator>=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y)\tbool', 'operator>=(${1:const reverse_iterator<_Iterator> &__x}, ${2:const reverse_iterator<_Iterator> &__y})')
('operator>=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y)\tbool', 'operator>=(${1:const reverse_iterator<_IteratorL> &__x}, ${2:const reverse_iterator<_IteratorR> &__y})')
('operator>=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)\tbool', 'operator>=(${1:const vector<_Tp, _Alloc> &__x}, ${2:const vector<_Tp, _Alloc> &__y})')
('operator>>(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str)\tbasic_istream<_CharT, _Traits> &', 'operator>>(${1:basic_istream<_CharT, _Traits> &__is}, ${2:basic_string<_CharT, _Traits, _Alloc> &__str})')
('operator>>(basic_istream<char> &__is, basic_string<char> &__str)\tbasic_istream<char> &', 'operator>>(${1:basic_istream<char> &__is}, ${2:basic_string<char> &__str})')
('ostream\ttypedef', 'ostream')
('ostreambuf_iterator<typename _CharT>\tunion', 'ostreambuf_iterator<${1:typename _CharT}>')
('ostringstream\ttypedef', 'ostringstream')
('output_iterator_tag\tstruct', 'output_iterator_tag')
('pair<class _T1, class _T2>\tunion', 'pair<${1:class _T1}, ${2:class _T2}>')
('partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)\tvoid', 'partial_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last})')
('partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'partial_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __middle}, ${3:_RandomAccessIterator __last}, ${4:_Compare __comp})')
('partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last)\t_RandomAccessIterator', 'partial_sort_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_RandomAccessIterator __result_first}, ${4:_RandomAccessIterator __result_last})')
('partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)\t_RandomAccessIterator', 'partial_sort_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_RandomAccessIterator __result_first}, ${4:_RandomAccessIterator __result_last}, ${5:_Compare __comp})')
('partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\t_ForwardIterator', 'partition(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred})')
('plus<class _Tp>\tunion', 'plus<${1:class _Tp}>')
('pointer_to_binary_function<class _Arg1, class _Arg2, class _Result>\tunion', 'pointer_to_binary_function<${1:class _Arg1}, ${2:class _Arg2}, ${3:class _Result}>')
('pointer_to_unary_function<class _Arg, class _Result>\tunion', 'pointer_to_unary_function<${1:class _Arg}, ${2:class _Result}>')
('pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'pop_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'pop_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)\tbool', 'prev_permutation(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last})')
('prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)\tbool', 'prev_permutation(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:_Compare __comp})')
('ptr_fun(_Result (*__x)(_Arg))\tpointer_to_unary_function<_Arg, _Result>', 'ptr_fun(${1:_Result (*__x)(_Arg)})')
('ptr_fun(_Result (*__x)(_Arg1, _Arg2))\tpointer_to_binary_function<_Arg1, _Arg2, _Result>', 'ptr_fun(${1:_Result (*__x)(_Arg1, _Arg2)})')
('push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'push_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'push_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('random_access_iterator_tag\tstruct', 'random_access_iterator_tag')
('random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'random_shuffle(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &__rand)\tvoid', 'random_shuffle(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_RandomNumberGenerator &__rand})')
('raw_storage_iterator<class _ForwardIterator, class _Tp>\tunion', 'raw_storage_iterator<${1:class _ForwardIterator}, ${2:class _Tp}>')
('rel_ops\tnamespace', 'rel_ops')
('remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)\t_ForwardIterator', 'remove(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__value})')
('remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp &__value)\t_OutputIterator', 'remove_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:const _Tp &__value})')
('remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)\t_OutputIterator', 'remove_copy_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_Predicate __pred})')
('remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\t_ForwardIterator', 'remove_if(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred})')
('replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__old_value, const _Tp &__new_value)\tvoid', 'replace(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__old_value}, ${4:const _Tp &__new_value})')
('replace(size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)\tbasic_string<_CharT, _Traits, _Alloc> &', 'replace(${1:size_type __pos}, ${2:size_type __n1}, ${3:const _CharT *__s}, ${4:size_type __n2})')
('replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp &__old_value, const _Tp &__new_value)\t_OutputIterator', 'replace_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:const _Tp &__old_value}, ${5:const _Tp &__new_value})')
('replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp &__new_value)\t_OutputIterator', 'replace_copy_if(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_Predicate __pred}, ${5:const _Tp &__new_value})')
('replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp &__new_value)\tvoid', 'replace_if(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred}, ${4:const _Tp &__new_value})')
('reserve()\tvoid', 'reserve()')
('reserve(size_type __n)\tvoid', 'reserve(${1:size_type __n})')
('resize(size_type __n, _CharT __c)\tvoid', 'resize(${1:size_type __n}, ${2:_CharT __c})')
('return_temporary_buffer(_Tp *__p)\tvoid', 'return_temporary_buffer(${1:_Tp *__p})')
('reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\tvoid', 'reverse(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last})')
('reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)\t_OutputIterator', 'reverse_copy(${1:_BidirectionalIterator __first}, ${2:_BidirectionalIterator __last}, ${3:_OutputIterator __result})')
('reverse_iterator<typename _Iterator>\tunion', 'reverse_iterator<${1:typename _Iterator}>')
('rfind(_CharT __c) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'rfind(${1:_CharT __c})')
('rfind(const _CharT *__s, size_type __pos, size_type __n) const\ttypename basic_string<_CharT, _Traits, _Alloc>::size_type', 'rfind(${1:const _CharT *__s}, ${2:size_type __pos}, ${3:size_type __n})')
('rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)\tvoid', 'rotate(${1:_ForwardIterator __first}, ${2:_ForwardIterator __middle}, ${3:_ForwardIterator __last})')
('rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)\t_OutputIterator', 'rotate_copy(${1:_ForwardIterator __first}, ${2:_ForwardIterator __middle}, ${3:_ForwardIterator __last}, ${4:_OutputIterator __result})')
('round_indeterminate\tstd::float_round_style', 'round_indeterminate')
('round_to_nearest\tstd::float_round_style', 'round_to_nearest')
('round_toward_infinity\tstd::float_round_style', 'round_toward_infinity')
('round_toward_neg_infinity\tstd::float_round_style', 'round_toward_neg_infinity')
('round_toward_zero\tstd::float_round_style', 'round_toward_zero')
('search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)\t_ForwardIterator1', 'search(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2})')
('search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)\t_ForwardIterator1', 'search(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2}, ${4:_ForwardIterator2 __last2}, ${5:_BinaryPredicate __predicate})')
('search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val)\t_ForwardIterator', 'search_n(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Integer __count}, ${4:const _Tp &__val})')
('search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val, _BinaryPredicate __binary_pred)\t_ForwardIterator', 'search_n(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Integer __count}, ${4:const _Tp &__val}, ${5:_BinaryPredicate __binary_pred})')
('set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'set_difference(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'set_difference(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'set_intersection(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'set_intersection(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('set_new_handler(new_handler)\tnew_handler', 'set_new_handler(${1:new_handler})')
('set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'set_symmetric_difference(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'set_symmetric_difference(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('set_terminate(terminate_handler)\tterminate_handler', 'set_terminate(${1:terminate_handler})')
('set_unexpected(unexpected_handler)\tunexpected_handler', 'set_unexpected(${1:unexpected_handler})')
('set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\t_OutputIterator', 'set_union(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result})')
('set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\t_OutputIterator', 'set_union(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})')
('sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'sort_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'sort_heap(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\t_ForwardIterator', 'stable_partition(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_Predicate __pred})')
('stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\tvoid', 'stable_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last})')
('stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\tvoid', 'stable_sort(${1:_RandomAccessIterator __first}, ${2:_RandomAccessIterator __last}, ${3:_Compare __comp})')
('strchr(char *__s1, int __n)\tchar *', 'strchr(${1:char *__s1}, ${2:int __n})')
('streambuf\ttypedef', 'streambuf')
('streamoff\ttypedef', 'streamoff')
('streampos\ttypedef', 'streampos')
('streamsize\ttypedef', 'streamsize')
('string\ttypedef', 'string')
('stringbuf\ttypedef', 'stringbuf')
('stringstream\ttypedef', 'stringstream')
('strpbrk(char *__s1, const char *__s2)\tchar *', 'strpbrk(${1:char *__s1}, ${2:const char *__s2})')
('strrchr(char *__s1, int __n)\tchar *', 'strrchr(${1:char *__s1}, ${2:int __n})')
('strstr(char *__s1, const char *__s2)\tchar *', 'strstr(${1:char *__s1}, ${2:const char *__s2})')
('swap(_Tp &__a, _Tp &__b)\tvoid', 'swap(${1:_Tp &__a}, ${2:_Tp &__b})')
('swap(basic_string<_CharT, _Traits, _Alloc> &__lhs, basic_string<_CharT, _Traits, _Alloc> &__rhs)\tvoid', 'swap(${1:basic_string<_CharT, _Traits, _Alloc> &__lhs}, ${2:basic_string<_CharT, _Traits, _Alloc> &__rhs})')
('swap(basic_string<_CharT, _Traits, _Alloc> &__s)\tvoid', 'swap(${1:basic_string<_CharT, _Traits, _Alloc> &__s})')
('swap(vector<_Tp, _Alloc> &__x, vector<_Tp, _Alloc> &__y)\tvoid', 'swap(${1:vector<_Tp, _Alloc> &__x}, ${2:vector<_Tp, _Alloc> &__y})')
('swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)\t_ForwardIterator2', 'swap_ranges(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2})')
('terminate()\tvoid', 'terminate()')
('terminate_handler\ttypedef', 'terminate_handler')
('transform(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __unary_op)\t_OutputIterator', 'transform(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_UnaryOperation __unary_op})')
('transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _OutputIterator __result, _BinaryOperation __binary_op)\t_OutputIterator', 'transform(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_OutputIterator __result}, ${5:_BinaryOperation __binary_op})')
('unary_function<class _Arg, class _Result>\tunion', 'unary_function<${1:class _Arg}, ${2:class _Result}>')
('unary_negate<class _Predicate>\tunion', 'unary_negate<${1:class _Predicate}>')
('uncaught_exception()\tbool', 'uncaught_exception()')
('unexpected()\tvoid', 'unexpected()')
('unexpected_handler\ttypedef', 'unexpected_handler')
('uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)\t_ForwardIterator', 'uninitialized_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_ForwardIterator __result})')
('uninitialized_copy(const char *__first, const char *__last, char *__result)\tchar *', 'uninitialized_copy(${1:const char *__first}, ${2:const char *__last}, ${3:char *__result})')
('uninitialized_copy(const wchar_t *__first, const wchar_t *__last, wchar_t *__result)\twchar_t *', 'uninitialized_copy(${1:const wchar_t *__first}, ${2:const wchar_t *__last}, ${3:wchar_t *__result})')
('uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x)\tvoid', 'uninitialized_fill(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__x})')
('uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x)\tvoid', 'uninitialized_fill_n(${1:_ForwardIterator __first}, ${2:_Size __n}, ${3:const _Tp &__x})')
('unique(_ForwardIterator __first, _ForwardIterator __last)\t_ForwardIterator', 'unique(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last})')
('unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)\t_ForwardIterator', 'unique(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:_BinaryPredicate __binary_pred})')
('unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\t_OutputIterator', 'unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result})')
('unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)\t_OutputIterator', 'unique_copy(${1:_InputIterator __first}, ${2:_InputIterator __last}, ${3:_OutputIterator __result}, ${4:_BinaryPredicate __binary_pred})')
('upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)\t_ForwardIterator', 'upper_bound(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val})')
('upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)\t_ForwardIterator', 'upper_bound(${1:_ForwardIterator __first}, ${2:_ForwardIterator __last}, ${3:const _Tp &__val}, ${4:_Compare __comp})')
('vector<typename _Tp>\tunion', 'vector<${1:typename _Tp}>')
('wcschr(wchar_t *__p, wchar_t __c)\twchar_t *', 'wcschr(${1:wchar_t *__p}, ${2:wchar_t __c})')
('wcspbrk(wchar_t *__s1, const wchar_t *__s2)\twchar_t *', 'wcspbrk(${1:wchar_t *__s1}, ${2:const wchar_t *__s2})')
('wcsrchr(wchar_t *__p, wchar_t __c)\twchar_t *', 'wcsrchr(${1:wchar_t *__p}, ${2:wchar_t __c})')
('wcsstr(wchar_t *__s1, const wchar_t *__s2)\twchar_t *', 'wcsstr(${1:wchar_t *__s1}, ${2:const wchar_t *__s2})')
('wfilebuf\ttypedef', 'wfilebuf')
('wfstream\ttypedef', 'wfstream')
('wifstream\ttypedef', 'wifstream')
('wios\ttypedef', 'wios')
('wiostream\ttypedef', 'wiostream')
('wistream\ttypedef', 'wistream')
('wistringstream\ttypedef', 'wistringstream')
('wmemchr(wchar_t *__p, wchar_t __c, size_t __n)\twchar_t *', 'wmemchr(${1:wchar_t *__p}, ${2:wchar_t __c}, ${3:size_t __n})')
('wofstream\ttypedef', 'wofstream')
('wostream\ttypedef', 'wostream')
('wostringstream\ttypedef', 'wostringstream')
('wstreambuf\ttypedef', 'wstreambuf')
('wstreampos\ttypedef', 'wstreampos')
('wstring\ttypedef', 'wstring')
('wstringbuf\ttypedef', 'wstringbuf')
('wstringstream\ttypedef', 'wstringstream')
